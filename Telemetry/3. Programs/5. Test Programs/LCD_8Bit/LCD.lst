*** Begin Root ***
Start: 0x1472
End: 0x2885
[DKCOMMON.LIB(225:1)]: #asm
[DKCOMMON.LIB(227:1)]: #endasm
[DKCORE.LIB(2449:1)]: #asm
[DKCORE.LIB(2451:1)]: #endasm
[PROGRAM.LIB(75:1)]: #asm
[PROGRAM.LIB(77:1)]: #endasm
*** Constant Data ***
   1472  01 08 02 20 85 B4 00 08 02 08 02 08 85 B4 00 08	                
   1482  03 0E 00 01 E3 B4 00 00 2A 2A 2A 2A 2A 2A 2A 2A	        ********
   1492  2A 2A 2A 2A 2A 2A 2A 2A 00 2A 2A 4C 43 44 20 49	******** **LCD I
   14a2  53 20 52 45 41 44 59 2A 2A 00                   S READY** 
*** End Constant Data ***
[DKCORE.LIB(2466:1)]: dkDoWatchExpression(WatchExpression)
[DKCORE.LIB(2469:4)]: {
   14ac 110002       ld de, 0x0200                            6
   14af 010000       ld bc, 0x0000                            6
   14b2 DDF5         push bcde                                18
   14b4 CFD3E803     lcall xalloc                             19
   14b8 2704         add sp, 4                                4
   14ba 21B1B3       ld hl, 0xB3B1                            6
   14bd DD1B         ld (hl), bcde                            18
[DKCORE.LIB(2471:4)]: }
   14bf C9           ret                                      8
[DKCORE.LIB(2474:1)]: #asm
   14c0 210002       ld hl, 0x0200                            6
   14c3 CC           bool hl                                  2
   14c4 2811         jr z, .dwe_na                            5
   14c6 110200       ld de, 0x0002                            6
   14c9 210200       ld hl, 0x0002                            6
   14cc 39           add hl, sp                               2
   14cd 19           add hl, de                               2
   14ce DDE400       ld hl, (hl + 0)                          11
   14d1 4810         cp hl, 16                                4
   14d3 2805         jr z, .dwe_Type_GE_TSTRUCT               5
   14d5 3003         jr nc, .dwe_Type_GE_TSTRUCT              5
[DKCORE.LIB(2491:1)]: .dwe_na:
   14d7 C35F15       jp .dwe_end                              7
[DKCORE.LIB(2495:1)]: .dwe_Type_GE_TSTRUCT:
   14da 110400       ld de, 0x0004                            6
   14dd 210200       ld hl, 0x0002                            6
   14e0 39           add hl, sp                               2
   14e1 19           add hl, de                               2
   14e2 7E           ld a, (hl)                               5
   14e3 E603         and 0x03                                 4
   14e5 FE02         cp 0x02                                  4
   14e7 CA5F15       jp z, .dwe_end                           7
[DKCORE.LIB(2508:1)]: .dwe_Mods_NE_POINTER:
   14ea 110000       ld de, 0x0000                            6
   14ed 210200       ld hl, 0x0002                            6
   14f0 39           add hl, sp                               2
   14f1 19           add hl, de                               2
   14f2 DDE400       ld hl, (hl + 0)                          11
   14f5 7F4D         ld c, l                                  4
   14f7 7F44         ld b, h                                  4
   14f9 2A82B2       ld hl, (0xB282)                          11
   14fc 09           add hl, bc                               2
   14fd 110002       ld de, 0x0200                            6
   1500 EB           ex de, hl                                2
   1501 55           sub hl, de                               2
   1502 3006         jr nc, .dwe_ok                           5
   1504 09           add hl, bc                               2
   1505 4C           test hl                                  2
   1506 CA5F15       jp z, .dwe_end                           7
   1509 91           ld bc, hl                                2
[DKCORE.LIB(2528:1)]: .dwe_ok:
   150a 110800       ld de, 0x0008                            6
   150d 210200       ld hl, 0x0002                            6
   1510 39           add hl, sp                               2
   1511 19           add hl, de                               2
   1512 ED7C         ex jk', hl                               4
   1514 9F           ld hl, lxpc                              2
   1515 E5           push hl                                  10
   1516 ED7C         ex jk', hl                               4
   1518 E5           push hl                                  10
   1519 C5           push bc                                  10
   151a FD21B1B3     ld iy, 0xB3B1                            8
   151e FDE400       ld hl, (iy + 0)                          11
   1521 ED5B82B2     ld de, (0xB282)                          13
   1525 19           add hl, de                               2
   1526 EB           ex de, hl                                2
   1527 FDE402       ld hl, (iy + 2)                          11
   152a 010000       ld bc, 0x0000                            6
   152d ED4A         adc hl, bc                               4
   152f 7F44         ld b, h                                  4
   1531 7F4D         ld c, l                                  4
   1533 D5           push de                                  10
   1534 DDE1         pop ix                                   9
   1536 E5           push hl                                  10
   1537 FDE1         pop iy                                   9
   1539 CD5010       call dkcPhysicalToLogical                12
   153c EB           ex de, hl                                2
   153d B9           ex jk, hl                                2
   153e 97           ld lxpc, hl                              2
   153f C1           pop bc                                   7
   1540 E1           pop hl                                   7
   1541 E5           push hl                                  10
   1542 C5           push bc                                  10
   1543 EDB0         ldir                                     6+7i
   1545 C1           pop bc                                   7
   1546 2A82B2       ld hl, (0xB282)                          11
   1549 09           add hl, bc                               2
   154a 2282B2       ld (0xB282), hl                          13
   154d DDE5         push ix                                  12
   154f E1           pop hl                                   7
   1550 FDE5         push iy                                  12
   1552 C1           pop bc                                   7
   1553 DDE1         pop ix                                   9
   1555 F400         ld (ix + 0), hl                          11
   1557 7F60         ld h, b                                  4
   1559 7F69         ld l, c                                  4
   155b F402         ld (ix + 2), hl                          11
   155d E1           pop hl                                   7
   155e 97           ld lxpc, hl                              2
[DKCORE.LIB(2583:1)]: .dwe_end:
[DKCORE.LIB(2586:1)]: #endasm
[DKCORE.LIB(2589:2)]: dkWatchExpression = WatchExpression; // WatchExpression.Value already updated
   155f 211EB3       ld hl, 0xB31E                            6
   1562 B1           ld de, hl                                2
   1563 210200       ld hl, 0x0002                            6
   1566 39           add hl, sp                               2
   1567 D5           push de                                  10
   1568 010C00       ld bc, 0x000C                            6
   156b EDB0         ldir                                     6+7i
   156d E1           pop hl                                   7
[DKCORE.LIB(2590:1)]: }
[DKCORE.LIB(2590:1)]: }
   156e C9           ret                                      8
[DKCOMMON.LIB(230:1)]: #asm __root
[DKCOMMON.LIB(231:1)]: dkStartup::
   156f CD7615       call dkInitDebugKernel                   12
   1572 ED46         ipset 0                                  4
   1574 EF           rst 0x28                                 10
   1575 C9           ret                                      8
[DKCOMMON.LIB(244:1)]: #endasm
[DKCOMMON.LIB(74:1)]: #asm __root
[DKCOMMON.LIB(75:1)]: dkInitDebugKernel::
   1576 21B601       ld hl, 0x01B6                            6
   1579 22F4B4       ld (0xB4F4), hl                          13
   157c 214417       ld hl, 0x1744                            6
   157f 2274B4       ld (0xB474), hl                          13
   1582 BF           clr hl                                   2
   1583 2252B3       ld (0xB352), hl                          13
   1586 2250B3       ld (0xB350), hl                          13
   1589 22D4B0       ld (0xB0D4), hl                          13
   158c 22D0B0       ld (0xB0D0), hl                          13
   158f AF           xor a                                    2
   1590 32FDB6       ld (0xB6FD), a                           10
   1593 32FCB6       ld (0xB6FC), a                           10
   1596 32FBB6       ld (0xB6FB), a                           10
   1599 32FAB6       ld (0xB6FA), a                           10
   159c 32F9B6       ld (0xB6F9), a                           10
   159f 32F8B6       ld (0xB6F8), a                           10
   15a2 32ADB3       ld (0xB3AD), a                           10
   15a5 324FB3       ld (0xB34F), a                           10
   15a8 32AEB3       ld (0xB3AE), a                           10
   15ab 32B0B3       ld (0xB3B0), a                           10
   15ae 324AB3       ld (0xB34A), a                           10
   15b1 2248B3       ld (0xB348), hl                          13
   15b4 32ACB3       ld (0xB3AC), a                           10
   15b7 32AFB3       ld (0xB3AF), a                           10
   15ba 22D6B0       ld (0xB0D6), hl                          13
   15bd 22D2B0       ld (0xB0D2), hl                          13
   15c0 AF           xor a                                    2
   15c1 D3320803     ioi ld (0x0308), a                       11
   15c5 D3320903     ioi ld (0x0309), a                       11
   15c9 D3320A03     ioi ld (0x030A), a                       11
   15cd AF           xor a                                    2
   15ce 32D8B0       ld (0xB0D8), a                           10
   15d1 3E01         ld a, 0x01                               4
   15d3 32DAB0       ld (0xB0DA), a                           10
   15d6 3AF3B4       ld a, (0xB4F3)                           9
   15d9 E608         and 0x08                                 4
   15db CA1C16       jp z, __dk_runmode                       7
   15de 3EC3         ld a, 0xC3                               4
   15e0 3230B8       ld (0xB830), a                           10
   15e3 21F61D       ld hl, 0x1DF6                            6
   15e6 2231B8       ld (0xB831), hl                          13
   15e9 3240BA       ld (0xBA40), a                           10
   15ec 21461D       ld hl, 0x1D46                            6
   15ef 2241BA       ld (0xBA41), hl                          13
   15f2 3250B8       ld (0xB850), a                           10
   15f5 21E81F       ld hl, 0x1FE8                            6
   15f8 2251B8       ld (0xB851), hl                          13
   15fb 3240B8       ld (0xB840), a                           10
   15fe 21D21E       ld hl, 0x1ED2                            6
   1601 2241B8       ld (0xB841), hl                          13
   1604 CFF9E201     lcall dkEnableRST28                      19
   1608 3EC3         ld a, 0xC3                               4
   160a 324DB3       ld (0xB34D), a                           10
   160d 324EB3       ld (0xB34E), a                           10
   1610 21F8BF       ld hl, 0xBFF8                            6
   1613 22AAB3       ld (0xB3AA), hl                          13
   1616 218C19       ld hl, 0x198C                            6
   1619 2234B4       ld (0xB434), hl                          13
[DKCOMMON.LIB(189:1)]: __dk_runmode:
   161c C9           ret                                      8
[DKCOMMON.LIB(191:1)]: #endasm
[DKCOMMON.LIB(197:1)]: #asm __nodebug
[DKCOMMON.LIB(218:1)]: _LongOperators_::      ; dummy tag to satisfy header reference
[DKCOMMON.LIB(219:1)]: _FloatOperators_::     ; dummy tag to satisfy header reference
[DKCOMMON.LIB(220:1)]: #endasm
[MUTIL.LIB(351:1)]: #asm __nodebug
[MUTIL.LIB(352:1)]: G_asr::  ; almost the same as L.asr, except sign is not preserved
   161d FDE1         pop iy                                   9
   161f A41F         ld jkhl, 31                              4
   1621 ED58         cp jkhl, bcde                            4
   1623 DAF116       jp c, _ZGLExit                           7
   1626 7B           ld a, e                                  2
   1627 DDF1         pop bcde                                 13
   1629 1F           rra                                      2
   162a 3002         jr nc, 0x162E                            5
   162c DDB8         srl 1, bcde                              4
   162e 1F           rra                                      2
   162f 3002         jr nc, 0x1633                            5
   1631 DDB9         srl 2, bcde                              4
   1633 1F           rra                                      2
   1634 3002         jr nc, 0x1638                            5
   1636 DDBB         srl 4, bcde                              4
   1638 1F           rra                                      2
   1639 3004         jr nc, 0x163F                            5
   163b DD5F         rrc 8, bcde                              4
   163d 0600         ld b, 0x00                               4
   163f 1F           rra                                      2
   1640 3003         jr nc, 0x1645                            5
   1642 BF           clr hl                                   2
   1643 B3           ex bc, hl                                2
   1644 EB           ex de, hl                                2
   1645 FDE9         jp (iy)                                  6
[MUTIL.LIB(380:1)]: #endasm
[MUTIL.LIB(135:1)]: #asm
[MUTIL.LIB(147:1)]: G_div_ep2::			; This entry point for when bcde=numerator, bcde'=denominator.  Called from signed division.
   1647 FDE1         pop iy                                   9
   1649 180A         jr .ep2                                  5
[MUTIL.LIB(150:1)]: G_div::
   164b DD5C         test bcde                                4
   164d CA4419       jp z, div0long                           7
   1650 FDE1         pop iy                                   9
   1652 D9           exx                                      2
   1653 DDF1         pop bcde                                 13
[MUTIL.LIB(156:1)]: .ep2:
   1655 DD6F         rlb a, bcde                              4
   1657 D9           exx                                      2
   1658 A400         ld jkhl, 0                               4
   165a CD2021       call dloop8                              12
   165d D9           exx                                      2
   165e DD6F         rlb a, bcde                              4
   1660 D9           exx                                      2
   1661 CD2021       call dloop8                              12
   1664 D9           exx                                      2
   1665 DD6F         rlb a, bcde                              4
   1667 D9           exx                                      2
   1668 CD2021       call dloop8                              12
   166b D9           exx                                      2
   166c DD6F         rlb a, bcde                              4
   166e D9           exx                                      2
   166f CD2021       call dloop8                              12
   1672 E5           push hl                                  10
   1673 B9           ex jk, hl                                2
   1674 D9           exx                                      2
   1675 E1           pop hl                                   7
   1676 DD6F         rlb a, bcde                              4
   1678 FDE9         jp (iy)                                  6
[MUTIL.LIB(179:1)]: #endasm
[MUTIL.LIB(49:1)]: #asm
[MUTIL.LIB(57:1)]: G_mod::
   167a CD9721       call mod0                                12
   167d FDE1         pop iy                                   9
   167f E1           pop hl                                   7
   1680 D9           exx                                      2
   1681 E1           pop hl                                   7
   1682 FDE5         push iy                                  12
   1684 E5           push hl                                  10
   1685 D9           exx                                      2
   1686 E5           push hl                                  10
   1687 CD4B16       call G_div                               12
   168a B1           ld de, hl                                2
   168b D9           exx                                      2
   168c E5           push hl                                  10
   168d D9           exx                                      2
   168e C1           pop bc                                   7
   168f C9           ret                                      8
[MUTIL.LIB(74:1)]: #endasm
[MUTIL.LIB(388:1)]: #asm __nodebug
[MUTIL.LIB(389:1)]: G_asl::  ; shift left
[MUTIL.LIB(390:1)]: L_asl::
   1690 FDE1         pop iy                                   9
   1692 A41F         ld jkhl, 31                              4
   1694 ED58         cp jkhl, bcde                            4
   1696 DAF116       jp c, _ZGLExit                           7
   1699 7B           ld a, e                                  2
   169a DDF1         pop bcde                                 13
   169c 1F           rra                                      2
   169d 3002         jr nc, 0x16A1                            5
   169f DD88         sla 1, bcde                              4
   16a1 1F           rra                                      2
   16a2 3002         jr nc, 0x16A6                            5
   16a4 DD89         sla 2, bcde                              4
   16a6 1F           rra                                      2
   16a7 3002         jr nc, 0x16AB                            5
   16a9 DD8B         sla 4, bcde                              4
   16ab 1F           rra                                      2
   16ac 3004         jr nc, 0x16B2                            5
   16ae DD4F         rlc 8, bcde                              4
   16b0 1E00         ld e, 0x00                               4
   16b2 1F           rra                                      2
   16b3 3003         jr nc, 0x16B8                            5
   16b5 BF           clr hl                                   2
   16b6 EB           ex de, hl                                2
   16b7 B3           ex bc, hl                                2
   16b8 FDE9         jp (iy)                                  6
[MUTIL.LIB(418:1)]: #endasm
[MUTIL.LIB(302:1)]: #asm
[MUTIL.LIB(304:1)]: L_asr::
   16ba FDE1         pop iy                                   9
   16bc A41F         ld jkhl, 31                              4
   16be ED58         cp jkhl, bcde                            4
   16c0 3824         jr c, .L.rmax                            5
   16c2 7B           ld a, e                                  2
   16c3 DDF1         pop bcde                                 13
   16c5 62           rl bc                                    2
   16c6 ED62         sbc hl, hl                               4
   16c8 63           rr bc                                    2
   16c9 1F           rra                                      2
   16ca 3002         jr nc, 0x16CE                            5
   16cc DD98         sra 1, bcde                              4
   16ce 1F           rra                                      2
   16cf 3002         jr nc, 0x16D3                            5
   16d1 DD99         sra 2, bcde                              4
   16d3 1F           rra                                      2
   16d4 3002         jr nc, 0x16D8                            5
   16d6 DD9B         sra 4, bcde                              4
   16d8 1F           rra                                      2
   16d9 3004         jr nc, 0x16DF                            5
   16db DD5F         rrc 8, bcde                              4
   16dd 7F44         ld b, h                                  4
   16df 1F           rra                                      2
   16e0 3002         jr nc, 0x16E4                            5
   16e2 B3           ex bc, hl                                2
   16e3 EB           ex de, hl                                2
   16e4 FDE9         jp (iy)                                  6
[MUTIL.LIB(335:1)]: .L.rmax:
   16e6 E1           pop hl                                   7
   16e7 E1           pop hl                                   7
   16e8 7C           ld a, h                                  2
   16e9 B7           or a                                     2
   16ea F2F316       jp p, G_rmax                             7
[MUTIL.LIB(341:1)]: .L.r1:
   16ed A3FF         ld bcde, -1                              4
   16ef FDE9         jp (iy)                                  6
[MUTIL.LIB(345:1)]: #endasm
[MUTIL.LIB(435:1)]: #asm __nodebug
[MUTIL.LIB(436:1)]: _ZGLExit::
   16f1 E1           pop hl                                   7
   16f2 E1           pop hl                                   7
[MUTIL.LIB(439:1)]: G_rmax::
   16f3 A300         ld bcde, 0                               4
   16f5 FDE9         jp (iy)                                  6
[MUTIL.LIB(442:1)]: #endasm
[MUTIL.LIB(79:1)]: #asm
[MUTIL.LIB(90:1)]: L_div::
   16f7 DD5C         test bcde                                4
   16f9 CA4419       jp z, div0long                           7
   16fc 76DDEE02     altd ld bcde, (sp + 0x02)                17
   1700 78           ld a, b                                  2
   1701 E680         and 0x80                                 4
   1703 766F         altd ld l, a                             4
   1705 2802         jr z, .l_div1                            5
   1707 DD4D         neg bcde                                 4
[MUTIL.LIB(100:1)]: .l_div1:
   1709 D9           exx                                      2
   170a 78           ld a, b                                  2
   170b CB2F         sra a                                    4
   170d 7FAD         xor l                                    4
   170f CB78         bit 7, b                                 4
   1711 2802         jr z, .l_div2                            5
   1713 DD4D         neg bcde                                 4
[MUTIL.LIB(108:1)]: .l_div2:
   1715 CD4716       call G_div_ep2                           12
   1718 17           rla                                      2
   1719 3002         jr nc, .l_div3                           5
   171b DD4D         neg bcde                                 4
[MUTIL.LIB(114:1)]: .l_div3:
   171d 17           rla                                      2
   171e 3008         jr nc, .l_div4                           5
   1720 E3           ex de', hl                               2
   1721 D9           exx                                      2
   1722 91           ld bc, hl                                2
   1723 DD4D         neg bcde                                 4
   1725 81           ld hl, bc                                2
   1726 D9           exx                                      2
   1727 E3           ex de', hl                               2
[MUTIL.LIB(125:1)]: .l_div4:
   1728 FDE1         pop iy                                   9
   172a 2704         add sp, 4                                4
   172c FDE9         jp (iy)                                  6
[MUTIL.LIB(129:1)]: #endasm
[MUTIL.LIB(14:1)]: #asm __nodebug
[MUTIL.LIB(26:1)]: L_mod::
   172e CD9721       call mod0                                12
   1731 FDE1         pop iy                                   9
   1733 E1           pop hl                                   7
   1734 D9           exx                                      2
   1735 E1           pop hl                                   7
   1736 FDE5         push iy                                  12
   1738 E5           push hl                                  10
   1739 D9           exx                                      2
   173a E5           push hl                                  10
   173b CDF716       call L_div                               12
   173e B1           ld de, hl                                2
   173f D9           exx                                      2
   1740 E5           push hl                                  10
   1741 D9           exx                                      2
   1742 C1           pop bc                                   7
   1743 C9           ret                                      8
[MUTIL.LIB(44:1)]: #endasm
[DKCOMMON.LIB(11:1)]: #asm
[DKCOMMON.LIB(12:1)]: _dkxexit::
   1744 F5           push af                                  10
   1745 3AB0B3       ld a, (0xB3B0)                           9
   1748 CB7F         bit 7, a                                 4
   174a 2802         jr z, .notinwatch                        5
   174c F1           pop af                                   7
   174d C9           ret                                      8
[DKCOMMON.LIB(22:1)]: .notinwatch:
   174e E5           push hl                                  10
   174f D9           exx                                      2
   1750 E5           push hl                                  10
   1751 D9           exx                                      2
   1752 AF           xor a                                    2
   1753 D3329800     ioi ld (0x0098), a                       11
   1757 D3329900     ioi ld (0x0099), a                       11
   175b D332D400     ioi ld (0x00D4), a                       11
   175f 3AAFB3       ld a, (0xB3AF)                           9
   1762 CBE7         set 4, a                                 4
   1764 CBEF         set 5, a                                 4
   1766 32AFB3       ld (0xB3AF), a                           10
   1769 3AB0B3       ld a, (0xB3B0)                           9
   176c CB97         res 2, a                                 4
   176e CBEF         set 5, a                                 4
   1770 CBC7         set 0, a                                 4
   1772 32B0B3       ld (0xB3B0), a                           10
   1775 3E05         ld a, 0x05                               4
   1777 32ADB3       ld (0xB3AD), a                           10
   177a 3AF3B4       ld a, (0xB4F3)                           9
   177d E608         and 0x08                                 4
   177f 2804         jr z, _xexit_skiprst20enable             5
   1781 CF08E301     lcall dkEnableRST20                      19
[DKCOMMON.LIB(50:1)]: _xexit_skiprst20enable:
   1785 D9           exx                                      2
   1786 E1           pop hl                                   7
   1787 D9           exx                                      2
   1788 E1           pop hl                                   7
   1789 F1           pop af                                   7
   178a 2704         add sp, 4                                4
   178c E7           rst 0x20                                 10
[DKCOMMON.LIB(59:1)]: __xexit__::
   178d ED5E         ipset 3                                  4
   178f 3E00         ld a, 0x00                               4
   1791 D3320900     ioi ld (0x0009), a                       11
   1795 D3329800     ioi ld (0x0098), a                       11
   1799 D3329900     ioi ld (0x0099), a                       11
[DKCOMMON.LIB(66:1)]: _xexitLoop:
   179d 18FE         jr _xexitLoop                            5
[DKCOMMON.LIB(68:1)]: #endasm
[UTIL.LIB(919:1)]: #asm __nodebug
[UTIL.LIB(920:1)]: c_asl::
   179f 7D           ld a, l                                  2
   17a0 EB           ex de, hl                                2
   17a1 1F           rra                                      2
   17a2 3003         jr nc, .utl_asl2                         5
   17a4 29           add hl, hl                               2
   17a5 B7           or a                                     2
   17a6 C8           ret z                                    2/8
[UTIL.LIB(928:1)]: .utl_asl2:
   17a7 1F           rra                                      2
   17a8 3004         jr nc, .utl_asl3                         5
   17aa 29           add hl, hl                               2
   17ab 29           add hl, hl                               2
   17ac B7           or a                                     2
   17ad C8           ret z                                    2/8
[UTIL.LIB(935:1)]: .utl_asl3:
   17ae 1F           rra                                      2
   17af 3004         jr nc, .utl_asl4                         5
   17b1 29           add hl, hl                               2
   17b2 29           add hl, hl                               2
   17b3 29           add hl, hl                               2
   17b4 29           add hl, hl                               2
[UTIL.LIB(942:1)]: .utl_asl4:
   17b5 1F           rra                                      2
   17b6 D0           ret nc                                   2/8
   17b7 7F65         ld h, l                                  4
   17b9 2E00         ld l, 0x00                               4
   17bb C9           ret                                      8
[UTIL.LIB(948:1)]: #endasm
[MUTIL.LIB(617:1)]: #asm
[MUTIL.LIB(626:1)]: c_divt::
   17bc CB7C         bit 7, h                                 4
   17be 7F4C         ld c, h                                  4
   17c0 2801         jr z, .DT2                               5
   17c2 4D           neg hl                                   2
[MUTIL.LIB(631:1)]: .DT2: rra          	; check for divide by 2
   17c3 1F           rra                                      2
   17c4 3002         jr nc, .DT3                              5
   17c6 B7           or a                                     2
   17c7 FC           rr hl                                    2
[MUTIL.LIB(635:1)]: .DT3: rra      		; check for divide by 4
   17c8 1F           rra                                      2
   17c9 3004         jr nc, .DT4                              5
   17cb B7           or a                                     2
   17cc FC           rr hl                                    2
   17cd B7           or a                                     2
   17ce FC           rr hl                                    2
[MUTIL.LIB(641:1)]: .DT4: rra				; check for divide by 16
   17cf 1F           rra                                      2
   17d0 3008         jr nc, .DT5                              5
   17d2 B7           or a                                     2
   17d3 FC           rr hl                                    2
   17d4 B7           or a                                     2
   17d5 FC           rr hl                                    2
   17d6 B7           or a                                     2
   17d7 FC           rr hl                                    2
   17d8 B7           or a                                     2
   17d9 FC           rr hl                                    2
[MUTIL.LIB(651:1)]: .DT5: rra        ; check for divide by 256
   17da 1F           rra                                      2
   17db 3004         jr nc, .DT6                              5
   17dd 7F6C         ld l, h                                  4
   17df 2600         ld h, 0x00                               4
[MUTIL.LIB(655:1)]: .DT6: ld a, c    ; check for sign again
   17e1 79           ld a, c                                  2
   17e2 7FA8         xor b                                    4
   17e4 F0           ret p                                    2/8
   17e5 4D           neg hl                                   2
   17e6 C9           ret                                      8
[MUTIL.LIB(664:1)]: #endasm
[MUTIL.LIB(585:1)]: #asm __root
[MUTIL.LIB(595:1)]: c_modt::
   17e7 CB7C         bit 7, h                                 4
   17e9 2002         jr nz, .negative                         5
[MUTIL.LIB(599:1)]: .positive:						; result is (HL & DE)
   17eb DC           and hl, de                               2
   17ec C9           ret                                      8
[MUTIL.LIB(603:1)]: .negative:						; result is (HL & DE) ? ((HL & DE) | ~DE) : 0
   17ed DC           and hl, de                               2
   17ee C8           ret z                                    2/8
   17ef EB           ex de, hl                                2
   17f0 4D           neg hl                                   2
   17f1 2B           dec hl                                   2
   17f2 EC           or hl, de                                2
   17f3 C9           ret                                      8
[MUTIL.LIB(612:1)]: #endasm
[MUTIL.LIB(480:1)]: #asm __nodebug
[MUTIL.LIB(490:1)]: c_udv::
   17f4 4C           test hl                                  2
   17f5 CA3819       jp z, div0                               7
   17f8 AF           xor a                                    2
   17f9 F5           push af                                  10
   17fa E3           ex de', hl                               2
   17fb D9           exx                                      2
   17fc C31518       jp .c_udv_entry                          7
[MUTIL.LIB(509:1)]: c_div::
   17ff 4C           test hl                                  2
   1800 CA3819       jp z, div0                               7
   1803 7A           ld a, d                                  2
   1804 7FAC         xor h                                    4
   1806 17           rla                                      2
   1807 7A           ld a, d                                  2
   1808 F5           push af                                  10
   1809 E3           ex de', hl                               2
   180a 17           rla                                      2
   180b 3003         jr nc, .no_c_neg1                        5
   180d BF           clr hl                                   2
   180e 55           sub hl, de                               2
   180f EB           ex de, hl                                2
[MUTIL.LIB(523:1)]: .no_c_neg1:
   1810 D9           exx                                      2
   1811 CB7A         bit 7, d                                 4
   1813 2003         jr nz, .no_c_neg2                        5
[MUTIL.LIB(527:1)]: .c_udv_entry:
   1815 BF           clr hl                                   2
   1816 55           sub hl, de                               2
   1817 EB           ex de, hl                                2
[MUTIL.LIB(531:1)]: .no_c_neg2:
   1818 ED41         ld bc', de                               4
   181a D9           exx                                      2
   181b BF           clr hl                                   2
   181c 78           ld a, b                                  2
   181d 3C           inc a                                    2
   181e 2007         jr nz, .DV3                              5
   1820 7A           ld a, d                                  2
   1821 7F81         add c                                    4
   1823 3E10         ld a, 0x10                               4
   1825 3808         jr c, .DV1                               5
[MUTIL.LIB(542:1)]: .DV3:
   1827 7F6A         ld l, d                                  4
   1829 7F53         ld d, e                                  4
   182b 7F5C         ld e, h                                  4
   182d 3E08         ld a, 0x08                               4
[MUTIL.LIB(547:1)]: .DV1:
   182f 29           add hl, hl                               2
   1830 EB           ex de, hl                                2
   1831 29           add hl, hl                               2
   1832 EB           ex de, hl                                2
   1833 3001         jr nc, .DV4                              5
   1835 23           inc hl                                   2
[MUTIL.LIB(554:1)]: .DV4:
   1836 E5           push hl                                  10
   1837 09           add hl, bc                               2
   1838 E1           pop hl                                   7
   1839 3002         jr nc, .DV5                              5
   183b 09           add hl, bc                               2
   183c 13           inc de                                   2
[MUTIL.LIB(561:1)]: .DV5:
   183d 3D           dec a                                    2
   183e 20EF         jr nz, .DV1                              5
   1840 E3           ex de', hl                               2
   1841 F1           pop af                                   7
   1842 3003         jr nc, .DV6                              5
   1844 BF           clr hl                                   2
   1845 55           sub hl, de                               2
   1846 EB           ex de, hl                                2
[MUTIL.LIB(570:1)]: .DV6:
   1847 D9           exx                                      2
   1848 17           rla                                      2
   1849 3003         jr nc, .DV7                              5
   184b BF           clr hl                                   2
   184c 55           sub hl, de                               2
   184d EB           ex de, hl                                2
[MUTIL.LIB(577:1)]: .DV7:
   184e E3           ex de', hl                               2
   184f C9           ret                                      8
[MUTIL.LIB(580:1)]: #endasm
[UTIL.LIB(838:1)]: #asm __nodebug
[UTIL.LIB(839:1)]: c_asr::
   1850 CB7A         bit 7, d                                 4
   1852 2824         jr z, c_usr                              5
   1854 7D           ld a, l                                  2
   1855 EB           ex de, hl                                2
   1856 1F           rra                                      2
   1857 3004         jr nc, .utl_asr2                         5
   1859 37           scf                                      2
   185a FC           rr hl                                    2
   185b B7           or a                                     2
   185c C8           ret z                                    2/8
[UTIL.LIB(850:1)]: .utl_asr2:
   185d 1F           rra                                      2
   185e 3006         jr nc, .utl_asr3                         5
   1860 37           scf                                      2
   1861 FC           rr hl                                    2
   1862 37           scf                                      2
   1863 FC           rr hl                                    2
   1864 B7           or a                                     2
   1865 C8           ret z                                    2/8
[UTIL.LIB(859:1)]: .utl_asr3:
   1866 1F           rra                                      2
   1867 3008         jr nc, .utl_asr4                         5
   1869 FC           rr hl                                    2
   186a FC           rr hl                                    2
   186b FC           rr hl                                    2
   186c FC           rr hl                                    2
   186d 1100F0       ld de, 0xF000                            6
   1870 EC           or hl, de                                2
[UTIL.LIB(868:1)]: .utl_asr4:
   1871 1F           rra                                      2
   1872 D0           ret nc                                   2/8
   1873 7F6C         ld l, h                                  4
   1875 26FF         ld h, 0xFF                               4
   1877 C9           ret                                      8
[UTIL.LIB(874:1)]: c_usr::
   1878 7D           ld a, l                                  2
   1879 EB           ex de, hl                                2
   187a 1F           rra                                      2
   187b 3004         jr nc, .utl_usr2                         5
   187d B7           or a                                     2
   187e FC           rr hl                                    2
   187f B7           or a                                     2
   1880 C8           ret z                                    2/8
[UTIL.LIB(883:1)]: .utl_usr2:
   1881 1F           rra                                      2
   1882 3006         jr nc, .utl_usr3                         5
   1884 B7           or a                                     2
   1885 FC           rr hl                                    2
   1886 B7           or a                                     2
   1887 FC           rr hl                                    2
   1888 B7           or a                                     2
   1889 C8           ret z                                    2/8
[UTIL.LIB(892:1)]: .utl_usr3:
   188a 1F           rra                                      2
   188b 3008         jr nc, .utl_usr4                         5
   188d FC           rr hl                                    2
   188e FC           rr hl                                    2
   188f FC           rr hl                                    2
   1890 FC           rr hl                                    2
   1891 11FF0F       ld de, 0x0FFF                            6
   1894 DC           and hl, de                               2
[UTIL.LIB(901:1)]: .utl_usr4:
   1895 1F           rra                                      2
   1896 D0           ret nc                                   2/8
   1897 7F6C         ld l, h                                  4
   1899 2600         ld h, 0x00                               4
   189b C9           ret                                      8
[UTIL.LIB(908:1)]: #endasm
[UTIL.LIB(612:1)]: #asm __nodebug
[UTIL.LIB(614:1)]: flt_0::
   189c FDE1         pop iy                                   9
   189e 78           ld a, b                                  2
   189f CB11         rl c                                     4
   18a1 17           rla                                      2
   18a2 B7           or a                                     2
   18a3 C2EB18       jp nz, .tru                              7
   18a6 C3F218       jp .fals                                 7
[UTIL.LIB(622:1)]: cf_ge::
   18a9 FDE1         pop iy                                   9
   18ab E1           pop hl                                   7
   18ac B7           or a                                     2
   18ad ED52         sbc hl, de                               4
   18af EB           ex de, hl                                2
   18b0 E1           pop hl                                   7
   18b1 7C           ld a, h                                  2
   18b2 ED42         sbc hl, bc                               4
   18b4 4F           ld c, a                                  2
   18b5 2015         jr nz, .cfgt1                            5
   18b7 08           ex af, af'                               2
   18b8 7A           ld a, d                                  2
   18b9 7FB3         or e                                     4
   18bb CAEB18       jp z, .tru                               7
   18be 180D         jr .cfgt1a                               5
[UTIL.LIB(639:1)]: cf_gt::
   18c0 FDE1         pop iy                                   9
   18c2 E1           pop hl                                   7
   18c3 B7           or a                                     2
   18c4 ED52         sbc hl, de                               4
   18c6 EB           ex de, hl                                2
   18c7 E1           pop hl                                   7
   18c8 7C           ld a, h                                  2
   18c9 ED42         sbc hl, bc                               4
   18cb 4F           ld c, a                                  2
[UTIL.LIB(650:1)]: .cfgt1:
   18cc 08           ex af, af'                               2
[UTIL.LIB(652:1)]: .cfgt1a:
   18cd 78           ld a, b                                  2
   18ce 7FB1         or c                                     4
   18d0 FAE418       jp m, .cfgt2                             7
   18d3 08           ex af, af'                               2
   18d4 DAF218       jp c, .fals                              7
   18d7 7C           ld a, h                                  2
   18d8 7FB5         or l                                     4
   18da 7FB2         or d                                     4
   18dc 7FB3         or e                                     4
   18de CAF218       jp z, .fals                              7
   18e1 C3EB18       jp .tru                                  7
[UTIL.LIB(664:1)]: .cfgt2:
   18e4 08           ex af, af'                               2
   18e5 DAEB18       jp c, .tru                               7
   18e8 C3F218       jp .fals                                 7
[UTIL.LIB(668:1)]: .tru:
   18eb 210100       ld hl, 0x0001                            6
   18ee 7FB5         or l                                     4
   18f0 FDE9         jp (iy)                                  6
[UTIL.LIB(672:1)]: .fals:
   18f2 BF           clr hl                                   2
   18f3 7FA5         and l                                    4
   18f5 FDE9         jp (iy)                                  6
[UTIL.LIB(676:1)]: cf_le::
   18f7 FDE1         pop iy                                   9
   18f9 E1           pop hl                                   7
   18fa B7           or a                                     2
   18fb ED52         sbc hl, de                               4
   18fd EB           ex de, hl                                2
   18fe E1           pop hl                                   7
   18ff 7C           ld a, h                                  2
   1900 ED42         sbc hl, bc                               4
   1902 4F           ld c, a                                  2
   1903 2015         jr nz, .cflt1                            5
   1905 08           ex af, af'                               2
   1906 7A           ld a, d                                  2
   1907 7FB3         or e                                     4
   1909 CAEB18       jp z, .tru                               7
   190c 180D         jr .cflt1a                               5
[UTIL.LIB(693:1)]: cf_lt::
   190e FDE1         pop iy                                   9
   1910 E1           pop hl                                   7
   1911 B7           or a                                     2
   1912 ED52         sbc hl, de                               4
   1914 EB           ex de, hl                                2
   1915 E1           pop hl                                   7
   1916 7C           ld a, h                                  2
   1917 ED42         sbc hl, bc                               4
   1919 4F           ld c, a                                  2
[UTIL.LIB(704:1)]: .cflt1:
   191a 08           ex af, af'                               2
[UTIL.LIB(706:1)]: .cflt1a:
   191b 78           ld a, b                                  2
   191c 7FB1         or c                                     4
   191e FA2819       jp m, .cflt2                             7
   1921 08           ex af, af'                               2
   1922 DAEB18       jp c, .tru                               7
   1925 C3F218       jp .fals                                 7
[UTIL.LIB(714:1)]: .cflt2:
   1928 7C           ld a, h                                  2
   1929 7FB5         or l                                     4
   192b 7FB2         or d                                     4
   192d 7FB3         or e                                     4
   192f 28C1         jr z, .fals                              5
   1931 08           ex af, af'                               2
   1932 DAF218       jp c, .fals                              7
   1935 C3EB18       jp .tru                                  7
[UTIL.LIB(723:1)]: #endasm
[MUTIL.LIB(448:1)]: #asm __nodebug
[MUTIL.LIB(449:1)]: div0::
   1938 2134FD       ld hl, 0xFD34                            6
   193b E5           push hl                                  10
   193c CD7321       call exception                           12
   193f 2702         add sp, 2                                4
   1941 CDB601       call _xexit                              12
[MUTIL.LIB(456:1)]: #endasm
[MUTIL.LIB(462:1)]: #asm __nodebug
[MUTIL.LIB(463:1)]: div0long::
   1944 2137FD       ld hl, 0xFD37                            6
   1947 E5           push hl                                  10
   1948 CD7321       call exception                           12
   194b 2702         add sp, 2                                4
   194d CDB601       call _xexit                              12
[MUTIL.LIB(470:1)]: #endasm
*** Constant Data ***
   1950  00 00 25 1B 5A 1B 76 1B 16 1D 00 00 55 1B 4B 1B	  % Z v     U K 
   1960  50 1B CF 1B E9 1B FE 1B 03 1C 25 1C 3E 1C A5 1B	P         % >   
   1970  AE 1B 7B 1B 2A 1C 00 00 00 00 1B 21 80 1B 54 1C	  { *      !  T 
   1980  9C 1B 67 1C 00 00 00 00 00 00 00 00               g         
*** End Constant Data ***
[DKAPP.LIB(793:1)]: #asm __nodebug
[DKAPP.LIB(798:1)]: dkCallback::
   198c C402         ld hl, (sp + 0x02)                       9
   198e 29           add hl, hl                               2
   198f EB           ex de, hl                                2
   1990 215019       ld hl, 0x1950                            6
   1993 19           add hl, de                               2
   1994 EB           ex de, hl                                2
   1995 218C19       ld hl, 0x198C                            6
   1998 B7           or a                                     2
   1999 ED52         sbc hl, de                               4
   199b 381A         jr c, __dk_cbdone                        5
   199d DD21B719     ld ix, 0x19B7                            8
   19a1 DDE5         push ix                                  12
   19a3 EB           ex de, hl                                2
   19a4 DDE400       ld hl, (hl + 0)                          11
   19a7 E5           push hl                                  10
   19a8 C40A         ld hl, (sp + 0x0A)                       9
   19aa B9           ex jk, hl                                2
   19ab C40C         ld hl, (sp + 0x0C)                       9
   19ad ED7C         ex jk', hl                               4
   19af B9           ex jk, hl                                2
   19b0 97           ld lxpc, hl                              2
   19b1 ED7C         ex jk', hl                               4
   19b3 DD7D         ld ix, hl                                4
   19b5 E1           pop hl                                   7
   19b6 E9           jp (hl)                                  4
[DKAPP.LIB(831:1)]: __dk_cbret:									; after rx, re-queue rx buffer
[DKAPP.LIB(832:1)]: __dk_cbdone:
   19b7 CC           bool hl                                  2
   19b8 7F6C         ld l, h                                  4
   19ba C9           ret                                      8
[DKAPP.LIB(838:1)]: #endasm
[DKCOMMON.LIB(519:1)]: __nodebug __root void dkSetStdioTimer(void)
   19bb 213DB3       ld hl, 0xB33D                            6
   19be DD1A         ld bcde, (hl)                            14
   19c0 A1           ld hl, de                                2
   19c1 116400       ld de, 0x0064                            6
   19c4 19           add hl, de                               2
   19c5 2246B3       ld (0xB346), hl                          13
[DKCOMMON.LIB(522:1)]: }
[DKCOMMON.LIB(522:1)]: }
   19c8 C9           ret                                      8
[DKCOMMON.LIB(524:1)]: __nodebug __root int dkCheckStdioTimeOut(void)
[DKCOMMON.LIB(526:2)]: if ((int)((unsigned)MS_TIMER - dkStdioTimeout) >= 0)
   19c9 213DB3       ld hl, 0xB33D                            6
   19cc DD1A         ld bcde, (hl)                            14
   19ce D5           push de                                  10
   19cf 2A46B3       ld hl, (0xB346)                          11
   19d2 B1           ld de, hl                                2
   19d3 E1           pop hl                                   7
   19d4 55           sub hl, de                               2
   19d5 48FF         cp hl, -1                                4
   19d7 EDA4         flag gt, hl                              4
   19d9 CC           bool hl                                  2
   19da CAE319       jp z, 0x19E3                             7
[DKCOMMON.LIB(527:2)]: {
[DKCOMMON.LIB(528:3)]: dkUnlockStdio();
   19dd CD1B21       call dkUnlockStdio                       12
[DKCOMMON.LIB(529:3)]: return 1;
   19e0 BF           clr hl                                   2
   19e1 23           inc hl                                   2
[DKCOMMON.LIB(529:1)]: return 1;
   19e2 C9           ret                                      8
[DKCOMMON.LIB(530:2)]: }
[DKCOMMON.LIB(531:1)]: return 0;
[DKCOMMON.LIB(531:2)]: return 0;
   19e3 BF           clr hl                                   2
   19e4 C3E219       jp 0x19E2                                7
[DKCOMMON.LIB(534:1)]: __nodebug __root void dkSetGetCharTimer(void)
[DKCOMMON.LIB(536:2)]: dkGetCharTimeout = (unsigned)MS_TIMER + DK_GETCHAR_TIMEOUT;
   19e7 213DB3       ld hl, 0xB33D                            6
   19ea DD1A         ld bcde, (hl)                            14
   19ec A1           ld hl, de                                2
   19ed 11F401       ld de, 0x01F4                            6
   19f0 19           add hl, de                               2
   19f1 2244B3       ld (0xB344), hl                          13
[DKCOMMON.LIB(537:1)]: }
[DKCOMMON.LIB(537:1)]: }
   19f4 C9           ret                                      8
[DKCOMMON.LIB(539:1)]: __nodebug __root void dkCheckGetCharTimeOut(void)
[DKCOMMON.LIB(541:2)]: if ((int)((unsigned)MS_TIMER - dkGetCharTimeout) >= 0)
   19f5 213DB3       ld hl, 0xB33D                            6
   19f8 DD1A         ld bcde, (hl)                            14
   19fa D5           push de                                  10
   19fb 2A44B3       ld hl, (0xB344)                          11
   19fe B1           ld de, hl                                2
   19ff E1           pop hl                                   7
   1a00 55           sub hl, de                               2
   1a01 48FF         cp hl, -1                                4
   1a03 EDA4         flag gt, hl                              4
   1a05 CC           bool hl                                  2
   1a06 CA101A       jp z, 0x1A10                             7
[DKCOMMON.LIB(542:2)]: {
[DKCOMMON.LIB(543:1)]: #asm
   1a09 214FB3       ld hl, 0xB34F                            6
   1a0c CB8E         res 1, (hl)                              10
   1a0e CBE6         set 4, (hl)                              10
[DKCOMMON.LIB(547:1)]: #endasm
[DKCOMMON.LIB(548:2)]: }
[DKCOMMON.LIB(549:1)]: }
[DKCOMMON.LIB(549:1)]: }
[DKCOMMON.LIB(549:1)]: }
   1a10 C9           ret                                      8
[STDVDRIVER.LIB(144:1)]: #asm __nodebug __root
[STDVDRIVER.LIB(158:1)]: periodic_isr::
   1a11 F5           push af                                  10
   1a12 ED76         push ip                                  9
   1a14 E5           push hl                                  10
   1a15 9F           ld hl, lxpc                              2
   1a16 E5           push hl                                  10
   1a17 D5           push de                                  10
   1a18 DDE5         push ix                                  12
[STDVDRIVER.LIB(166:1)]: periodic_isr_ep2::					;     Extra entry point for hooking to this ISR
   1a1a D33A0000     ioi ld a, (0x0000)                       11
   1a1e 2130B3       ld hl, 0xB330                            6
   1a21 34           inc (hl)                                 8
   1a22 ED5D         ipres                                    4
   1a24 2142B3       ld hl, 0xB342                            6
   1a27 34           inc (hl)                                 8
   1a28 CB46         bit 0, (hl)                              7
   1a2a 2819         jr z, .DoTimers                          5
   1a2c 3A41B3       ld a, (0xB341)                           9
   1a2f 7F86         add (hl)                                 7
   1a31 77           ld (hl), a                               6
   1a32 AF           xor a                                    2
   1a33 3241B3       ld (0xB341), a                           10
   1a36 3E7E         ld a, 0x7E                               4
   1a38 7FA6         and (hl)                                 7
   1a3a 2007         jr nz, .novwdog                          5
   1a3c CF7BE803     lcall vwdog                              19
   1a40 2142B3       ld hl, 0xB342                            6
[STDVDRIVER.LIB(192:1)]: .novwdog:
   1a43 1852         jr .CheckAllTicksTasks                   5
[STDVDRIVER.LIB(292:1)]: .DoTimers:
   1a45 3A41B3       ld a, (0xB341)                           9
   1a48 7F86         add (hl)                                 7
   1a4a 77           ld (hl), a                               6
   1a4b AF           xor a                                    2
   1a4c 3241B3       ld (0xB341), a                           10
   1a4f 2135B3       ld hl, 0xB335                            6
   1a52 34           inc (hl)                                 8
   1a53 2025         jr nz, .DoneTICK                         5
   1a55 23           inc hl                                   2
   1a56 34           inc (hl)                                 8
   1a57 7E           ld a, (hl)                               5
   1a58 57           ld d, a                                  2
   1a59 E603         and 0x03                                 4
   1a5b 201D         jr nz, .DoneTICK                         5
   1a5d 2139B3       ld hl, 0xB339                            6
   1a60 34           inc (hl)                                 8
   1a61 200A         jr nz, .DoneSec                          5
   1a63 23           inc hl                                   2
   1a64 34           inc (hl)                                 8
   1a65 2006         jr nz, .DoneSec                          5
   1a67 23           inc hl                                   2
   1a68 34           inc (hl)                                 8
   1a69 2002         jr nz, .DoneSec                          5
   1a6b 23           inc hl                                   2
   1a6c 34           inc (hl)                                 8
[STDVDRIVER.LIB(328:1)]: .DoneSec:
   1a6d AF           xor a                                    2
   1a6e 7FB2         or d                                     4
   1a70 2008         jr nz, .DoneTICK                         5
   1a72 2137B3       ld hl, 0xB337                            6
   1a75 34           inc (hl)                                 8
   1a76 2002         jr nz, .DoneTICK                         5
   1a78 23           inc hl                                   2
   1a79 34           inc (hl)                                 8
[STDVDRIVER.LIB(339:1)]: .DoneTICK:
   1a7a 3A43B3       ld a, (0xB343)                           9
   1a7d C6FA         add 0xFA                                 4
   1a7f 3243B3       ld (0xB343), a                           10
   1a82 3010         jr nc, .DoneTimers                       5
   1a84 213DB3       ld hl, 0xB33D                            6
   1a87 34           inc (hl)                                 8
   1a88 200A         jr nz, .DoneTimers                       5
   1a8a 23           inc hl                                   2
   1a8b 34           inc (hl)                                 8
   1a8c 2006         jr nz, .DoneTimers                       5
   1a8e 23           inc hl                                   2
   1a8f 34           inc (hl)                                 8
   1a90 2002         jr nz, .DoneTimers                       5
   1a92 23           inc hl                                   2
   1a93 34           inc (hl)                                 8
[STDVDRIVER.LIB(359:1)]: .DoneTimers:
   1a94 CD111B       call __slice_tick                        12
[STDVDRIVER.LIB(365:1)]: .CheckAllTicksTasks:
   1a97 ED56         ipset 1                                  4
   1a99 2130B3       ld hl, 0xB330                            6
   1a9c 35           dec (hl)                                 8
   1a9d 2046         jr nz, .pisr_done                        5
   1a9f 3A2FB3       ld a, (0xB32F)                           9
   1aa2 B7           or a                                     2
   1aa3 2840         jr z, .pisr_done                         5
   1aa5 B9           ex jk, hl                                2
   1aa6 E5           push hl                                  10
   1aa7 C5           push bc                                  10
   1aa8 EDC5         push pw                                  18
   1aaa EDD5         push px                                  18
   1aac EDE5         push py                                  18
   1aae EDF5         push pz                                  18
   1ab0 08           ex af, af'                               2
   1ab1 F5           push af                                  10
   1ab2 D9           exx                                      2
   1ab3 EDD9         exp                                      4
   1ab5 FDF5         push jkhl                                18
   1ab7 DDF5         push bcde                                18
   1ab9 FDE5         push iy                                  12
   1abb EDC5         push pw                                  18
   1abd EDD5         push px                                  18
   1abf EDE5         push py                                  18
   1ac1 EDF5         push pz                                  18
   1ac3 CFDCEC00     lcall bios_intexit                       19
   1ac7 EDF1         pop pz                                   13
   1ac9 EDE1         pop py                                   13
   1acb EDD1         pop px                                   13
   1acd EDC1         pop pw                                   13
   1acf FDE1         pop iy                                   9
   1ad1 DDF1         pop bcde                                 13
   1ad3 FDF1         pop jkhl                                 13
   1ad5 EDD9         exp                                      4
   1ad7 D9           exx                                      2
   1ad8 F1           pop af                                   7
   1ad9 08           ex af, af'                               2
   1ada EDF1         pop pz                                   13
   1adc EDE1         pop py                                   13
   1ade EDD1         pop px                                   13
   1ae0 EDC1         pop pw                                   13
   1ae2 C1           pop bc                                   7
   1ae3 E1           pop hl                                   7
   1ae4 B9           ex jk, hl                                2
[STDVDRIVER.LIB(434:1)]: .pisr_done:
   1ae5 DDE1         pop ix                                   9
   1ae7 D1           pop de                                   7
   1ae8 E1           pop hl                                   7
   1ae9 97           ld lxpc, hl                              2
   1aea E1           pop hl                                   7
   1aeb ED7E         pop ip                                   7
   1aed F1           pop af                                   7
   1aee ED5D         ipres                                    4
   1af0 C9           ret                                      8
[STDVDRIVER.LIB(472:1)]: _clock_adjust::
   1af1 CC           bool hl                                  2
   1af2 2142B3       ld hl, 0xB342                            6
   1af5 280D         jr z, .retard_clock                      5
   1af7 CB46         bit 0, (hl)                              7
   1af9 CBC6         set 0, (hl)                              10
   1afb EDCC         flag z, hl                               4
   1afd C0           ret nz                                   2/8
   1afe 3E01         ld a, 0x01                               4
   1b00 3241B3       ld (0xB341), a                           10
   1b03 C9           ret                                      8
[STDVDRIVER.LIB(483:1)]: .retard_clock:
   1b04 CB46         bit 0, (hl)                              7
   1b06 CB86         res 0, (hl)                              10
   1b08 EDC4         flag nz, hl                              4
   1b0a C0           ret nz                                   2/8
   1b0b 3E01         ld a, 0x01                               4
   1b0d 3241B3       ld (0xB341), a                           10
   1b10 C9           ret                                      8
[STDVDRIVER.LIB(492:1)]: #endasm
[SLICE.LIB(54:1)]: #asm
[SLICE.LIB(67:1)]: __slice_tick::
   1b11 2A33B3       ld hl, (0xB333)                          11
   1b14 4C           test hl                                  2
   1b15 C8           ret z                                    2/8
   1b16 DD7D         ld ix, hl                                4
   1b18 E400         ld hl, (ix + 0)                          9
   1b1a 2B           dec hl                                   2
   1b1b F400         ld (ix + 0), hl                          11
   1b1d 4C           test hl                                  2
   1b1e C0           ret nz                                   2/8
   1b1f AF           xor a                                    2
   1b20 3C           inc a                                    2
   1b21 322FB3       ld (0xB32F), a                           10
   1b24 C9           ret                                      8
[SLICE.LIB(85:1)]: #endasm
[DKAPP.LIB(93:1)]: #asm __root
[DKAPP.LIB(94:1)]: dkSetSingleStepCommand::
   1b25 110E00       ld de, 0x000E                            6
   1b28 DD19         add ix, de                               4
   1b2a DD7E00       ld a, (ix + 0)                           9
   1b2d 32ACB3       ld (0xB3AC), a                           10
   1b30 3E01         ld a, 0x01                               4
   1b32 32AEB3       ld (0xB3AE), a                           10
   1b35 3E05         ld a, 0x05                               4
   1b37 32ADB3       ld (0xB3AD), a                           10
   1b3a 3AAFB3       ld a, (0xB3AF)                           9
   1b3d CBEF         set 5, a                                 4
   1b3f 32AFB3       ld (0xB3AF), a                           10
   1b42 1E81         ld e, 0x81                               4
   1b44 010000       ld bc, 0x0000                            6
   1b47 CD4620       call dkRespond                           12
   1b4a C9           ret                                      8
[DKAPP.LIB(127:1)]: #endasm
[DKAPP.LIB(171:1)]: #asm __root
[DKAPP.LIB(172:1)]: dkSetRunProgramCommand::
   1b4b CFF4EC00     lcall __dk_setrun                        19
   1b4f C9           ret                                      8
[DKAPP.LIB(175:1)]: #endasm
[DKAPP.LIB(197:1)]: #asm __root
[DKAPP.LIB(198:1)]: dkSetStopProgramCommand::
   1b50 CF1CED00     lcall __dk_setstop                       19
   1b54 C9           ret                                      8
[DKAPP.LIB(201:1)]: #endasm
[DKAPP.LIB(214:1)]: #asm __root
[DKAPP.LIB(215:1)]: dkHandleStartProgram::
   1b55 CF48ED00     lcall __dk_startprogram                  19
   1b59 C9           ret                                      8
[DKAPP.LIB(218:1)]: #endasm
[DKAPP.LIB(220:1)]: #asm __root
[DKAPP.LIB(221:1)]: dkHandleToggleBreakpoint::
   1b5a 110E00       ld de, 0x000E                            6
   1b5d DD19         add ix, de                               4
   1b5f 1156B3       ld de, 0xB356                            6
   1b62 DD7C         ld hl, ix                                4
   1b64 010D00       ld bc, 0x000D                            6
   1b67 EDB0         ldir                                     6+7i
   1b69 CF1DE001     lcall dkToggleBreakpoint                 19
   1b6d 1E82         ld e, 0x82                               4
   1b6f 010000       ld bc, 0x0000                            6
   1b72 CD4620       call dkRespond                           12
   1b75 C9           ret                                      8
[DKAPP.LIB(237:1)]: #endasm
[DKAPP.LIB(257:1)]: #asm __root
[DKAPP.LIB(258:1)]: dkClearAllBreakpoints::
   1b76 CF5AED00     lcall __dk_clearallbps                   19
   1b7a C9           ret                                      8
[DKAPP.LIB(263:1)]: #endasm
[DKAPP.LIB(466:1)]: #asm __root
[DKAPP.LIB(467:1)]: dkHandleRegRead::
   1b7b CF78ED00     lcall __dk_regread                       19
   1b7f C9           ret                                      8
[DKAPP.LIB(471:1)]: dkHandleRegWrite::
   1b80 110E00       ld de, 0x000E                            6
   1b83 DD19         add ix, de                               4
   1b85 216BB3       ld hl, 0xB36B                            6
   1b88 063F         ld b, 0x3F                               4
[DKAPP.LIB(477:1)]: __dk_hrwcopyloop:
   1b8a DD5E00       ld e, (ix + 0)                           9
   1b8d 73           ld (hl), e                               6
   1b8e DD23         inc ix                                   4
   1b90 23           inc hl                                   2
   1b91 10F7         djnz __dk_hrwcopyloop                    5
   1b93 1E96         ld e, 0x96                               4
   1b95 010000       ld bc, 0x0000                            6
   1b98 CD4620       call dkRespond                           12
   1b9b C9           ret                                      8
[DKAPP.LIB(489:1)]: dkHandleNoop::
   1b9c 1E98         ld e, 0x98                               4
   1b9e 010000       ld bc, 0x0000                            6
   1ba1 CD4620       call dkRespond                           12
   1ba4 C9           ret                                      8
[DKAPP.LIB(495:1)]: dkHandleReset::
   1ba5 1E8F         ld e, 0x8F                               4
   1ba7 010000       ld bc, 0x0000                            6
   1baa CD4620       call dkRespond                           12
   1bad C9           ret                                      8
[DKAPP.LIB(543:1)]: dkSetSendFlags::
   1bae 110E00       ld de, 0x000E                            6
   1bb1 DD19         add ix, de                               4
   1bb3 DD7E00       ld a, (ix + 0)                           9
   1bb6 CB57         bit 2, a                                 4
   1bb8 2009         jr nz, __dk_ssfset                       5
   1bba CC           bool hl                                  2
   1bbb 7F6C         ld l, h                                  4
   1bbd 2252B3       ld (0xB352), hl                          13
   1bc0 2250B3       ld (0xB350), hl                          13
[DKAPP.LIB(555:1)]: __dk_ssfset:
   1bc3 32AFB3       ld (0xB3AF), a                           10
   1bc6 1E90         ld e, 0x90                               4
   1bc8 010000       ld bc, 0x0000                            6
   1bcb CD4620       call dkRespond                           12
   1bce C9           ret                                      8
[DKAPP.LIB(562:1)]: dkHandleAddWatch::
   1bcf 110E00       ld de, 0x000E                            6
   1bd2 DD19         add ix, de                               4
   1bd4 DD7E04       ld a, (ix + 4)                           9
   1bd7 CD6C1C       call dkAddWatch                          12
   1bda 2004         jr nz, __dk__hawadded                    5
   1bdc 1E49         ld e, 0x49                               4
   1bde 1802         jr __dk_hawdone                          5
[DKAPP.LIB(571:1)]: __dk__hawadded:
   1be0 1E89         ld e, 0x89                               4
[DKAPP.LIB(573:1)]: __dk_hawdone:
   1be2 010000       ld bc, 0x0000                            6
   1be5 CD4620       call dkRespond                           12
   1be8 C9           ret                                      8
[DKAPP.LIB(579:1)]: dkHandleDeleteWatch::
   1be9 110E00       ld de, 0x000E                            6
   1bec DD19         add ix, de                               4
   1bee E400         ld hl, (ix + 0)                          9
   1bf0 EB           ex de, hl                                2
   1bf1 CFE2ED00     lcall dkDeleteWatch                      19
   1bf5 1E8A         ld e, 0x8A                               4
   1bf7 010000       ld bc, 0x0000                            6
   1bfa CD4620       call dkRespond                           12
   1bfd C9           ret                                      8
[DKAPP.LIB(591:1)]: #endasm
[DKAPP.LIB(604:1)]: #asm __root
[DKAPP.LIB(605:1)]: dkHandleDeleteAllWatches::
   1bfe CF8DED00     lcall __dk_deleteallwatches              19
   1c02 C9           ret                                      8
[DKAPP.LIB(611:1)]: dkHandleExecuteWatch::
   1c03 110E00       ld de, 0x000E                            6
   1c06 DD19         add ix, de                               4
   1c08 E400         ld hl, (ix + 0)                          9
   1c0a EB           ex de, hl                                2
   1c0b ED538CB2     ld (0xB28C), de                          15
   1c0f 3E0C         ld a, 0x0C                               4
   1c11 32AEB3       ld (0xB3AE), a                           10
   1c14 1E8C         ld e, 0x8C                               4
   1c16 010000       ld bc, 0x0000                            6
   1c19 CD4620       call dkRespond                           12
   1c1c CFF9E201     lcall dkEnableRST28                      19
   1c20 CF08E301     lcall dkEnableRST20                      19
   1c24 C9           ret                                      8
[DKAPP.LIB(627:1)]: #endasm
[DKAPP.LIB(647:1)]: #asm __root
[DKAPP.LIB(648:1)]: dkHandleExecAllWatches::
   1c25 CF9BED00     lcall __dk_execallwatches                19
   1c29 C9           ret                                      8
[DKAPP.LIB(653:1)]: #endasm
[DKAPP.LIB(655:1)]: #asm __root
[DKAPP.LIB(656:1)]: dkHandleWatchData::
   1c2a 218EB2       ld hl, 0xB28E                            6
   1c2d 019000       ld bc, 0x0090                            6
   1c30 1601         ld d, 0x01                               4
   1c32 1E92         ld e, 0x92                               4
   1c34 ED7C         ex jk', hl                               4
   1c36 9F           ld hl, lxpc                              2
   1c37 B9           ex jk, hl                                2
   1c38 ED7C         ex jk', hl                               4
   1c3a CD4620       call dkRespond                           12
   1c3d C9           ret                                      8
[DKAPP.LIB(669:1)]: #endasm
[DKAPP.LIB(671:1)]: #asm __root
[DKAPP.LIB(672:1)]: dkHandleSendChar::
   1c3e 110E00       ld de, 0x000E                            6
   1c41 DD19         add ix, de                               4
   1c43 DD7E00       ld a, (ix + 0)                           9
   1c46 324AB3       ld (0xB34A), a                           10
   1c49 E401         ld hl, (ix + 1)                          9
   1c4b 2248B3       ld (0xB348), hl                          13
   1c4e 214FB3       ld hl, 0xB34F                            6
   1c51 CB8E         res 1, (hl)                              10
   1c53 C9           ret                                      8
[DKAPP.LIB(683:1)]: dkHandleStdioCharReady::
   1c54 110E00       ld de, 0x000E                            6
   1c57 DD19         add ix, de                               4
   1c59 E400         ld hl, (ix + 0)                          9
   1c5b 2248B3       ld (0xB348), hl                          13
   1c5e 1E97         ld e, 0x97                               4
   1c60 010000       ld bc, 0x0000                            6
   1c63 CD4620       call dkRespond                           12
   1c66 C9           ret                                      8
[DKAPP.LIB(692:1)]: #endasm
[DKAPP.LIB(716:1)]: #asm __root
[DKAPP.LIB(717:1)]: dkHandleGetEnabledOptions::
   1c67 CFB9ED00     lcall __dk_getenabledoptions             19
   1c6b C9           ret                                      8
[DKAPP.LIB(720:1)]: #endasm
[DKCORE.LIB(2042:1)]: #asm __root
[DKCORE.LIB(2046:1)]: dkAddWatch::
   1c6c 08           ex af, af'                               2
   1c6d 3A2AB3       ld a, (0xB32A)                           9
   1c70 FE08         cp 0x08                                  4
   1c72 C8           ret z                                    2/8
   1c73 CC           bool hl                                  2
   1c74 7F6C         ld l, h                                  4
   1c76 3A2AB3       ld a, (0xB32A)                           9
   1c79 6F           ld l, a                                  2
   1c7a EB           ex de, hl                                2
   1c7b 011200       ld bc, 0x0012                            6
   1c7e 218EB2       ld hl, 0xB28E                            6
   1c81 3E0C         ld a, 0x0C                               4
   1c83 ED7C         ex jk', hl                               4
   1c85 9F           ld hl, lxpc                              2
   1c86 E5           push hl                                  10
   1c87 ED7C         ex jk', hl                               4
   1c89 CF24E301     lcall dkGetStructMemberAddr              19
   1c8d ED7C         ex jk', hl                               4
   1c8f E1           pop hl                                   7
   1c90 97           ld lxpc, hl                              2
   1c91 ED7C         ex jk', hl                               4
   1c93 EB           ex de, hl                                2
   1c94 DD7C         ld hl, ix                                4
   1c96 010400       ld bc, 0x0004                            6
   1c99 EDB0         ldir                                     6+7i
   1c9b 08           ex af, af'                               2
   1c9c 12           ld (de), a                               7
   1c9d 212AB3       ld hl, 0xB32A                            6
   1ca0 34           inc (hl)                                 8
   1ca1 C9           ret                                      8
[DKCORE.LIB(2080:1)]: #endasm
[DKCORE.LIB(2232:1)]: #asm __root
[DKCORE.LIB(2234:1)]: __dk_executewatch::
   1ca2 9F           ld hl, lxpc                              2
   1ca3 2288B2       ld (0xB288), hl                          13
   1ca6 AF           xor a                                    2
   1ca7 011200       ld bc, 0x0012                            6
   1caa 218EB2       ld hl, 0xB28E                            6
   1cad CF24E301     lcall dkGetStructMemberAddr              19
   1cb1 E5           push hl                                  10
   1cb2 CF1DE301     lcall dkDisableRST18                     19
   1cb6 CF0FE301     lcall dkDisableRST20                     19
   1cba CF00E301     lcall dkDisableRST28                     19
   1cbe E1           pop hl                                   7
   1cbf DD7D         ld ix, hl                                4
   1cc1 2286B2       ld (0xB286), hl                          13
   1cc4 110C00       ld de, 0x000C                            6
   1cc7 DD19         add ix, de                               4
   1cc9 E402         ld hl, (ix + 2)                          9
   1ccb 97           ld lxpc, hl                              2
   1ccc E400         ld hl, (ix + 0)                          9
   1cce DD2A83B3     ld ix, (0xB383)                          13
   1cd2 11DC1C       ld de, 0x1CDC                            6
   1cd5 D5           push de                                  10
   1cd6 3E00         ld a, 0x00                               4
   1cd8 32DAB0       ld (0xB0DA), a                           10
   1cdb E9           jp (hl)                                  4
[DKCORE.LIB(2275:1)]: __dk_ewreturn:
   1cdc 3E01         ld a, 0x01                               4
   1cde 32DAB0       ld (0xB0DA), a                           10
   1ce1 ED5B86B2     ld de, (0xB286)                          13
   1ce5 211EB3       ld hl, 0xB31E                            6
   1ce8 010C00       ld bc, 0x000C                            6
   1ceb EDB0         ldir                                     6+7i
   1ced CF16E301     lcall dkEnableRST18                      19
   1cf1 CF08E301     lcall dkEnableRST20                      19
   1cf5 CFF9E201     lcall dkEnableRST28                      19
   1cf9 2A88B2       ld hl, (0xB288)                          11
   1cfc 97           ld lxpc, hl                              2
   1cfd 2A84B2       ld hl, (0xB284)                          11
   1d00 E9           jp (hl)                                  4
[DKCORE.LIB(2297:1)]: #endasm
[DKCORE.LIB(961:1)]: #asm __root
[DKCORE.LIB(962:1)]: dkConvertAddress::
   1d01 EB           ex de, hl                                2
   1d02 B9           ex jk, hl                                2
   1d03 B3           ex bc, hl                                2
   1d04 BF           clr hl                                   2
   1d05 61           rrc bc                                   2
   1d06 FC           rr hl                                    2
   1d07 61           rrc bc                                   2
   1d08 FC           rr hl                                    2
   1d09 61           rrc bc                                   2
   1d0a FC           rr hl                                    2
   1d0b 61           rrc bc                                   2
   1d0c FC           rr hl                                    2
   1d0d 79           ld a, c                                  2
   1d0e 19           add hl, de                               2
   1d0f 0600         ld b, 0x00                               4
   1d11 7F88         adc b                                    4
   1d13 FD7D         ld iy, hl                                4
   1d15 C9           ret                                      8
[DKCORE.LIB(983:1)]: #endasm
   1d16 FDE1         pop iy                                   9
   1d18 ED77         ld a, xpc                                4
   1d1a F5           push af                                  10
   1d1b 33           inc sp                                   2
   1d1c FDE5         push iy                                  12
   1d1e C7EFE101     ljp dkToggleAllBreakpoints               10
[DKCORE.LIB(1363:1)]: #asm __root
[DKCORE.LIB(1368:1)]: dkConvertCodeAddress::
   1d22 FD9F         ldl px, hl                               4
   1d24 B9           ex jk, hl                                2
   1d25 97           ld lxpc, hl                              2
   1d26 ED1E         convc px                                 8
   1d28 DDDD         ld bcde, px                              4
   1d2a ED45         lret                                     13
[DKCORE.LIB(1375:1)]: #endasm
[DKCORE.LIB(459:1)]: #asm __root
[DKCORE.LIB(460:1)]: dkSavepcrst2028::
   1d2c C402         ld hl, (sp + 0x02)                       9
   1d2e 2267B3       ld (0xB367), hl                          13
   1d31 9F           ld hl, lxpc                              2
   1d32 2269B3       ld (0xB369), hl                          13
   1d35 CF4FE501     lcall dkSavepc                           19
   1d39 C9           ret                                      8
[DKCORE.LIB(469:1)]: #endasm
   1d3a C711E201     ljp dkCore                               10
   1d3e C711E201     ljp dkCore                               10
   1d42 C7EFEE00     ljp dkExecuteAllWatches                  10
[DKENTRY.LIB(227:1)]: #asm __root
[DKENTRY.LIB(228:1)]: dkHandleHardBreak::
   1d46 F5           push af                                  10
   1d47 3ADAB0       ld a, (0xB0DA)                           9
   1d4a CB47         bit 0, a                                 4
   1d4c CAEE1D       jp z, .dkHWBreakpointsDisabled           7
   1d4f D33A1C00     ioi ld a, (0x001C)                       11
   1d53 32DBB0       ld (0xB0DB), a                           10
   1d56 AF           xor a                                    2
   1d57 D3320B03     ioi ld (0x030B), a                       11
   1d5b F1           pop af                                   7
   1d5c CD2A20       call dkProlog                            12
   1d5f ED76         push ip                                  9
   1d61 E5           push hl                                  10
   1d62 F5           push af                                  10
   1d63 C404         ld hl, (sp + 0x04)                       9
   1d65 CB1D         rr l                                     4
   1d67 CB1D         rr l                                     4
   1d69 7D           ld a, l                                  2
   1d6a 32D9B0       ld (0xB0D9), a                           10
   1d6d 3E01         ld a, 0x01                               4
   1d6f 32D8B0       ld (0xB0D8), a                           10
   1d72 F1           pop af                                   7
   1d73 E1           pop hl                                   7
   1d74 ED7E         pop ip                                   7
   1d76 CDB320       call dkSaveContext                       12
   1d79 AF           xor a                                    2
   1d7a 32D8B0       ld (0xB0D8), a                           10
   1d7d CD2C1D       call dkSavepcrst2028                     12
[DKENTRY.LIB(272:1)]: .dkHandleHardBreakExit:
   1d80 C400         ld hl, (sp + 0x00)                       9
   1d82 22DCB0       ld (0xB0DC), hl                          13
   1d85 9F           ld hl, lxpc                              2
   1d86 22DEB0       ld (0xB0DE), hl                          13
   1d89 2702         add sp, 2                                4
   1d8b 3ADBB0       ld a, (0xB0DB)                           9
   1d8e E67E         and 0x7E                                 4
   1d90 282C         jr z, .dkIsBreakpoint0                   5
   1d92 AF           xor a                                    2
   1d93 CBCF         set 1, a                                 4
   1d95 32B0B3       ld (0xB3B0), a                           10
   1d98 010500       ld bc, 0x0005                            6
   1d9b 21DBB0       ld hl, 0xB0DB                            6
   1d9e 1601         ld d, 0x01                               4
   1da0 1E11         ld e, 0x11                               4
   1da2 CD4620       call dkRespond                           12
   1da5 AF           xor a                                    2
   1da6 CBCF         set 1, a                                 4
   1da8 32B0B3       ld (0xB3B0), a                           10
   1dab 3AAFB3       ld a, (0xB3AF)                           9
   1dae CBE7         set 4, a                                 4
   1db0 CBEF         set 5, a                                 4
   1db2 32AFB3       ld (0xB3AF), a                           10
   1db5 3E05         ld a, 0x05                               4
   1db7 32ADB3       ld (0xB3AD), a                           10
   1dba C711E201     ljp dkCore                               10
[DKENTRY.LIB(306:1)]: .dkIsBreakpoint0:
   1dbe ED5D         ipres                                    4
   1dc0 FD2AA8B3     ld iy, (0xB3A8)                          13
   1dc4 ED7C         ex jk', hl                               4
   1dc6 2A6DB3       ld hl, (0xB36D)                          11
   1dc9 B9           ex jk, hl                                2
   1dca ED7C         ex jk', hl                               4
   1dcc CF0C2100     lcall __dk_ldp_LogToPhyCode              19
   1dd0 7D           ld a, l                                  2
   1dd1 FEE7         cp 0xE7                                  4
   1dd3 2004         jr nz, .dk_notrst20                      5
   1dd5 C72EE301     ljp dkAsmSingleStep                      10
[DKENTRY.LIB(320:1)]: .dk_notrst20:
   1dd9 FEEF         cp 0xEF                                  4
   1ddb 2004         jr nz, .dk_notrst28                      5
   1ddd C72EE301     ljp dkAsmSingleStep                      10
[DKENTRY.LIB(324:1)]: .dk_notrst28:
   1de1 FD21FFB6     ld iy, 0xB6FF                            8
   1de5 3E01         ld a, 0x01                               4
   1de7 FD775D       ld (iy + 93), a                          10
   1dea C711E201     ljp dkCore                               10
[DKENTRY.LIB(330:1)]: .dkHWBreakpointsDisabled:
   1dee D33A1C00     ioi ld a, (0x001C)                       11
   1df2 F1           pop af                                   7
   1df3 ED5D         ipres                                    4
   1df5 C9           ret                                      8
[DKENTRY.LIB(335:1)]: #endasm
[DKENTRY.LIB(339:1)]: #asm __root
[DKENTRY.LIB(343:1)]: dkHandleRST18::
   1df6 ED76         push ip                                  9
   1df8 ED56         ipset 1                                  4
   1dfa CD2A20       call dkProlog                            12
   1dfd ED7E         pop ip                                   7
   1dff CDB320       call dkSaveContext                       12
   1e02 2702         add sp, 2                                4
   1e04 CF4FE501     lcall dkSavepc                           19
   1e08 FD2AA8B3     ld iy, (0xB3A8)                          13
   1e0c ED7C         ex jk', hl                               4
   1e0e 2A6DB3       ld hl, (0xB36D)                          11
   1e11 B9           ex jk, hl                                2
   1e12 ED7C         ex jk', hl                               4
   1e14 CF0C2100     lcall __dk_ldp_LogToPhyCode              19
   1e18 7D           ld a, l                                  2
   1e19 FEE7         cp 0xE7                                  4
   1e1b 2004         jr nz, .dk_notrst20                      5
   1e1d C72EE301     ljp dkAsmSingleStep                      10
[DKENTRY.LIB(369:1)]: .dk_notrst20:
   1e21 FEEF         cp 0xEF                                  4
   1e23 2004         jr nz, .dk_notrst28                      5
   1e25 C72EE301     ljp dkAsmSingleStep                      10
[DKENTRY.LIB(373:1)]: .dk_notrst28:
   1e29 FD21FFB6     ld iy, 0xB6FF                            8
   1e2d 3E01         ld a, 0x01                               4
   1e2f FD775D       ld (iy + 93), a                          10
   1e32 C711E201     ljp dkCore                               10
[DKENTRY.LIB(379:1)]: #endasm
[DKCORE.LIB(1580:1)]: #asm __root
[DKCORE.LIB(1581:1)]: dkCopyNextInstruction::
   1e36 9F           ld hl, lxpc                              2
   1e37 E5           push hl                                  10
   1e38 2A69B3       ld hl, (0xB369)                          11
   1e3b 97           ld lxpc, hl                              2
   1e3c 2A67B3       ld hl, (0xB367)                          11
   1e3f 11C8B0       ld de, 0xB0C8                            6
   1e42 010800       ld bc, 0x0008                            6
   1e45 EDB0         ldir                                     6+7i
   1e47 E1           pop hl                                   7
   1e48 97           ld lxpc, hl                              2
   1e49 C9           ret                                      8
[DKCORE.LIB(1604:1)]: #endasm
[DKCORE.LIB(1808:1)]: #asm __root
[DKCORE.LIB(1809:1)]: __dk_copylcallreturn::
   1e4a 2A67B3       ld hl, (0xB367)                          11
   1e4d 19           add hl, de                               2
   1e4e D9           exx                                      2
   1e4f FD7C         ld hl, iy                                4
   1e51 23           inc hl                                   2
   1e52 1167B3       ld de, 0xB367                            6
   1e55 010300       ld bc, 0x0003                            6
   1e58 EDB0         ldir                                     6+7i
   1e5a D9           exx                                      2
   1e5b C9           ret                                      8
[DKCORE.LIB(1820:1)]: #endasm
[DKCORE.LIB(1945:1)]: #asm __root
[DKCORE.LIB(1946:1)]: __dk_handle_lddsr::
   1e5c ED98         lddsr                                    6+7i
   1e5e DF           rst 0x18                                 10
[DKCORE.LIB(1950:1)]: __dk_handle_ldisr::
   1e5f ED90         ldisr                                    6+7i
   1e61 DF           rst 0x18                                 10
[DKCORE.LIB(1954:1)]: __dk_handle_lsdr::
   1e62 EDF8         lsdr                                     6+7i
   1e64 DF           rst 0x18                                 10
[DKCORE.LIB(1958:1)]: __dk_handle_lsir::
   1e65 EDF0         lsir                                     6+7i
   1e67 DF           rst 0x18                                 10
[DKCORE.LIB(1962:1)]: __dk_handle_lsddr::
   1e68 EDD8         lsddr                                    6+7i
   1e6a DF           rst 0x18                                 10
[DKCORE.LIB(1966:1)]: __dk_handle_lsidr::
   1e6b EDD0         lsidr                                    6+7i
   1e6d DF           rst 0x18                                 10
[DKCORE.LIB(1969:1)]: #endasm
[DKCOMMON.LIB(253:1)]: #asm __root
[DKCOMMON.LIB(255:1)]: dkSetReturnAddress::
   1e6e 3AACB3       ld a, (0xB3AC)                           9
   1e71 CB67         bit 4, a                                 4
   1e73 2007         jr nz, __dk_sra_dostep                   5
   1e75 CB6F         bit 5, a                                 4
   1e77 2003         jr nz, __dk_sra_dostep                   5
   1e79 C3D11E       jp __dk_sra_done                         7
[DKCOMMON.LIB(267:1)]: __dk_sra_dostep:
   1e7c 2AD4B0       ld hl, (0xB0D4)                          11
   1e7f EB           ex de, hl                                2
   1e80 ED4BD6B0     ld bc, (0xB0D6)                          13
   1e84 BF           clr hl                                   2
   1e85 7F61         ld h, c                                  4
   1e87 FD8B         sla 4, jkhl                              4
   1e89 19           add hl, de                               2
   1e8a EB           ex de, hl                                2
   1e8b 08           ex af, af'                               2
   1e8c 63           rr bc                                    2
   1e8d 63           rr bc                                    2
   1e8e 63           rr bc                                    2
   1e8f 63           rr bc                                    2
   1e90 0600         ld b, 0x00                               4
   1e92 08           ex af, af'                               2
   1e93 79           ld a, c                                  2
   1e94 CE00         adc 0x00                                 4
   1e96 4F           ld c, a                                  2
   1e97 78           ld a, b                                  2
   1e98 CE00         adc 0x00                                 4
   1e9a 47           ld b, a                                  2
   1e9b CDBC1F       call LongToXaddr                         12
   1e9e ED7C         ex jk', hl                               4
   1ea0 B9           ex jk, hl                                2
   1ea1 97           ld lxpc, hl                              2
   1ea2 ED7C         ex jk', hl                               4
   1ea4 DD7D         ld ix, hl                                4
   1ea6 2AD0B0       ld hl, (0xB0D0)                          11
   1ea9 F400         ld (ix + 0), hl                          11
   1eab 3AACB3       ld a, (0xB3AC)                           9
   1eae CB67         bit 4, a                                 4
   1eb0 2004         jr nz, __dk_sra_stepcall                 5
   1eb2 CB6F         bit 5, a                                 4
   1eb4 2010         jr nz, __dk_sra_steplcall                5
[DKCOMMON.LIB(304:1)]: __dk_sra_stepcall:
   1eb6 CBA7         res 4, a                                 4
   1eb8 32ACB3       ld (0xB3AC), a                           10
   1ebb 2AD2B0       ld hl, (0xB0D2)                          11
   1ebe 226DB3       ld (0xB36D), hl                          13
   1ec1 2269B3       ld (0xB369), hl                          13
   1ec4 180B         jr __dk_sra_done                         5
[DKCOMMON.LIB(312:1)]: __dk_sra_steplcall:
   1ec6 CBAF         res 5, a                                 4
   1ec8 32ACB3       ld (0xB3AC), a                           10
   1ecb 2AD2B0       ld hl, (0xB0D2)                          11
   1ece DD7502       ld (ix + 2), l                           10
[DKCOMMON.LIB(317:1)]: __dk_sra_done:
   1ed1 C9           ret                                      8
[DKCOMMON.LIB(321:1)]: dkHandleRST20::
   1ed2 F5           push af                                  10
   1ed3 E5           push hl                                  10
   1ed4 9F           ld hl, lxpc                              2
   1ed5 B9           ex jk, hl                                2
   1ed6 CF14E501     lcall dkCheckEntry                       19
   1eda B9           ex jk, hl                                2
   1edb 97           ld lxpc, hl                              2
   1edc E1           pop hl                                   7
   1edd 2802         jr z, __dk_hr20enter                     5
   1edf F1           pop af                                   7
   1ee0 C9           ret                                      8
[DKCOMMON.LIB(334:1)]: __dk_hr20enter:
   1ee1 F1           pop af                                   7
   1ee2 CD2A20       call dkProlog                            12
   1ee5 CDB320       call dkSaveContext                       12
   1ee8 2A67B3       ld hl, (0xB367)                          11
   1eeb 22C4B0       ld (0xB0C4), hl                          13
   1eee 2A69B3       ld hl, (0xB369)                          11
   1ef1 22C6B0       ld (0xB0C6), hl                          13
   1ef4 CD2C1D       call dkSavepcrst2028                     12
   1ef7 3AB0B3       ld a, (0xB3B0)                           9
   1efa CB6F         bit 5, a                                 4
   1efc 2804         jr z, .dk_hr20notatexit                  5
   1efe C711E201     ljp dkCore                               10
[DKCOMMON.LIB(362:1)]: .dk_hr20notatexit:
   1f02 3AB0B3       ld a, (0xB3B0)                           9
   1f05 CB57         bit 2, a                                 4
   1f07 C21C1F       jp nz, .dk_hr20checkbp                   7
   1f0a 2A54B3       ld hl, (0xB354)                          11
   1f0d 7C           ld a, h                                  2
   1f0e 7FB5         or l                                     4
   1f10 C21C1F       jp nz, .dk_hr20checkbp                   7
   1f13 2702         add sp, 2                                4
   1f15 CD6E1E       call dkSetReturnAddress                  12
   1f18 C711E201     ljp dkCore                               10
[DKCOMMON.LIB(386:1)]: .dk_hr20checkbp:
   1f1c 3AAEB3       ld a, (0xB3AE)                           9
   1f1f FE08         cp 0x08                                  4
   1f21 2006         jr nz, __dk_hr20checkwatch               5
   1f23 2702         add sp, 2                                4
   1f25 C711E201     ljp dkCore                               10
[DKCOMMON.LIB(397:1)]: __dk_hr20checkwatch:
   1f29 FE0C         cp 0x0C                                  4
   1f2b 2006         jr nz, __dk_hr20checkwatches             5
   1f2d 2702         add sp, 2                                4
   1f2f C711E201     ljp dkCore                               10
[DKCOMMON.LIB(407:1)]: __dk_hr20checkwatches:
   1f33 FE0D         cp 0x0D                                  4
   1f35 2006         jr nz, __dk_hr20findbp                   5
   1f37 2702         add sp, 2                                4
   1f39 C711E201     ljp dkCore                               10
[DKCOMMON.LIB(414:1)]: __dk_hr20findbp:
   1f3d D1           pop de                                   7
   1f3e 1B           dec de                                   2
   1f3f AF           xor a                                    2
   1f40 47           ld b, a                                  2
   1f41 21FFDF       ld hl, 0xDFFF                            6
   1f44 ED52         sbc hl, de                               4
   1f46 3006         jr nc, __dk_hr20_cont                    5
   1f48 ED7C         ex jk', hl                               4
   1f4a 9F           ld hl, lxpc                              2
   1f4b 91           ld bc, hl                                2
   1f4c ED7C         ex jk', hl                               4
[DKCOMMON.LIB(426:1)]: __dk_hr20_cont:
   1f4e CF83EF00     lcall dkBPTableFindBP                    19
   1f52 FE04         cp 0x04                                  4
   1f54 CAAD1F       jp z, __dk_hrst20restore                 7
   1f57 FE02         cp 0x02                                  4
   1f59 CAAD1F       jp z, __dk_hrst20restore                 7
   1f5c DD7D         ld ix, hl                                4
   1f5e DD7E08       ld a, (ix + 8)                           9
   1f61 CB47         bit 0, a                                 4
   1f63 CAAD1F       jp z, __dk_hrst20restore                 7
   1f66 E409         ld hl, (ix + 9)                          9
   1f68 CC           bool hl                                  2
   1f69 280C         jr z, __dk_hr20conditiondone             5
   1f6b E409         ld hl, (ix + 9)                          9
   1f6d 11721F       ld de, 0x1F72                            6
   1f70 D5           push de                                  10
   1f71 E9           jp (hl)                                  4
[DKCOMMON.LIB(449:1)]: __dk_hr20condret:
   1f72 FE00         cp 0x00                                  4
   1f74 CAAD1F       jp z, __dk_hrst20restore                 7
[DKCOMMON.LIB(453:1)]: __dk_hr20conditiondone:
   1f77 DD7E08       ld a, (ix + 8)                           9
   1f7a CB5F         bit 3, a                                 4
   1f7c 2813         jr z, __dk_hr20nothardbp                 5
   1f7e ED5E         ipset 3                                  4
   1f80 AF           xor a                                    2
   1f81 CBCF         set 1, a                                 4
   1f83 32B0B3       ld (0xB3B0), a                           10
   1f86 FD21FFB6     ld iy, 0xB6FF                            8
   1f8a 3E01         ld a, 0x01                               4
   1f8c FD775D       ld (iy + 93), a                          10
   1f8f 1806         jr __dk_hr20done                         5
[DKCOMMON.LIB(466:1)]: __dk_hr20nothardbp:
   1f91 AF           xor a                                    2
   1f92 CBC7         set 0, a                                 4
   1f94 32B0B3       ld (0xB3B0), a                           10
[DKCOMMON.LIB(470:1)]: __dk_hr20done:
   1f97 3AAFB3       ld a, (0xB3AF)                           9
   1f9a CBE7         set 4, a                                 4
   1f9c CBEF         set 5, a                                 4
   1f9e 32AFB3       ld (0xB3AF), a                           10
   1fa1 3E05         ld a, 0x05                               4
   1fa3 32ADB3       ld (0xB3AD), a                           10
   1fa6 CD6E1E       call dkSetReturnAddress                  12
   1fa9 C711E201     ljp dkCore                               10
[DKCOMMON.LIB(484:1)]: __dk_hrst20restore:
   1fad 2AC4B0       ld hl, (0xB0C4)                          11
   1fb0 2267B3       ld (0xB367), hl                          13
   1fb3 2AC6B0       ld hl, (0xB0C6)                          11
   1fb6 2269B3       ld (0xB369), hl                          13
   1fb9 C34A20       jp dkRestoreContext                      7
[DKCOMMON.LIB(506:1)]: #endasm
[SYSIO.LIB(883:1)]: #asm
[SYSIO.LIB(884:1)]: LongToXaddr::
   1fbc ED7C         ex jk', hl                               4
   1fbe 7A           ld a, d                                  2
   1fbf E6F0         and 0xF0                                 4
   1fc1 CB3F         srl a                                    4
   1fc3 CB3F         srl a                                    4
   1fc5 CB3F         srl a                                    4
   1fc7 CB3F         srl a                                    4
   1fc9 81           ld hl, bc                                2
   1fca FD8B         sla 4, jkhl                              4
   1fcc 7F85         add l                                    4
   1fce 6F           ld l, a                                  2
   1fcf 7C           ld a, h                                  2
   1fd0 CE00         adc 0x00                                 4
   1fd2 67           ld h, a                                  2
   1fd3 DD9D         ld px, bcde                              4
   1fd5 110E00       ld de, 0x000E                            6
   1fd8 55           sub hl, de                               2
   1fd9 DDDD         ld bcde, px                              4
   1fdb 91           ld bc, hl                                2
   1fdc 7A           ld a, d                                  2
   1fdd E60F         and 0x0F                                 4
   1fdf F6E0         or 0xE0                                  4
   1fe1 57           ld d, a                                  2
   1fe2 79           ld a, c                                  2
   1fe3 81           ld hl, bc                                2
   1fe4 B9           ex jk, hl                                2
   1fe5 ED7C         ex jk', hl                               4
   1fe7 C9           ret                                      8
[SYSIO.LIB(915:1)]: #endasm
[DKENTRY.LIB(458:1)]: #asm
[DKENTRY.LIB(463:1)]: dkHandleRST28::
   1fe8 ED76         push ip                                  9
   1fea ED56         ipset 1                                  4
   1fec CD2A20       call dkProlog                            12
   1fef ED7E         pop ip                                   7
   1ff1 F5           push af                                  10
   1ff2 E5           push hl                                  10
   1ff3 9F           ld hl, lxpc                              2
   1ff4 B9           ex jk, hl                                2
   1ff5 CF14E501     lcall dkCheckEntry                       19
   1ff9 B9           ex jk, hl                                2
   1ffa 97           ld lxpc, hl                              2
   1ffb E1           pop hl                                   7
   1ffc CA0120       jp z, .dk_hr28enter                      7
   1fff F1           pop af                                   7
   2000 C9           ret                                      8
[DKENTRY.LIB(485:1)]: .dk_hr28enter:
   2001 F1           pop af                                   7
   2002 CDB320       call dkSaveContext                       12
   2005 CD2C1D       call dkSavepcrst2028                     12
   2008 2702         add sp, 2                                4
   200a CD6E1E       call dkSetReturnAddress                  12
   200d C711E201     ljp dkCore                               10
[DKENTRY.LIB(501:1)]: #endasm
[DKCORE.LIB(1453:1)]: #asm __root
[DKCORE.LIB(1456:1)]: dkDoHook::
   2011 ED7C         ex jk', hl                               4
   2013 9F           ld hl, lxpc                              2
   2014 E5           push hl                                  10
   2015 ED7C         ex jk', hl                               4
   2017 AF           xor a                                    2
   2018 7FB4         or h                                     4
   201a 7FB5         or l                                     4
   201c 2805         jr z, __dk_dh_done                       5
   201e 112320       ld de, 0x2023                            6
   2021 D5           push de                                  10
   2022 E9           jp (hl)                                  4
[DKCORE.LIB(1468:1)]: __dk_dh_done:
   2023 ED7C         ex jk', hl                               4
   2025 E1           pop hl                                   7
   2026 97           ld lxpc, hl                              2
   2027 ED7C         ex jk', hl                               4
   2029 C9           ret                                      8
[DKCORE.LIB(1474:1)]: #endasm
[DKENTRY.LIB(68:1)]: #asm __root
[DKENTRY.LIB(72:1)]: dkProlog::
   202a ED76         push ip                                  9
   202c ED56         ipset 1                                  4
   202e F5           push af                                  10
   202f E5           push hl                                  10
   2030 2A33B3       ld hl, (0xB333)                          11
   2033 7C           ld a, h                                  2
   2034 7FB5         or l                                     4
   2036 2809         jr z, __dkprolog_done                    5
   2038 2231B3       ld (0xB331), hl                          13
   203b CC           bool hl                                  2
   203c 7F6C         ld l, h                                  4
   203e 2233B3       ld (0xB333), hl                          13
[DKENTRY.LIB(110:1)]: __dkprolog_done:
   2041 E1           pop hl                                   7
   2042 F1           pop af                                   7
   2043 ED7E         pop ip                                   7
   2045 C9           ret                                      8
[DKENTRY.LIB(116:1)]: #endasm
[DKCORE.LIB(2828:1)]: #asm __root
[DKCORE.LIB(2834:1)]: dkRespond::
   2046 C34F08       jp dkBuildResponse                       7
   2049 C9           ret                                      8
[DKCORE.LIB(2837:1)]: #endasm
[DKCORE.LIB(1385:1)]: #asm
[DKCORE.LIB(1388:1)]: dkRestoreContext::
   204a CFE7E100     lcall dkUpdateBxCR                       19
   204e ED56         ipset 1                                  4
   2050 CF35E501     lcall dkExit                             19
   2054 BF           clr hl                                   2
   2055 39           add hl, sp                               2
   2056 11C5FF       ld de, 0xFFC5                            6
   2059 19           add hl, de                               2
   205a F9           ld sp, hl                                2
   205b EB           ex de, hl                                2
   205c 216FB3       ld hl, 0xB36F                            6
   205f 013B00       ld bc, 0x003B                            6
   2062 EDB0         ldir                                     6+7i
   2064 CD9C20       call dkEpilog                            12
   2067 214FB3       ld hl, 0xB34F                            6
   206a CB9E         res 3, (hl)                              10
   206c FD21FFB6     ld iy, 0xB6FF                            8
   2070 AF           xor a                                    2
   2071 FD775D       ld (iy + 93), a                          10
   2074 2A6DB3       ld hl, (0xB36D)                          11
   2077 97           ld lxpc, hl                              2
   2078 F1           pop af                                   7
   2079 C1           pop bc                                   7
   207a D1           pop de                                   7
   207b FDF1         pop jkhl                                 13
   207d D9           exx                                      2
   207e 08           ex af, af'                               2
   207f F1           pop af                                   7
   2080 C1           pop bc                                   7
   2081 D1           pop de                                   7
   2082 FDF1         pop jkhl                                 13
   2084 DDE1         pop ix                                   9
   2086 FDE1         pop iy                                   9
   2088 EDC1         pop pw                                   13
   208a EDD1         pop px                                   13
   208c EDE1         pop py                                   13
   208e EDF1         pop pz                                   13
   2090 EDD9         exp                                      4
   2092 EDC1         pop pw                                   13
   2094 EDD1         pop px                                   13
   2096 EDE1         pop py                                   13
   2098 EDF1         pop pz                                   13
   209a ED4D         reti                                     12
[DKCORE.LIB(1448:1)]: #endasm
[DKENTRY.LIB(122:1)]: #asm
[DKENTRY.LIB(126:1)]: dkEpilog::
   209c ED76         push ip                                  9
   209e ED56         ipset 1                                  4
   20a0 F5           push af                                  10
   20a1 E5           push hl                                  10
   20a2 2A31B3       ld hl, (0xB331)                          11
   20a5 2233B3       ld (0xB333), hl                          13
   20a8 CC           bool hl                                  2
   20a9 7F6C         ld l, h                                  4
   20ab 2231B3       ld (0xB331), hl                          13
   20ae E1           pop hl                                   7
   20af F1           pop af                                   7
   20b0 ED7E         pop ip                                   7
   20b2 C9           ret                                      8
[DKENTRY.LIB(159:1)]: #endasm
[DKCORE.LIB(345:1)]: #asm __root
[DKCORE.LIB(348:1)]: dkSaveContext::
   20b3 CDC900       call dkClearBxCR                         12
   20b6 F5           push af                                  10
   20b7 3AD8B0       ld a, (0xB0D8)                           9
   20ba CB47         bit 0, a                                 4
   20bc 2004         jr nz, .dkUseSavedIP                     5
   20be ED76         push ip                                  9
   20c0 1806         jr .dkContinueSaveContext                5
[DKCORE.LIB(360:1)]: .dkUseSavedIP:
   20c2 3AD9B0       ld a, (0xB0D9)                           9
   20c5 F5           push af                                  10
   20c6 2701         add sp, 1                                4
[DKCORE.LIB(365:1)]: .dkContinueSaveContext:
   20c8 EDF5         push pz                                  18
   20ca EDE5         push py                                  18
   20cc EDD5         push px                                  18
   20ce EDC5         push pw                                  18
   20d0 EDD9         exp                                      4
   20d2 EDF5         push pz                                  18
   20d4 EDE5         push py                                  18
   20d6 EDD5         push px                                  18
   20d8 EDC5         push pw                                  18
   20da FDE5         push iy                                  12
   20dc DDE5         push ix                                  12
   20de FDF5         push jkhl                                18
   20e0 D5           push de                                  10
   20e1 C5           push bc                                  10
   20e2 C42D         ld hl, (sp + 0x2D)                       9
   20e4 E5           push hl                                  10
   20e5 D9           exx                                      2
   20e6 08           ex af, af'                               2
   20e7 FDF5         push jkhl                                18
   20e9 D5           push de                                  10
   20ea C5           push bc                                  10
   20eb F5           push af                                  10
   20ec F5           push af                                  10
   20ed F5           push af                                  10
   20ee 214300       ld hl, 0x0043                            6
   20f1 39           add hl, sp                               2
   20f2 DD216BB3     ld ix, 0xB36B                            8
   20f6 F400         ld (ix + 0), hl                          11
   20f8 CC           bool hl                                  2
   20f9 7F6C         ld l, h                                  4
   20fb 39           add hl, sp                               2
   20fc 23           inc hl                                   2
   20fd 23           inc hl                                   2
   20fe 116DB3       ld de, 0xB36D                            6
   2101 013D00       ld bc, 0x003D                            6
   2104 EDB0         ldir                                     6+7i
   2106 213F00       ld hl, 0x003F                            6
   2109 39           add hl, sp                               2
   210a F9           ld sp, hl                                2
   210b C9           ret                                      8
[DKCORE.LIB(410:1)]: #endasm
[DKCORE.LIB(1539:1)]: #asm __root
[DKCORE.LIB(1550:1)]: __dk_ldp_LogToPhyCode::
   210c B9           ex jk, hl                                2
   210d 97           ld lxpc, hl                              2
   210e FD7C         ld hl, iy                                4
   2110 3E01         ld a, 0x01                               4
   2112 CDE30F       call dkcLogicalToPhysical                12
   2115 DD8D         ld pw, bcde                              4
   2117 8500         ld hl, (pw + 0)                          9
   2119 ED45         lret                                     13
[DKCORE.LIB(1559:1)]: #endasm
[DKAPP.LIB(736:1)]: #asm __root
[DKAPP.LIB(737:1)]: dkUnlockStdio::
   211b CFE0E501     lcall __dk_unlockstdio                   19
   211f C9           ret                                      8
[DKAPP.LIB(740:1)]: #endasm
[MUTIL.LIB(259:1)]: #asm __nodebug
[MUTIL.LIB(260:1)]: dloop8::
   2120 17           rla                                      2
   2121 FD68         rl 1, jkhl                               4
   2123 EDD6         sub jkhl, bcde                           4
   2125 3003         jr nc, 0x212A                            5
   2127 EDC6         add jkhl, bcde                           4
   2129 37           scf                                      2
   212a 17           rla                                      2
   212b FD68         rl 1, jkhl                               4
   212d EDD6         sub jkhl, bcde                           4
   212f 3003         jr nc, 0x2134                            5
   2131 EDC6         add jkhl, bcde                           4
   2133 37           scf                                      2
   2134 17           rla                                      2
   2135 FD68         rl 1, jkhl                               4
   2137 EDD6         sub jkhl, bcde                           4
   2139 3003         jr nc, 0x213E                            5
   213b EDC6         add jkhl, bcde                           4
   213d 37           scf                                      2
   213e 17           rla                                      2
   213f FD68         rl 1, jkhl                               4
   2141 EDD6         sub jkhl, bcde                           4
   2143 3003         jr nc, 0x2148                            5
   2145 EDC6         add jkhl, bcde                           4
   2147 37           scf                                      2
   2148 17           rla                                      2
   2149 FD68         rl 1, jkhl                               4
   214b EDD6         sub jkhl, bcde                           4
   214d 3003         jr nc, 0x2152                            5
   214f EDC6         add jkhl, bcde                           4
   2151 37           scf                                      2
   2152 17           rla                                      2
   2153 FD68         rl 1, jkhl                               4
   2155 EDD6         sub jkhl, bcde                           4
   2157 3003         jr nc, 0x215C                            5
   2159 EDC6         add jkhl, bcde                           4
   215b 37           scf                                      2
   215c 17           rla                                      2
   215d FD68         rl 1, jkhl                               4
   215f EDD6         sub jkhl, bcde                           4
   2161 3003         jr nc, 0x2166                            5
   2163 EDC6         add jkhl, bcde                           4
   2165 37           scf                                      2
   2166 17           rla                                      2
   2167 FD68         rl 1, jkhl                               4
   2169 EDD6         sub jkhl, bcde                           4
   216b 3003         jr nc, 0x2170                            5
   216d EDC6         add jkhl, bcde                           4
   216f 37           scf                                      2
   2170 17           rla                                      2
   2171 2F           cpl                                      2
   2172 C9           ret                                      8
[MUTIL.LIB(272:1)]: #endasm
[ERRORS.LIB(48:1)]: #asm __nodebug __root
[ERRORS.LIB(63:1)]: exception::
   2173 D9           exx                                      2
   2174 C400         ld hl, (sp + 0x00)                       9
   2176 D9           exx                                      2
   2177 B1           ld de, hl                                2
   2178 C400         ld hl, (sp + 0x00)                       9
   217a 01FDFF       ld bc, 0xFFFD                            6
   217d 09           add hl, bc                               2
   217e E5           push hl                                  10
   217f 9F           ld hl, lxpc                              2
   2180 E5           push hl                                  10
   2181 EDA50000     push 0x0000                              15
   2185 EB           ex de, hl                                2
   2186 E5           push hl                                  10
   2187 EDA59321     push 0x2193                              15
   218b ED77         ld a, xpc                                4
[ERRORS.LIB(86:1)]: _EH_errexit:
   218d FD2AF4B4     ld iy, (0xB4F4)                          13
   2191 FDE9         jp (iy)                                  6
[ERRORS.LIB(91:1)]: _EH_exceptionRet:
   2193 E1           pop hl                                   7
   2194 2706         add sp, 6                                4
[ERRORS.LIB(95:1)]: _EH_exceptionDone:
   2196 C9           ret                                      8
[ERRORS.LIB(97:1)]: #endasm
[MUTIL.LIB(278:1)]: #asm __nodebug
[MUTIL.LIB(286:1)]: mod0::
   2197 DD5C         test bcde                                4
   2199 C0           ret nz                                   2/8
   219a E1           pop hl                                   7
   219b 2136FD       ld hl, 0xFD36                            6
   219e E5           push hl                                  10
   219f CD7321       call exception                           12
   21a2 2702         add sp, 2                                4
   21a4 CDB601       call _xexit                              12
[MUTIL.LIB(296:1)]: #endasm
[PROGRAM.LIB(128:1)]: void premain(void)
[PROGRAM.LIB(162:1)]: #asm
   21a7 ED73EFB4     ld (0xB4EF), sp                          15
   21ab AF           xor a                                    2
   21ac 3276B4       ld (0xB476), a                           10
   21af 3230B3       ld (0xB330), a                           10
[PROGRAM.LIB(178:1)]: #endasm
[PROGRAM.LIB(179:3)]: _init_bad_interrupts();
   21b2 CD6F22       call _init_bad_interrupts                12
   21b5 00           nop                                      2
[PROGRAM.LIB(180:2)]: _init_xalloc();
   21b6 CF4AEA01     lcall _init_xalloc                       19
[PROGRAM.LIB(184:2)]: _stdio_files_init();
   21ba CF8DEA01     lcall _stdio_files_init                  19
[PROGRAM.LIB(187:2)]: coreInit();   // Located in RCMxxxx_Bios.lib for core module family
   21be CF0BEF01     lcall coreInit                           19
[PROGRAM.LIB(191:2)]: _sbf_bios_initSF();	//Re-initialize serial flash.
   21c2 CDD804       call _sbf_bios_initSF                    12
[PROGRAM.LIB(196:1)]: _DISABLE_DEBUG;
   21c5 214FB3       ld hl, 0xB34F                            6
   21c8 CBDE         set 3, (hl)                              10
[PROGRAM.LIB(200:2)]: _GLOBAL_INIT();             // trigger the function blocks
   21ca CD6D27       call 0x276D                              12
   21cd 00           nop                                      2
[PROGRAM.LIB(204:1)]: _ENABLE_DEBUG;
   21ce 214FB3       ld hl, 0xB34F                            6
   21d1 CB9E         res 3, (hl)                              10
[PROGRAM.LIB(208:2)]: _Init_Stacks();
   21d3 CFFDE501     lcall _Init_Stacks                       19
[PROGRAM.LIB(209:2)]: __initial_stack = _Alloc_Stack(DEFAULTSTACKSIZE);
   21d7 210010       ld hl, 0x1000                            6
   21da E5           push hl                                  10
   21db CF93E801     lcall _Alloc_Stack                       19
   21df 2702         add sp, 2                                4
   21e1 DDF5         push bcde                                18
   21e3 21AEB0       ld hl, 0xB0AE                            6
   21e6 DDF1         pop bcde                                 13
   21e8 DD1B         ld (hl), bcde                            18
[PROGRAM.LIB(210:2)]: if (!__initial_stack)
   21ea 21AEB0       ld hl, 0xB0AE                            6
   21ed DD1A         ld bcde, (hl)                            14
   21ef DD5C         test bcde                                4
   21f1 EDCC         flag z, hl                               4
   21f3 CC           bool hl                                  2
   21f4 CA0A22       jp z, 0x220A                             7
[PROGRAM.LIB(211:2)]: {
[PROGRAM.LIB(212:3)]: exception(-ERR_BADSTACKALLOC);
   21f7 212FFD       ld hl, 0xFD2F                            6
   21fa E5           push hl                                  10
   21fb CD7321       call exception                           12
   21fe 2702         add sp, 2                                4
[PROGRAM.LIB(213:3)]: exit(-ERR_BADSTACKALLOC);
   2200 212FFD       ld hl, 0xFD2F                            6
   2203 E5           push hl                                  10
   2204 CD8125       call exit                                12
   2207 00           nop                                      2
   2208 2702         add sp, 2                                4
[PROGRAM.LIB(214:2)]: }
[PROGRAM.LIB(215:1)]: _ProgStkSwitch(__initial_stack);
[PROGRAM.LIB(215:2)]: _ProgStkSwitch(__initial_stack);
   220a 21AEB0       ld hl, 0xB0AE                            6
   220d DD1A         ld bcde, (hl)                            14
   220f DDF5         push bcde                                18
   2211 CD3A22       call _ProgStkSwitch                      12
   2214 2704         add sp, 4                                4
[PROGRAM.LIB(216:2)]: dkInitStkTop = (int) __initial_stack;
   2216 21AEB0       ld hl, 0xB0AE                            6
   2219 DD1A         ld bcde, (hl)                            14
   221b A1           ld hl, de                                2
   221c 22EFB4       ld (0xB4EF), hl                          13
[PROGRAM.LIB(219:2)]: VdInit();
   221f CFEDE501     lcall VdInit                             19
[PROGRAM.LIB(272:7)]: main();
   2223 CFA5E700     lcall main                               19
[PROGRAM.LIB(278:2)]: exit(0);
   2227 BF           clr hl                                   2
   2228 E5           push hl                                  10
   2229 CD8125       call exit                                12
   222c 00           nop                                      2
   222d 2702         add sp, 2                                4
[PROGRAM.LIB(279:1)]: }
[PROGRAM.LIB(279:1)]: }
   222f C9           ret                                      8
*** Constant Data ***
   2230  00 01 00 02 00 04 00 08 00 10                             
*** End Constant Data ***
[STACK.LIB(661:1)]: #asm __root
[STACK.LIB(662:1)]: _ProgStkSwitch::
   223a AF           xor a                                    2
   223b 3276B4       ld (0xB476), a                           10
   223e FDE1         pop iy                                   9
   2240 E1           pop hl                                   7
   2241 11FCFF       ld de, 0xFFFC                            6
   2244 19           add hl, de                               2
   2245 D3ED4B1A00   ioi ld bc, (0x001A)                      15
   224a ED43B2B0     ld (0xB0B2), bc                          15
   224e C1           pop bc                                   7
   224f ED73B4B0     ld (0xB0B4), sp                          15
   2253 F9           ld sp, hl                                2
   2254 D3ED431A00   ioi ld (0x001A), bc                      15
   2259 FDE9         jp (iy)                                  6
[STACK.LIB(677:1)]: #endasm
[STACK.LIB(694:1)]: #asm __root
[STACK.LIB(695:1)]: _BiosStkSwitch::
   225b 3E01         ld a, 0x01                               4
   225d 3276B4       ld (0xB476), a                           10
   2260 FDE1         pop iy                                   9
   2262 2AB2B0       ld hl, (0xB0B2)                          11
   2265 D3221A00     ioi ld (0x001A), hl                      13
   2269 ED7BB4B0     ld sp, (0xB0B4)                          13
   226d FDE9         jp (iy)                                  6
[STACK.LIB(703:1)]: #endasm
[PROGRAM.LIB(299:1)]: #asm
[PROGRAM.LIB(300:1)]: _init_bad_interrupts::
   226f 3EC3         ld a, 0xC3                               4
   2271 210324       ld hl, 0x2403                            6
   2274 012100       ld bc, 0x0021                            6
   2277 ED4320B8     ld (0xB820), bc                          15
   227b 1127FD       ld de, 0xFD27                            6
   227e ED5321B8     ld (0xB821), de                          15
   2282 3223B8       ld (0xB823), a                           10
   2285 2224B8       ld (0xB824), hl                          13
   2288 ED4360B8     ld (0xB860), bc                          15
   228c 1126FD       ld de, 0xFD26                            6
   228f ED5361B8     ld (0xB861), de                          15
   2293 3263B8       ld (0xB863), a                           10
   2296 2264B8       ld (0xB864), hl                          13
   2299 ED4370B8     ld (0xB870), bc                          15
   229d 1125FD       ld de, 0xFD25                            6
   22a0 ED5371B8     ld (0xB871), de                          15
   22a4 3273B8       ld (0xB873), a                           10
   22a7 2274B8       ld (0xB874), hl                          13
   22aa ED4380B8     ld (0xB880), bc                          15
   22ae 1124FD       ld de, 0xFD24                            6
   22b1 ED5381B8     ld (0xB881), de                          15
   22b5 3283B8       ld (0xB883), a                           10
   22b8 2284B8       ld (0xB884), hl                          13
   22bb ED4390B8     ld (0xB890), bc                          15
   22bf 1123FD       ld de, 0xFD23                            6
   22c2 ED5391B8     ld (0xB891), de                          15
   22c6 3293B8       ld (0xB893), a                           10
   22c9 2294B8       ld (0xB894), hl                          13
   22cc ED43A0B8     ld (0xB8A0), bc                          15
   22d0 1122FD       ld de, 0xFD22                            6
   22d3 ED53A1B8     ld (0xB8A1), de                          15
   22d7 32A3B8       ld (0xB8A3), a                           10
   22da 22A4B8       ld (0xB8A4), hl                          13
   22dd ED43B0B8     ld (0xB8B0), bc                          15
   22e1 1121FD       ld de, 0xFD21                            6
   22e4 ED53B1B8     ld (0xB8B1), de                          15
   22e8 32B3B8       ld (0xB8B3), a                           10
   22eb 22B4B8       ld (0xB8B4), hl                          13
   22ee ED43D0B8     ld (0xB8D0), bc                          15
   22f2 1120FD       ld de, 0xFD20                            6
   22f5 ED53D1B8     ld (0xB8D1), de                          15
   22f9 32D3B8       ld (0xB8D3), a                           10
   22fc 22D4B8       ld (0xB8D4), hl                          13
   22ff ED43E0B8     ld (0xB8E0), bc                          15
   2303 111FFD       ld de, 0xFD1F                            6
   2306 ED53E1B8     ld (0xB8E1), de                          15
   230a 32E3B8       ld (0xB8E3), a                           10
   230d 22E4B8       ld (0xB8E4), hl                          13
   2310 ED43F0B8     ld (0xB8F0), bc                          15
   2314 111EFD       ld de, 0xFD1E                            6
   2317 ED53F1B8     ld (0xB8F1), de                          15
   231b 32F3B8       ld (0xB8F3), a                           10
   231e 22F4B8       ld (0xB8F4), hl                          13
   2321 ED4300BA     ld (0xBA00), bc                          15
   2325 111DFD       ld de, 0xFD1D                            6
   2328 ED5301BA     ld (0xBA01), de                          15
   232c 3203BA       ld (0xBA03), a                           10
   232f 2204BA       ld (0xBA04), hl                          13
   2332 ED4310BA     ld (0xBA10), bc                          15
   2336 111CFD       ld de, 0xFD1C                            6
   2339 ED5311BA     ld (0xBA11), de                          15
   233d 3213BA       ld (0xBA13), a                           10
   2340 2214BA       ld (0xBA14), hl                          13
   2343 ED4370B9     ld (0xB970), bc                          15
   2347 111BFD       ld de, 0xFD1B                            6
   234a ED5371B9     ld (0xB971), de                          15
   234e 3273B9       ld (0xB973), a                           10
   2351 2274B9       ld (0xB974), hl                          13
   2354 ED4380B9     ld (0xB980), bc                          15
   2358 111AFD       ld de, 0xFD1A                            6
   235b ED5381B9     ld (0xB981), de                          15
   235f 3283B9       ld (0xB983), a                           10
   2362 2284B9       ld (0xB984), hl                          13
   2365 ED4390B9     ld (0xB990), bc                          15
   2369 1119FD       ld de, 0xFD19                            6
   236c ED5391B9     ld (0xB991), de                          15
   2370 3293B9       ld (0xB993), a                           10
   2373 2294B9       ld (0xB994), hl                          13
   2376 ED43A0B9     ld (0xB9A0), bc                          15
   237a 1118FD       ld de, 0xFD18                            6
   237d ED53A1B9     ld (0xB9A1), de                          15
   2381 32A3B9       ld (0xB9A3), a                           10
   2384 22A4B9       ld (0xB9A4), hl                          13
   2387 ED43B0B9     ld (0xB9B0), bc                          15
   238b 1117FD       ld de, 0xFD17                            6
   238e ED53B1B9     ld (0xB9B1), de                          15
   2392 32B3B9       ld (0xB9B3), a                           10
   2395 22B4B9       ld (0xB9B4), hl                          13
   2398 ED43C0B9     ld (0xB9C0), bc                          15
   239c 1116FD       ld de, 0xFD16                            6
   239f ED53C1B9     ld (0xB9C1), de                          15
   23a3 32C3B9       ld (0xB9C3), a                           10
   23a6 22C4B9       ld (0xB9C4), hl                          13
   23a9 ED43D0B9     ld (0xB9D0), bc                          15
   23ad 1115FD       ld de, 0xFD15                            6
   23b0 ED53D1B9     ld (0xB9D1), de                          15
   23b4 32D3B9       ld (0xB9D3), a                           10
   23b7 22D4B9       ld (0xB9D4), hl                          13
   23ba C9           ret                                      8
[PROGRAM.LIB(331:1)]: #endasm
[STRING.C(1325:1)]: #asm __nodebug __root
[STRING.C(1326:1)]: _f_memset:: ; px contains dst
   23bb C406         ld hl, (sp + 0x06)                       9
   23bd 7D           ld a, l                                  2
   23be FDEE08       ld jkhl, (sp + 0x08)                     15
   23c1 FD5C         test jkhl                                4
   23c3 C8           ret z                                    2/8
   23c4 A3FF         ld bcde, -1                              4
   23c6 EDC6         add jkhl, bcde                           4
   23c8 FD5C         test jkhl                                4
   23ca 9E00         ld (px + 0), a                           8
   23cc C8           ret z                                    2/8
   23cd EDC6         add jkhl, bcde                           4
   23cf FD5C         test jkhl                                4
   23d1 9E01         ld (px + 1), a                           8
   23d3 C8           ret z                                    2/8
   23d4 91           ld bc, hl                                2
   23d5 B9           ex jk, hl                                2
   23d6 ED4C         test bc                                  4
   23d8 2001         jr nz, .start                            5
   23da 2B           dec hl                                   2
[STRING.C(1346:1)]: .start:
   23db 6DD7         ld pz, px                                4
   23dd 6D9C02       ld py, px + 2                            6
[STRING.C(1349:1)]: .loop:
   23e0 ED80         copy                                     7+7i
   23e2 4C           test hl                                  2
   23e3 2803         jr z, .done                              5
   23e5 2B           dec hl                                   2
   23e6 18F8         jr .loop                                 5
[STRING.C(1359:1)]: .done:
   23e8 6D77         ld px, pz                                4
   23ea C9           ret                                      8
[STRING.C(1362:1)]: #endasm
[STDIO_DK.C(295:2)]: return dkCharReady;
   23eb FDE1         pop iy                                   9
   23ed ED77         ld a, xpc                                4
   23ef F5           push af                                  10
   23f0 33           inc sp                                   2
   23f1 FDE5         push iy                                  12
   23f3 C79EEB01     ljp _stream_stdin_read                   10
[STDIO_DK.C(317:2)]: if (! bytes)
   23f7 FDE1         pop iy                                   9
   23f9 ED77         ld a, xpc                                4
   23fb F5           push af                                  10
   23fc 33           inc sp                                   2
   23fd FDE5         push iy                                  12
   23ff C7CAEB01     ljp _stream_stdout_write                 10
[UTIL.LIB(1152:1)]: #asm __nodebug __root
[UTIL.LIB(1153:1)]: _unexp_interrupt::
   2403 E5           push hl                                  10
   2404 BF           clr hl                                   2
   2405 E5           push hl                                  10
   2406 CD6F22       call _init_bad_interrupts                12
   2409 2702         add sp, 2                                4
   240b C400         ld hl, (sp + 0x00)                       9
   240d ED76         push ip                                  9
   240f ED76         push ip                                  9
   2411 D1           pop de                                   7
   2412 7B           ld a, e                                  2
   2413 E603         and 0x03                                 4
   2415 2802         jr z, .ip_level0                         5
   2417 ED5D         ipres                                    4
[UTIL.LIB(1169:1)]: .ip_level0:
   2419 CD7321       call exception                           12
   241c 2702         add sp, 2                                4
   241e C9           ret                                      8
[UTIL.LIB(1174:1)]: #endasm
*** Constant Data ***
   241f  88 13 00 00                                         
*** End Constant Data ***
[RCM43XX_BIOS.LIB(258:1)]: __root void _shared_port_init(){
   2423 EDA50800     push 0x0008                              15
   2427 EDA50C00     push 0x000C                              15
   242b BF           clr hl                                   2
   242c E5           push hl                                  10
   242d CDFB24       call _rcm43_spi_init                     12
   2430 2706         add sp, 6                                4
[RCM43XX_BIOS.LIB(264:4)]: memset(&_spiActiveDev, 0, sizeof(_spiActiveDev));
   2432 EDA50800     push 0x0008                              15
   2436 EDA50000     push 0x0000                              15
   243a 219CB0       ld hl, 0xB09C                            6
   243d E5           push hl                                  10
   243e CDE824       call _n_memset                           12
   2441 00           nop                                      2
   2442 2706         add sp, 6                                4
[RCM43XX_BIOS.LIB(267:4)]: _FlashInfo.writeMode = 2;
   2444 3E02         ld a, 0x02                               4
   2446 326DB4       ld (0xB46D), a                           10
[RCM43XX_BIOS.LIB(268:4)]: _FlashInfo.sectorSize = _sfb_dev.pagesize;
   2449 2A5BB4       ld hl, (0xB45B)                          11
   244c 2267B4       ld (0xB467), hl                          13
[RCM43XX_BIOS.LIB(269:2)]: _FlashInfo.numSectors = _sfb_dev.npages;
   244f 2A60B4       ld hl, (0xB460)                          11
   2452 2269B4       ld (0xB469), hl                          13
[RCM43XX_BIOS.LIB(271:1)]: }
[RCM43XX_BIOS.LIB(271:1)]: }
   2455 C9           ret                                      8
*** Constant Data ***
   2456  08 00                                             
*** End Constant Data ***
[RCM43XX_BIOS.LIB(308:1)]: #asm
[RCM43XX_BIOS.LIB(309:1)]: _SPIgetSemaphore::
   2458 ED5E         ipset 3                                  4
   245a 3A99B0       ld a, (0xB099)                           9
   245d 47           ld b, a                                  2
   245e E6FF         and 0xFF                                 4
   2460 7E           ld a, (hl)                               5
   2461 2033         jr nz, .spiGSdone                        5
   2463 3299B0       ld (0xB099), a                           10
   2466 AF           xor a                                    2
   2467 329AB0       ld (0xB09A), a                           10
   246a ED4B5624     ld bc, (0x2456)                          13
   246e 119CB0       ld de, 0xB09C                            6
   2471 EDB0         ldir                                     6+7i
   2473 ED5D         ipres                                    4
   2475 21A3B0       ld hl, 0xB0A3                            6
   2478 7E           ld a, (hl)                               5
   2479 D332D500     ioi ld (0x00D5), a                       11
   247d 21A2B0       ld hl, 0xB0A2                            6
   2480 7E           ld a, (hl)                               5
   2481 219BB0       ld hl, 0xB09B                            6
   2484 7FBE         cp (hl)                                  7
   2486 77           ld (hl), a                               6
   2487 2808         jr z, .spiGSdone1                        5
   2489 D332AB00     ioi ld (0x00AB), a                       11
   248d 0610         ld b, 0x10                               4
[RCM43XX_BIOS.LIB(339:1)]: .spiBCdelay:
   248f 10FE         djnz .spiBCdelay                         5
[RCM43XX_BIOS.LIB(341:1)]: .spiGSdone1:
   2491 2E00         ld l, 0x00                               4
   2493 2600         ld h, 0x00                               4
   2495 C9           ret                                      8
[RCM43XX_BIOS.LIB(346:1)]: .spiGSdone:
   2496 7FB8         cp b                                     4
   2498 2006         jr nz, .spiGSnotsame                     5
   249a 0600         ld b, 0x00                               4
   249c ED5D         ipres                                    4
   249e 182D         jr .spiGSdone2                           5
[RCM43XX_BIOS.LIB(353:1)]: .spiGSnotsame:
   24a0 219AB0       ld hl, 0xB09A                            6
   24a3 CB46         bit 0, (hl)                              7
   24a5 281D         jr z, .spiInitTimer                      5
   24a7 D9           exx                                      2
   24a8 943DB3       ld jkhl, (0xB33D)                        15
   24ab 93A4B0       ld bcde, (0xB0A4)                        15
   24ae EDD6         sub jkhl, bcde                           4
   24b0 931F24       ld bcde, (0x241F)                        15
   24b3 ED58         cp jkhl, bcde                            4
   24b5 D9           exx                                      2
   24b6 3813         jr c, .spiNoSemTimeOut                   5
   24b8 ED5D         ipres                                    4
[RCM43XX_BIOS.LIB(369:5)]: exit(-ETIME);             // Timed out
[RCM43XX_BIOS.LIB(369:5)]: exit(-ETIME);             // Timed out
   24ba 21C2FF       ld hl, 0xFFC2                            6
   24bd E5           push hl                                  10
   24be CD8125       call exit                                12
   24c1 00           nop                                      2
   24c2 2702         add sp, 2                                4
[RCM43XX_BIOS.LIB(369:18)]: // Timed out
[RCM43XX_BIOS.LIB(371:1)]: .spiInitTimer:  			      ; Init timeout test
   24c4 34           inc (hl)                                 8
   24c5 943DB3       ld jkhl, (0xB33D)                        15
   24c8 84A4B0       ld (0xB0A4), jkhl                        19
[RCM43XX_BIOS.LIB(375:1)]: .spiNoSemTimeOut:
   24cb ED5D         ipres                                    4
[RCM43XX_BIOS.LIB(378:1)]: .spiGSdone2:
   24cd 7F68         ld l, b                                  4
   24cf 2600         ld h, 0x00                               4
   24d1 C9           ret                                      8
[RCM43XX_BIOS.LIB(385:1)]: #endasm
[RCM43XX_BIOS.LIB(427:1)]: #asm
[RCM43XX_BIOS.LIB(428:1)]: _SPIfreeSemaphore::
   24d2 ED5E         ipset 3                                  4
   24d4 3A99B0       ld a, (0xB099)                           9
   24d7 7FBE         cp (hl)                                  7
   24d9 2007         jr nz, .spiFSdone                        5
   24db AF           xor a                                    2
   24dc 3299B0       ld (0xB099), a                           10
   24df 329CB0       ld (0xB09C), a                           10
[RCM43XX_BIOS.LIB(437:1)]: .spiFSdone:
   24e2 ED5D         ipres                                    4
   24e4 2600         ld h, 0x00                               4
   24e6 6F           ld l, a                                  2
   24e7 C9           ret                                      8
[RCM43XX_BIOS.LIB(445:1)]: #endasm
[STRING.C(1366:1)]: #asm __nodebug __root
[STRING.C(1367:1)]: _n_memset::
   24e8 DDEE04       ld bcde, (sp + 0x04)                     15
   24eb ED4C         test bc                                  4
   24ed C8           ret z                                    2/8
   24ee E5           push hl                                  10
   24ef 73           ld (hl), e                               6
   24f0 0B           dec bc                                   2
   24f1 ED4C         test bc                                  4
   24f3 2804         jr z, .memsetx                           5
   24f5 B1           ld de, hl                                2
   24f6 13           inc de                                   2
   24f7 EDB0         ldir                                     6+7i
[STRING.C(1386:1)]: .memsetx:
   24f9 E1           pop hl                                   7
   24fa C9           ret                                      8
[STRING.C(1389:1)]: #endasm
[RCM43XX_BIOS.LIB(490:1)]: __root int _rcm43_spi_init(int divisor, int _CR, int _ER){
[RCM43XX_BIOS.LIB(492:1)]: #asm
   24fb 3A85B4       ld a, (0xB485)                           9
   24fe E6DF         and 0xDF                                 4
   2500 F608         or 0x08                                  4
   2502 D3320802     ioi ld (0x0208), a                       11
   2506 3285B4       ld (0xB485), a                           10
   2509 3AE3B4       ld a, (0xB4E3)                           9
   250c F603         or 0x03                                  4
   250e D3320E00     ioi ld (0x000E), a                       11
   2512 32E3B4       ld (0xB4E3), a                           10
   2515 7D           ld a, l                                  2
   2516 D332AB00     ioi ld (0x00AB), a                       11
   251a 3E01         ld a, 0x01                               4
   251c D332A000     ioi ld (0x00A0), a                       11
   2520 AF           xor a                                    2
   2521 D3326500     ioi ld (0x0065), a                       11
   2525 3ADEB4       ld a, (0xB4DE)                           9
   2528 CBA7         res 4, a                                 4
   252a F610         or 0x10                                  4
   252c D3325500     ioi ld (0x0055), a                       11
   2530 32DEB4       ld (0xB4DE), a                           10
   2533 3A8EB4       ld a, (0xB48E)                           9
   2536 CBA7         res 4, a                                 4
   2538 F610         or 0x10                                  4
   253a 328EB4       ld (0xB48E), a                           10
   253d D3325100     ioi ld (0x0051), a                       11
   2541 3AAAB4       ld a, (0xB4AA)                           9
   2544 F601         or 0x01                                  4
   2546 32AAB4       ld (0xB4AA), a                           10
   2549 D3324700     ioi ld (0x0047), a                       11
   254d 214000       ld hl, 0x0040                            6
   2550 D3CB86       ioi res 0, (hl)                          12
   2553 215000       ld hl, 0x0050                            6
   2556 D3CBA6       ioi res 4, (hl)                          12
   2559 C404         ld hl, (sp + 0x04)                       9
   255b 7D           ld a, l                                  2
   255c D332D400     ioi ld (0x00D4), a                       11
   2560 C406         ld hl, (sp + 0x06)                       9
   2562 7D           ld a, l                                  2
   2563 D332D500     ioi ld (0x00D5), a                       11
   2567 D33AD300     ioi ld a, (0x00D3)                       11
   256b D33AD000     ioi ld a, (0x00D0)                       11
[RCM43XX_BIOS.LIB(537:1)]: #endasm
[RCM43XX_BIOS.LIB(538:7)]: _SPI_semaphore.owner = 0;    // Make SF first owner
   256f 3E00         ld a, 0x00                               4
   2571 3299B0       ld (0xB099), a                           10
[RCM43XX_BIOS.LIB(539:7)]: _SPI_semaphore.timerState = 0;
   2574 3E00         ld a, 0x00                               4
   2576 329AB0       ld (0xB09A), a                           10
   2579 BF           clr hl                                   2
   257a 6F           ld l, a                                  2
[RCM43XX_BIOS.LIB(540:1)]: }
[RCM43XX_BIOS.LIB(540:1)]: }
   257b C9           ret                                      8
[STDLIB.C(1131:1)]: void exit( int status)
[STDLIB.C(1133:13)]: exit_state = 0;
   257c BF           clr hl                                   2
   257d 2297B0       ld (0xB097), hl                          13
   2580 C9           ret                                      8
   2581 27FA         add sp, -6                               4
[STDLIB.C(1140:2)]: if (exit_state == 0)
   2583 2A97B0       ld hl, (0xB097)                          11
   2586 4800         cp hl, 0                                 4
   2588 EDCC         flag z, hl                               4
   258a CC           bool hl                                  2
   258b CA9325       jp z, 0x2593                             7
[STDLIB.C(1141:2)]: {
[STDLIB.C(1142:3)]: exit_state = 1;
   258e BF           clr hl                                   2
   258f 23           inc hl                                   2
   2590 2297B0       ld (0xB097), hl                          13
[STDLIB.C(1143:2)]: }
[STDLIB.C(1144:1)]: if (exit_state > 0)
[STDLIB.C(1144:2)]: if (exit_state > 0)
   2593 2A97B0       ld hl, (0xB097)                          11
   2596 4800         cp hl, 0                                 4
   2598 EDA4         flag gt, hl                              4
   259a CC           bool hl                                  2
   259b CAF025       jp z, 0x25F0                             7
[STDLIB.C(1145:2)]: {
[STDLIB.C(1147:4)]: if (exit_state <= _ATEXIT_FUNC_COUNT)
   259e 2A97B0       ld hl, (0xB097)                          11
   25a1 4805         cp hl, 5                                 4
   25a3 EDB4         flag lt, hl                              4
   25a5 CC           bool hl                                  2
   25a6 CAEB25       jp z, 0x25EB                             7
[STDLIB.C(1148:4)]: {
[STDLIB.C(1150:5)]: f = &_atexit_func_table[_ATEXIT_FUNC_COUNT - exit_state];
   25a9 218FB0       ld hl, 0xB08F                            6
   25ac E5           push hl                                  10
   25ad 2A97B0       ld hl, (0xB097)                          11
   25b0 B1           ld de, hl                                2
   25b1 210400       ld hl, 0x0004                            6
   25b4 55           sub hl, de                               2
   25b5 29           add hl, hl                               2
   25b6 B1           ld de, hl                                2
   25b7 E1           pop hl                                   7
   25b8 19           add hl, de                               2
   25b9 D404         ld (sp + 0x04), hl                       11
[STDLIB.C(1151:1)]: while (f >= _atexit_func_table)
[STDLIB.C(1151:5)]: while (f >= _atexit_func_table)
   25bb C404         ld hl, (sp + 0x04)                       9
   25bd E5           push hl                                  10
   25be 218FB0       ld hl, 0xB08F                            6
   25c1 B1           ld de, hl                                2
   25c2 E1           pop hl                                   7
   25c3 ED48         cp hl, de                                4
   25c5 EDD4         flag nc, hl                              4
   25c7 CC           bool hl                                  2
   25c8 CAEB25       jp z, 0x25EB                             7
[STDLIB.C(1152:5)]: {
[STDLIB.C(1155:6)]: ++exit_state;
   25cb 2A97B0       ld hl, (0xB097)                          11
   25ce 23           inc hl                                   2
   25cf 2297B0       ld (0xB097), hl                          13
[STDLIB.C(1156:6)]: if (*f)
   25d2 C404         ld hl, (sp + 0x04)                       9
   25d4 DDE400       ld hl, (hl + 0)                          11
   25d7 CC           bool hl                                  2
   25d8 CAE225       jp z, 0x25E2                             7
[STDLIB.C(1157:6)]: {
[STDLIB.C(1158:7)]: (*f)();
   25db C404         ld hl, (sp + 0x04)                       9
   25dd DDE400       ld hl, (hl + 0)                          11
   25e0 EDEA         call (hl)                                12
[STDLIB.C(1159:6)]: }
[STDLIB.C(1160:1)]: --f;
[STDLIB.C(1160:6)]: --f;
   25e2 C404         ld hl, (sp + 0x04)                       9
   25e4 2B           dec hl                                   2
   25e5 2B           dec hl                                   2
   25e6 D404         ld (sp + 0x04), hl                       11
[STDLIB.C(1161:5)]: }
   25e8 C3BB25       jp 0x25BB                                7
[STDLIB.C(1161:1)]: }
[STDLIB.C(1162:4)]: }
[STDLIB.C(1164:1)]: exit_state = -1;
[STDLIB.C(1164:3)]: exit_state = -1;
   25eb BF           clr hl                                   2
   25ec 2B           dec hl                                   2
   25ed 2297B0       ld (0xB097), hl                          13
[STDLIB.C(1165:2)]: }
[STDLIB.C(1167:1)]: if (exit_state >= -FOPEN_MAX)		// same as (-exit_state <= FOPEN_MAX)
[STDLIB.C(1167:2)]: if (exit_state >= -FOPEN_MAX)		// same as (-exit_state <= FOPEN_MAX)
   25f0 2A97B0       ld hl, (0xB097)                          11
   25f3 48F7         cp hl, -9                                4
   25f5 EDA4         flag gt, hl                              4
   25f7 CC           bool hl                                  2
   25f8 CA6E26       jp z, 0x266E                             7
[STDLIB.C(1168:2)]: {
[STDLIB.C(1170:3)]: stream = &_stdio_files[FOPEN_MAX + exit_state];
   25fb ED1C087D1000 ld px, 0x00107D08                        12
   2601 EDD5         push px                                  18
   2603 2A97B0       ld hl, (0xB097)                          11
   2606 A308         ld bcde, 8                               4
   2608 19           add hl, de                               2
   2609 B1           ld de, hl                                2
   260a 42           rl hl                                    2
   260b ED62         sbc hl, hl                               4
   260d 91           ld bc, hl                                2
   260e DDF5         push bcde                                18
   2610 A33F         ld bcde, 63                              4
   2612 CDCC03       call .dummyLMUL                          12
   2615 FDF1         pop jkhl                                 13
   2617 EDC6         add jkhl, bcde                           4
   2619 FD9D         ld px, jkhl                              4
   261b ED1500       ld (sp + 0x00), px                       19
   261e DDDD         ld bcde, px                              4
[STDLIB.C(1171:1)]: while (stream >= _stdio_files)
[STDLIB.C(1171:3)]: while (stream >= _stdio_files)
   2620 FDEE00       ld jkhl, (sp + 0x00)                     15
   2623 ED1C087D1000 ld px, 0x00107D08                        12
   2629 DDDD         ld bcde, px                              4
   262b ED58         cp jkhl, bcde                            4
   262d EDD4         flag nc, hl                              4
   262f CC           bool hl                                  2
   2630 CA6E26       jp z, 0x266E                             7
[STDLIB.C(1172:3)]: {
[STDLIB.C(1173:4)]: --exit_state;	// if fclose() calls exit, we'll resume at the next file
   2633 2A97B0       ld hl, (0xB097)                          11
   2636 2B           dec hl                                   2
   2637 2297B0       ld (0xB097), hl                          13
[STDLIB.C(1174:4)]: if ((stream->flags & (_FILE_FLAG_USED | _FILE_FLAG_OPEN))
   263a DDEE00       ld bcde, (sp + 0x00)                     15
   263d DD9D         ld px, bcde                              4
   263f 9500         ld hl, (px + 0)                          9
   2641 1100C0       ld de, 0xC000                            6
   2644 DC           and hl, de                               2
   2645 1100C0       ld de, 0xC000                            6
   2648 ED48         cp hl, de                                4
   264a EDCC         flag z, hl                               4
   264c CC           bool hl                                  2
   264d CA5E26       jp z, 0x265E                             7
[STDLIB.C(1176:4)]: {
[STDLIB.C(1177:5)]: fclose( stream);
   2650 BF           clr hl                                   2
   2651 39           add hl, sp                               2
   2652 DD1A         ld bcde, (hl)                            14
   2654 DD9D         ld px, bcde                              4
   2656 EDD5         push px                                  18
   2658 CF36EF01     lcall fclose                             19
   265c 2704         add sp, 4                                4
[STDLIB.C(1178:4)]: }
[STDLIB.C(1179:1)]: --stream;
[STDLIB.C(1179:4)]: --stream;
   265e ED1400       ld px, (sp + 0x00)                       15
   2661 6D5CC1       ld px, px + -63                          6
   2664 ED1500       ld (sp + 0x00), px                       19
   2667 FDDD         ld jkhl, px                              4
   2669 DDDD         ld bcde, px                              4
[STDLIB.C(1180:3)]: }
   266b C32026       jp 0x2620                                7
[STDLIB.C(1180:1)]: }
[STDLIB.C(1181:2)]: }
[STDLIB.C(1189:1)]: #asm
[STDLIB.C(1189:1)]: #asm
   266e 2706         add sp, 6                                4
   2670 C402         ld hl, (sp + 0x02)                       9
   2672 C37826       jp _sys_exit                             7
[STDLIB.C(1193:1)]: #endasm
[STDLIB.C(1194:1)]: }
[STDLIB.C(1194:1)]: }
   2675 2706         add sp, 6                                4
   2677 C9           ret                                      8
[SYS.LIB(47:1)]: #asm __nodebug
[SYS.LIB(55:1)]: _sys_exit::
   2678 228BB0       ld (0xB08B), hl                          13
   267b ED54         ex (sp), hl                              15
   267d 228DB0       ld (0xB08D), hl                          13
   2680 2704         add sp, 4                                4
   2682 CD5B22       call _BiosStkSwitch                      12
   2685 2702         add sp, 2                                4
   2687 2A8DB0       ld hl, (0xB08D)                          11
   268a D9           exx                                      2
   268b 2A8BB0       ld hl, (0xB08B)                          11
   268e ED77         ld a, xpc                                4
   2690 C3BC01       jp __xexit                               7
[SYS.LIB(67:1)]: #endasm
[STRING.C(67:1)]: #asm __nodebug __root
[STRING.C(68:1)]: _f_memcpy::
[STRING.C(69:1)]: _f_memmove::
[STDLIB.C(1051:12)]: _atexit_func_table[_ATEXIT_FUNC_COUNT] = { NULL };
   2693 FDEE0A       ld jkhl, (sp + 0x0A)                     15
   2696 FD5C         test jkhl                                4
   2698 C8           ret z                                    2/8
   2699 6DD7         ld pz, px                                4
   269b ED1406       ld px, (sp + 0x06)                       15
   269e FDFD         ld jkhl, pz                              4
   26a0 6DB7         ld py, pz                                4
   26a2 DDDD         ld bcde, px                              4
   26a4 ED58         cp jkhl, bcde                            4
   26a6 2839         jr z, .nomov                             5
   26a8 A012         jr gt, .movbak                           5
   26aa FDEE0A       ld jkhl, (sp + 0x0A)                     15
   26ad 91           ld bc, hl                                2
   26ae B9           ex jk, hl                                2
   26af ED4C         test bc                                  4
   26b1 2001         jr nz, .contf                            5
   26b3 2B           dec hl                                   2
[STRING.C(89:1)]: .contf:
   26b4 ED80         copy                                     7+7i
   26b6 4C           test hl                                  2
   26b7 2828         jr z, .nomov                             5
   26b9 2B           dec hl                                   2
   26ba 18F8         jr .contf                                5
[STRING.C(100:1)]: .movbak:
   26bc DDEE0A       ld bcde, (sp + 0x0A)                     15
   26bf FDDD         ld jkhl, px                              4
   26c1 EDC6         add jkhl, bcde                           4
   26c3 FD9D         ld px, jkhl                              4
   26c5 6D5CFF       ld px, px + -1                           6
   26c8 FDED         ld jkhl, py                              4
   26ca EDC6         add jkhl, bcde                           4
   26cc FDAD         ld py, jkhl                              4
   26ce 6DACFF       ld py, py + -1                           6
   26d1 B4           ex jkhl, bcde                            2
   26d2 91           ld bc, hl                                2
   26d3 B9           ex jk, hl                                2
   26d4 ED4C         test bc                                  4
   26d6 2001         jr nz, .contb                            5
   26d8 2B           dec hl                                   2
[STRING.C(117:1)]: .contb:
   26d9 ED88         copyr                                    7+7i
   26db 4C           test hl                                  2
   26dc 2803         jr z, .nomov                             5
   26de 2B           dec hl                                   2
   26df 18F8         jr .contb                                5
[STRING.C(127:1)]: .nomov:
   26e1 6D77         ld px, pz                                4
   26e3 C9           ret                                      8
[STRING.C(130:1)]: #endasm
   26e4 C7A7E003     ljp 03:e0a7                              10
   26e8 C704EF02     ljp 02:ef04                              10
   26ec C7AAE003     ljp 03:e0aa                              10
[UTIL.LIB(153:1)]: #asm __nodebug
[UTIL.LIB(170:1)]: sspixffndbg_::
   26f0 FDE1         pop iy                                   9
   26f2 39           add hl, sp                               2
   26f3 F9           ld sp, hl                                2
   26f4 FDE5         push iy                                  12
   26f6 D9           exx                                      2
   26f7 C30427       jp _fentry                               7
[UTIL.LIB(224:1)]: rspixffndbg_::
   26fa FDE1         pop iy                                   9
   26fc 39           add hl, sp                               2
   26fd F9           ld sp, hl                                2
   26fe FDE5         push iy                                  12
   2700 D9           exx                                      2
   2701 C32227       jp _fexit                                7
[UTIL.LIB(263:1)]: #endasm
[CSUPPORT.LIB(374:1)]: #asm
[CSUPPORT.LIB(375:1)]: _fentry::
   2704 E5           push hl                                  10
   2705 F5           push af                                  10
   2706 21B0B3       ld hl, 0xB3B0                            6
   2709 CB5E         bit 3, (hl)                              7
   270b 2812         jr z, ._fent1                            5
   270d 21ACB3       ld hl, 0xB3AC                            6
   2710 CB4E         bit 1, (hl)                              7
   2712 280B         jr z, ._fent1                            5
   2714 2A54B3       ld hl, (0xB354)                          11
   2717 23           inc hl                                   2
   2718 2254B3       ld (0xB354), hl                          13
   271b CF00E301     lcall dkDisableRST28                     19
[CSUPPORT.LIB(423:1)]: ._fent1:
   271f F1           pop af                                   7
   2720 E1           pop hl                                   7
   2721 C9           ret                                      8
[CSUPPORT.LIB(436:1)]: _fexit::
   2722 D9           exx                                      2
   2723 E5           push hl                                  10
   2724 F5           push af                                  10
   2725 3AB0B3       ld a, (0xB3B0)                           9
   2728 CB5F         bit 3, a                                 4
   272a 281C         jr z, ._fx2                              5
   272c 3AACB3       ld a, (0xB3AC)                           9
   272f CB4F         bit 1, a                                 4
   2731 2815         jr z, ._fx2                              5
   2733 2A54B3       ld hl, (0xB354)                          11
   2736 7D           ld a, l                                  2
   2737 7FB4         or h                                     4
   2739 2809         jr z, ._fx1                              5
   273b 2B           dec hl                                   2
   273c 2254B3       ld (0xB354), hl                          13
   273f 7D           ld a, l                                  2
   2740 7FB4         or h                                     4
   2742 2004         jr nz, ._fx2                             5
[CSUPPORT.LIB(478:1)]: ._fx1:
   2744 CFF9E201     lcall dkEnableRST28                      19
[CSUPPORT.LIB(492:1)]: ._fx2:
   2748 F1           pop af                                   7
   2749 E1           pop hl                                   7
   274a D9           exx                                      2
   274b C9           ret                                      8
[CSUPPORT.LIB(497:1)]: #endasm
[UTIL.LIB(770:1)]: #asm __nodebug
[UTIL.LIB(772:1)]: swap4_::
   274c D9           exx                                      2
   274d E1           pop hl                                   7
   274e DDF1         pop bcde                                 13
   2750 D9           exx                                      2
   2751 DDF5         push bcde                                18
   2753 D9           exx                                      2
   2754 E9           jp (hl)                                  4
[UTIL.LIB(780:1)]: #endasm
[UTIL.LIB(784:1)]: #asm __nodebug
[UTIL.LIB(786:1)]: swaps_::
   2755 39           add hl, sp                               2
   2756 7E           ld a, (hl)                               5
   2757 73           ld (hl), e                               6
   2758 5F           ld e, a                                  2
   2759 23           inc hl                                   2
   275a 7E           ld a, (hl)                               5
   275b 72           ld (hl), d                               6
   275c 57           ld d, a                                  2
   275d 23           inc hl                                   2
   275e 7E           ld a, (hl)                               5
   275f 71           ld (hl), c                               6
   2760 4F           ld c, a                                  2
   2761 23           inc hl                                   2
   2762 7E           ld a, (hl)                               5
   2763 70           ld (hl), b                               6
   2764 47           ld b, a                                  2
   2765 C9           ret                                      8
[UTIL.LIB(804:1)]: #endasm
[VDRIVER.LIB(92:1)]: #asm
[VDRIVER.LIB(93:1)]: hitwd::
   2766 3E5A         ld a, 0x5A                               4
   2768 D3320800     ioi ld (0x0008), a                       11
   276c C9           ret                                      8
[VDRIVER.LIB(97:1)]: #endasm
[VDRIVER.LIB(114:4)]: topVd = 0;
   276d ED77         ld a, xpc                                4
   276f F5           push af                                  10
   2770 CDAC14       call 0x14AC                              12
   2773 CD7C25       call 0x257C                              12
   2776 CF18EF01     lcall 01:ef18                            19
   277a CF0DE302     lcall 02:e30d                            19
   277e CFACE302     lcall 02:e3ac                            19
   2782 CFCDEC00     lcall slicefsp_init                      19
   2786 CFBBE803     lcall vwdogInit                          19
   278a F1           pop af                                   7
   278b ED67         ld xpc, a                                4
   278d C9           ret                                      8
   278e ED77         ld a, xpc                                4
   2790 F5           push af                                  10
   2791 F1           pop af                                   7
   2792 ED67         ld xpc, a                                4
   2794 C9           ret                                      8
   2795 ED77         ld a, xpc                                4
   2797 F5           push af                                  10
   2798 F1           pop af                                   7
   2799 ED67         ld xpc, a                                4
   279b C9           ret                                      8
   279c ED77         ld a, xpc                                4
   279e F5           push af                                  10
   279f F1           pop af                                   7
   27a0 ED67         ld xpc, a                                4
   27a2 C9           ret                                      8
*** Constant Data ***
   27a3  0E 00 01 02 00 00 00 00 00 00 86 28 00 00 00 60	           (   `
   27b3  00 00 04 02 62 B0 00 00 62 B0 9E 07 00 00 00 58	    b   b      X
   27c3  00 00 08 02 00 B8 00 00 00 B8 00 02 00 00 00 02	                
   27d3  00 00 08 02 00 BA 00 00 00 BA 00 01 00 00 00 01	                
   27e3  00 00 03 02 00 BB 00 00 00 BB 00 03 00 00 00 03	                
   27f3  00 00 04 02 F8 BF 00 00 F8 BF 08 00 00 00 00 02	                
   2803  00 00 08 02 00 C0 00 00 00 E0 00 20 00 00 00 20	                
   2813  00 00 02 02 00 E0 00 00 00 E0 7E 3A 00 00 00 00	          ~:    
   2823  0E 00 05 02 00 F0 0F 00 00 F0 00 00 00                       
*** End Constant Data ***
*** Constant Data ***
   2830  00 00 10 01 00 08 02 00 F0 0F 00 00 E0 00 10 00	                
   2840  00 00 10 00 00 05 01 08 7D 10 00 08 ED F8 02 00	        }       
   2850  00 00 80 00 00 04 01 00 90 10 00 00 D0 00 00 00	                
   2860  00 00 10 00 00 05 01 00 B0 17 00 00 F0 00 00 00	                
   2870  00 00 20 07 00 08 01 00 B0 17 00 00 E0 00 50                  P
*** End Constant Data ***
*** Constant Data ***
   287f  00 00 00 50 00 00                                  P  
*** End Constant Data ***

*** Begin Xmem ***
Start: 0xe750
End: 0x11a7d
[LCD.C(16:1)]: 
000:e750 D9           exx                                      2
000:e751 21FCFF       ld hl, 0xFFFC                            6
000:e754 CDF026       call sspixffndbg_                        12
000:e757 00           nop                                      2
000:e758 EF           rst 0x28                                 10
[LCD.C(19:1)]: for(i=0;i<val;i++)
000:e759 BF           clr hl                                   2
000:e75a D402         ld (sp + 0x02), hl                       11
[LCD.C(19:1)]: for(i=0;i<val;i++)
000:e75c EF           rst 0x28                                 10
[LCD.C(19:9)]: i<val;i++)
000:e75d C407         ld hl, (sp + 0x07)                       9
000:e75f B1           ld de, hl                                2
000:e760 C402         ld hl, (sp + 0x02)                       9
000:e762 ED48         cp hl, de                                4
000:e764 EDB4         flag lt, hl                              4
000:e766 CC           bool hl                                  2
000:e767 CA9AE7       jp z, 0xE79A                             7
000:e76a C376E7       jp 0xE776                                7
[LCD.C(19:1)]: for(i=0;i<val;i++)
000:e76d EF           rst 0x28                                 10
[LCD.C(19:15)]: i++)
000:e76e C402         ld hl, (sp + 0x02)                       9
000:e770 23           inc hl                                   2
000:e771 D402         ld (sp + 0x02), hl                       11
000:e773 C35CE7       jp 0xE75C                                7
[LCD.C(19:1)]: for(i=0;i<val;i++)
[LCD.C(20:1)]: {
000:e776 EF           rst 0x28                                 10
[LCD.C(21:1)]: for(j=0;j<600;j++)
000:e777 BF           clr hl                                   2
000:e778 D400         ld (sp + 0x00), hl                       11
[LCD.C(21:1)]: for(j=0;j<600;j++)
000:e77a EF           rst 0x28                                 10
[LCD.C(21:9)]: j<600;j++)
000:e77b C400         ld hl, (sp + 0x00)                       9
000:e77d 115802       ld de, 0x0258                            6
000:e780 ED48         cp hl, de                                4
000:e782 EDB4         flag lt, hl                              4
000:e784 CC           bool hl                                  2
000:e785 CA97E7       jp z, 0xE797                             7
000:e788 C394E7       jp 0xE794                                7
[LCD.C(21:1)]: for(j=0;j<600;j++)
000:e78b EF           rst 0x28                                 10
[LCD.C(21:15)]: j++)
000:e78c C400         ld hl, (sp + 0x00)                       9
000:e78e 23           inc hl                                   2
000:e78f D400         ld (sp + 0x00), hl                       11
000:e791 C37AE7       jp 0xE77A                                7
[LCD.C(21:1)]: for(j=0;j<600;j++)
[LCD.C(22:1)]: {
[LCD.C(23:1)]: }
000:e794 C38BE7       jp 0xE78B                                7
[LCD.C(23:1)]: }
[LCD.C(24:1)]: }
000:e797 C36DE7       jp 0xE76D                                7
[LCD.C(24:1)]: }
000:e79a EF           rst 0x28                                 10
[LCD.C(25:1)]: }
[LCD.C(25:1)]: }
000:e79b D9           exx                                      2
000:e79c 210400       ld hl, 0x0004                            6
000:e79f CDFA26       call rspixffndbg_                        12
000:e7a2 00           nop                                      2
000:e7a3 ED45         lret                                     13
[LCD.C(27:1)]: void main(void)
000:e7a5 D9           exx                                      2
000:e7a6 BF           clr hl                                   2
000:e7a7 CDF026       call sspixffndbg_                        12
000:e7aa 00           nop                                      2
000:e7ab EF           rst 0x28                                 10
[LCD.C(29:1)]: WrPortI(SPCR, &SPCRShadow, 0x84);
000:e7ac 218400       ld hl, 0x0084                            6
000:e7af 7D           ld a, l                                  2
000:e7b0 ED56         ipset 1                                  4
000:e7b2 D3322400     ioi ld (0x0024), a                       11
000:e7b6 32B9B4       ld (0xB4B9), a                           10
000:e7b9 ED5D         ipres                                    4
000:e7bb EF           rst 0x28                                 10
[LCD.C(30:1)]: MSDELAY(10);
000:e7bc 210A00       ld hl, 0x000A                            6
000:e7bf E5           push hl                                  10
000:e7c0 CF50E700     lcall MSDELAY                            19
000:e7c4 2702         add sp, 2                                4
000:e7c6 EF           rst 0x28                                 10
[LCD.C(31:1)]: WrPortI(PADR, &PADRShadow,0xFF);      //  FF on PA.
000:e7c7 21FF00       ld hl, 0x00FF                            6
000:e7ca 7D           ld a, l                                  2
000:e7cb ED56         ipset 1                                  4
000:e7cd D3323000     ioi ld (0x0030), a                       11
000:e7d1 32E1B4       ld (0xB4E1), a                           10
000:e7d4 ED5D         ipres                                    4
000:e7d6 EF           rst 0x28                                 10
[LCD.C(32:1)]: MSDELAY(10);
000:e7d7 210A00       ld hl, 0x000A                            6
000:e7da E5           push hl                                  10
000:e7db CF50E700     lcall MSDELAY                            19
000:e7df 2702         add sp, 2                                4
000:e7e1 EF           rst 0x28                                 10
[LCD.C(33:1)]: WrPortI(PBDDR, &PBDDRShadow, 0xFF);
000:e7e2 21FF00       ld hl, 0x00FF                            6
000:e7e5 7D           ld a, l                                  2
000:e7e6 ED56         ipset 1                                  4
000:e7e8 D3324700     ioi ld (0x0047), a                       11
000:e7ec 32AAB4       ld (0xB4AA), a                           10
000:e7ef ED5D         ipres                                    4
000:e7f1 EF           rst 0x28                                 10
[LCD.C(34:1)]: MSDELAY(10);
000:e7f2 210A00       ld hl, 0x000A                            6
000:e7f5 E5           push hl                                  10
000:e7f6 CF50E700     lcall MSDELAY                            19
000:e7fa 2702         add sp, 2                                4
000:e7fc EF           rst 0x28                                 10
[LCD.C(35:1)]: WrPortI(PBDR, &PBDRShadow, 0x40);
000:e7fd 214000       ld hl, 0x0040                            6
000:e800 7D           ld a, l                                  2
000:e801 ED56         ipset 1                                  4
000:e803 D3324000     ioi ld (0x0040), a                       11
000:e807 32E0B4       ld (0xB4E0), a                           10
000:e80a ED5D         ipres                                    4
000:e80c EF           rst 0x28                                 10
[LCD.C(37:1)]: WrPortI(PADR,&PADRShadow,0x00);
000:e80d BF           clr hl                                   2
000:e80e 7D           ld a, l                                  2
000:e80f ED56         ipset 1                                  4
000:e811 D3323000     ioi ld (0x0030), a                       11
000:e815 32E1B4       ld (0xB4E1), a                           10
000:e818 ED5D         ipres                                    4
000:e81a EF           rst 0x28                                 10
[LCD.C(38:1)]: MSDELAY(10);
000:e81b 210A00       ld hl, 0x000A                            6
000:e81e E5           push hl                                  10
000:e81f CF50E700     lcall MSDELAY                            19
000:e823 2702         add sp, 2                                4
000:e825 EF           rst 0x28                                 10
[LCD.C(39:1)]: WrPortI(PBDR,&PBDRShadow,0x3C);
000:e826 213C00       ld hl, 0x003C                            6
000:e829 7D           ld a, l                                  2
000:e82a ED56         ipset 1                                  4
000:e82c D3324000     ioi ld (0x0040), a                       11
000:e830 32E0B4       ld (0xB4E0), a                           10
000:e833 ED5D         ipres                                    4
000:e835 EF           rst 0x28                                 10
[LCD.C(40:1)]: MSDELAY(10);
000:e836 210A00       ld hl, 0x000A                            6
000:e839 E5           push hl                                  10
000:e83a CF50E700     lcall MSDELAY                            19
000:e83e 2702         add sp, 2                                4
000:e840 EF           rst 0x28                                 10
[LCD.C(41:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:e841 BF           clr hl                                   2
000:e842 7D           ld a, l                                  2
000:e843 ED56         ipset 1                                  4
000:e845 D3324000     ioi ld (0x0040), a                       11
000:e849 32E0B4       ld (0xB4E0), a                           10
000:e84c ED5D         ipres                                    4
000:e84e EF           rst 0x28                                 10
[LCD.C(42:1)]: MSDELAY(100);
000:e84f 216400       ld hl, 0x0064                            6
000:e852 E5           push hl                                  10
000:e853 CF50E700     lcall MSDELAY                            19
000:e857 2702         add sp, 2                                4
000:e859 EF           rst 0x28                                 10
[LCD.C(43:1)]: BitWrPortI(PADR,&PADRShadow,0,0);
000:e85a 3EFE         ld a, 0xFE                               4
000:e85c ED56         ipset 1                                  4
000:e85e 21E1B4       ld hl, 0xB4E1                            6
000:e861 7FA6         and (hl)                                 7
000:e863 77           ld (hl), a                               6
000:e864 D3323000     ioi ld (0x0030), a                       11
000:e868 ED5D         ipres                                    4
000:e86a EF           rst 0x28                                 10
[LCD.C(44:1)]: MSDELAY(10);
000:e86b 210A00       ld hl, 0x000A                            6
000:e86e E5           push hl                                  10
000:e86f CF50E700     lcall MSDELAY                            19
000:e873 2702         add sp, 2                                4
000:e875 EF           rst 0x28                                 10
[LCD.C(45:1)]: WrPortI(PBDR,&PBDRShadow,0x10);          // RW=0
000:e876 211000       ld hl, 0x0010                            6
000:e879 7D           ld a, l                                  2
000:e87a ED56         ipset 1                                  4
000:e87c D3324000     ioi ld (0x0040), a                       11
000:e880 32E0B4       ld (0xB4E0), a                           10
000:e883 ED5D         ipres                                    4
000:e885 EF           rst 0x28                                 10
[LCD.C(46:1)]: MSDELAY(10);
000:e886 210A00       ld hl, 0x000A                            6
000:e889 E5           push hl                                  10
000:e88a CF50E700     lcall MSDELAY                            19
000:e88e 2702         add sp, 2                                4
000:e890 EF           rst 0x28                                 10
[LCD.C(47:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:e891 BF           clr hl                                   2
000:e892 7D           ld a, l                                  2
000:e893 ED56         ipset 1                                  4
000:e895 D3324000     ioi ld (0x0040), a                       11
000:e899 32E0B4       ld (0xB4E0), a                           10
000:e89c ED5D         ipres                                    4
000:e89e EF           rst 0x28                                 10
[LCD.C(48:1)]: MSDELAY(10);
000:e89f 210A00       ld hl, 0x000A                            6
000:e8a2 E5           push hl                                  10
000:e8a3 CF50E700     lcall MSDELAY                            19
000:e8a7 2702         add sp, 2                                4
000:e8a9 EF           rst 0x28                                 10
[LCD.C(49:1)]: BitWrPortI(PADR,&PADRShadow,1,2);
000:e8aa 3E04         ld a, 0x04                               4
000:e8ac ED56         ipset 1                                  4
000:e8ae 21E1B4       ld hl, 0xB4E1                            6
000:e8b1 7FB6         or (hl)                                  7
000:e8b3 77           ld (hl), a                               6
000:e8b4 D3323000     ioi ld (0x0030), a                       11
000:e8b8 ED5D         ipres                                    4
000:e8ba EF           rst 0x28                                 10
[LCD.C(50:1)]: MSDELAY(10);
000:e8bb 210A00       ld hl, 0x000A                            6
000:e8be E5           push hl                                  10
000:e8bf CF50E700     lcall MSDELAY                            19
000:e8c3 2702         add sp, 2                                4
000:e8c5 EF           rst 0x28                                 10
[LCD.C(51:1)]: LCDINIT();
000:e8c6 CF9EEB00     lcall LCDINIT                            19
000:e8ca EF           rst 0x28                                 10
[LCD.C(52:1)]: send_string("**LCD IS READY**");
000:e8cb 219B14       ld hl, 0x149B                            6
000:e8ce E5           push hl                                  10
000:e8cf CF1AEC00     lcall send_string                        19
000:e8d3 2702         add sp, 2                                4
000:e8d5 EF           rst 0x28                                 10
[LCD.C(53:1)]: LCDCOMMAND(0xC0);
000:e8d6 21C000       ld hl, 0x00C0                            6
000:e8d9 E5           push hl                                  10
000:e8da CF00E900     lcall LCDCOMMAND                         19
000:e8de 2702         add sp, 2                                4
000:e8e0 EF           rst 0x28                                 10
[LCD.C(54:1)]: send_string("****************");
000:e8e1 218A14       ld hl, 0x148A                            6
000:e8e4 E5           push hl                                  10
000:e8e5 CF1AEC00     lcall send_string                        19
000:e8e9 2702         add sp, 2                                4
000:e8eb EF           rst 0x28                                 10
[LCD.C(55:1)]: while(1)
000:e8ec 00           nop                                      2
[LCD.C(55:1)]: while(1)
000:e8ed EF           rst 0x28                                 10
[LCD.C(55:7)]: 1)
000:e8ee BF           clr hl                                   2
000:e8ef 23           inc hl                                   2
000:e8f0 CC           bool hl                                  2
000:e8f1 CAF7E8       jp z, 0xE8F7                             7
[LCD.C(56:1)]: {
[LCD.C(57:1)]: }
000:e8f4 C3EDE8       jp 0xE8ED                                7
[LCD.C(57:1)]: }
000:e8f7 EF           rst 0x28                                 10
[LCD.C(58:1)]: }
[LCD.C(58:1)]: }
000:e8f8 D9           exx                                      2
000:e8f9 BF           clr hl                                   2
000:e8fa CDFA26       call rspixffndbg_                        12
000:e8fd 00           nop                                      2
000:e8fe ED45         lret                                     13
[LCD.C(60:1)]: void LCDCOMMAND(unsigned char value)
000:e900 D9           exx                                      2
000:e901 BF           clr hl                                   2
000:e902 CDF026       call sspixffndbg_                        12
000:e905 00           nop                                      2
000:e906 EF           rst 0x28                                 10
[LCD.C(62:1)]: WrPortI(PADR,&PADRShadow,value);
000:e907 210300       ld hl, 0x0003                            6
000:e90a 39           add hl, sp                               2
000:e90b 7E           ld a, (hl)                               5
000:e90c ED56         ipset 1                                  4
000:e90e D3323000     ioi ld (0x0030), a                       11
000:e912 32E1B4       ld (0xB4E1), a                           10
000:e915 ED5D         ipres                                    4
000:e917 EF           rst 0x28                                 10
[LCD.C(63:1)]: MSDELAY(10);
000:e918 210A00       ld hl, 0x000A                            6
000:e91b E5           push hl                                  10
000:e91c CF50E700     lcall MSDELAY                            19
000:e920 2702         add sp, 2                                4
000:e922 EF           rst 0x28                                 10
[LCD.C(64:1)]: WrPortI(PBDR,&PBDRShadow,0x04);          //  data
000:e923 210400       ld hl, 0x0004                            6
000:e926 7D           ld a, l                                  2
000:e927 ED56         ipset 1                                  4
000:e929 D3324000     ioi ld (0x0040), a                       11
000:e92d 32E0B4       ld (0xB4E0), a                           10
000:e930 ED5D         ipres                                    4
000:e932 EF           rst 0x28                                 10
[LCD.C(65:1)]: MSDELAY(10);
000:e933 210A00       ld hl, 0x000A                            6
000:e936 E5           push hl                                  10
000:e937 CF50E700     lcall MSDELAY                            19
000:e93b 2702         add sp, 2                                4
000:e93d EF           rst 0x28                                 10
[LCD.C(66:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:e93e BF           clr hl                                   2
000:e93f 7D           ld a, l                                  2
000:e940 ED56         ipset 1                                  4
000:e942 D3324000     ioi ld (0x0040), a                       11
000:e946 32E0B4       ld (0xB4E0), a                           10
000:e949 ED5D         ipres                                    4
000:e94b EF           rst 0x28                                 10
[LCD.C(67:1)]: MSDELAY(10);
000:e94c 210A00       ld hl, 0x000A                            6
000:e94f E5           push hl                                  10
000:e950 CF50E700     lcall MSDELAY                            19
000:e954 2702         add sp, 2                                4
000:e956 EF           rst 0x28                                 10
[LCD.C(68:1)]: BitWrPortI(PADR, &PADRShadow, 0,0);      // RS=0
000:e957 3EFE         ld a, 0xFE                               4
000:e959 ED56         ipset 1                                  4
000:e95b 21E1B4       ld hl, 0xB4E1                            6
000:e95e 7FA6         and (hl)                                 7
000:e960 77           ld (hl), a                               6
000:e961 D3323000     ioi ld (0x0030), a                       11
000:e965 ED5D         ipres                                    4
000:e967 EF           rst 0x28                                 10
[LCD.C(69:1)]: MSDELAY(10);
000:e968 210A00       ld hl, 0x000A                            6
000:e96b E5           push hl                                  10
000:e96c CF50E700     lcall MSDELAY                            19
000:e970 2702         add sp, 2                                4
000:e972 EF           rst 0x28                                 10
[LCD.C(70:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:e973 210800       ld hl, 0x0008                            6
000:e976 7D           ld a, l                                  2
000:e977 ED56         ipset 1                                  4
000:e979 D3324000     ioi ld (0x0040), a                       11
000:e97d 32E0B4       ld (0xB4E0), a                           10
000:e980 ED5D         ipres                                    4
000:e982 EF           rst 0x28                                 10
[LCD.C(71:1)]: MSDELAY(10);
000:e983 210A00       ld hl, 0x000A                            6
000:e986 E5           push hl                                  10
000:e987 CF50E700     lcall MSDELAY                            19
000:e98b 2702         add sp, 2                                4
000:e98d EF           rst 0x28                                 10
[LCD.C(72:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:e98e BF           clr hl                                   2
000:e98f 7D           ld a, l                                  2
000:e990 ED56         ipset 1                                  4
000:e992 D3324000     ioi ld (0x0040), a                       11
000:e996 32E0B4       ld (0xB4E0), a                           10
000:e999 ED5D         ipres                                    4
000:e99b EF           rst 0x28                                 10
[LCD.C(73:1)]: MSDELAY(10);
000:e99c 210A00       ld hl, 0x000A                            6
000:e99f E5           push hl                                  10
000:e9a0 CF50E700     lcall MSDELAY                            19
000:e9a4 2702         add sp, 2                                4
000:e9a6 EF           rst 0x28                                 10
[LCD.C(74:1)]: BitWrPortI(PADR, &PADRShadow, 1,1);      // EN=1
000:e9a7 3E02         ld a, 0x02                               4
000:e9a9 ED56         ipset 1                                  4
000:e9ab 21E1B4       ld hl, 0xB4E1                            6
000:e9ae 7FB6         or (hl)                                  7
000:e9b0 77           ld (hl), a                               6
000:e9b1 D3323000     ioi ld (0x0030), a                       11
000:e9b5 ED5D         ipres                                    4
000:e9b7 EF           rst 0x28                                 10
[LCD.C(75:1)]: MSDELAY(10);
000:e9b8 210A00       ld hl, 0x000A                            6
000:e9bb E5           push hl                                  10
000:e9bc CF50E700     lcall MSDELAY                            19
000:e9c0 2702         add sp, 2                                4
000:e9c2 EF           rst 0x28                                 10
[LCD.C(76:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:e9c3 210800       ld hl, 0x0008                            6
000:e9c6 7D           ld a, l                                  2
000:e9c7 ED56         ipset 1                                  4
000:e9c9 D3324000     ioi ld (0x0040), a                       11
000:e9cd 32E0B4       ld (0xB4E0), a                           10
000:e9d0 ED5D         ipres                                    4
000:e9d2 EF           rst 0x28                                 10
[LCD.C(77:1)]: MSDELAY(10);
000:e9d3 210A00       ld hl, 0x000A                            6
000:e9d6 E5           push hl                                  10
000:e9d7 CF50E700     lcall MSDELAY                            19
000:e9db 2702         add sp, 2                                4
000:e9dd EF           rst 0x28                                 10
[LCD.C(78:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:e9de BF           clr hl                                   2
000:e9df 7D           ld a, l                                  2
000:e9e0 ED56         ipset 1                                  4
000:e9e2 D3324000     ioi ld (0x0040), a                       11
000:e9e6 32E0B4       ld (0xB4E0), a                           10
000:e9e9 ED5D         ipres                                    4
000:e9eb EF           rst 0x28                                 10
[LCD.C(79:1)]: MSDELAY(10);
000:e9ec 210A00       ld hl, 0x000A                            6
000:e9ef E5           push hl                                  10
000:e9f0 CF50E700     lcall MSDELAY                            19
000:e9f4 2702         add sp, 2                                4
000:e9f6 EF           rst 0x28                                 10
[LCD.C(80:1)]: BitWrPortI(PADR, &PADRShadow, 0,1);      // EN=0
000:e9f7 3EFD         ld a, 0xFD                               4
000:e9f9 ED56         ipset 1                                  4
000:e9fb 21E1B4       ld hl, 0xB4E1                            6
000:e9fe 7FA6         and (hl)                                 7
000:ea00 77           ld (hl), a                               6
000:ea01 D3323000     ioi ld (0x0030), a                       11
000:ea05 ED5D         ipres                                    4
000:ea07 EF           rst 0x28                                 10
[LCD.C(81:1)]: MSDELAY(10);
000:ea08 210A00       ld hl, 0x000A                            6
000:ea0b E5           push hl                                  10
000:ea0c CF50E700     lcall MSDELAY                            19
000:ea10 2702         add sp, 2                                4
000:ea12 EF           rst 0x28                                 10
[LCD.C(82:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:ea13 210800       ld hl, 0x0008                            6
000:ea16 7D           ld a, l                                  2
000:ea17 ED56         ipset 1                                  4
000:ea19 D3324000     ioi ld (0x0040), a                       11
000:ea1d 32E0B4       ld (0xB4E0), a                           10
000:ea20 ED5D         ipres                                    4
000:ea22 EF           rst 0x28                                 10
[LCD.C(83:1)]: MSDELAY(10);
000:ea23 210A00       ld hl, 0x000A                            6
000:ea26 E5           push hl                                  10
000:ea27 CF50E700     lcall MSDELAY                            19
000:ea2b 2702         add sp, 2                                4
000:ea2d EF           rst 0x28                                 10
[LCD.C(84:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:ea2e BF           clr hl                                   2
000:ea2f 7D           ld a, l                                  2
000:ea30 ED56         ipset 1                                  4
000:ea32 D3324000     ioi ld (0x0040), a                       11
000:ea36 32E0B4       ld (0xB4E0), a                           10
000:ea39 ED5D         ipres                                    4
000:ea3b EF           rst 0x28                                 10
[LCD.C(85:1)]: MSDELAY(10);
000:ea3c 210A00       ld hl, 0x000A                            6
000:ea3f E5           push hl                                  10
000:ea40 CF50E700     lcall MSDELAY                            19
000:ea44 2702         add sp, 2                                4
000:ea46 EF           rst 0x28                                 10
[LCD.C(86:1)]: }
[LCD.C(86:1)]: }
000:ea47 D9           exx                                      2
000:ea48 BF           clr hl                                   2
000:ea49 CDFA26       call rspixffndbg_                        12
000:ea4c 00           nop                                      2
000:ea4d ED45         lret                                     13
[LCD.C(88:1)]: void LCDDATA(unsigned char value)
000:ea4f D9           exx                                      2
000:ea50 BF           clr hl                                   2
000:ea51 CDF026       call sspixffndbg_                        12
000:ea54 00           nop                                      2
000:ea55 EF           rst 0x28                                 10
[LCD.C(90:1)]: WrPortI(PADR,&PADRShadow,value);
000:ea56 210300       ld hl, 0x0003                            6
000:ea59 39           add hl, sp                               2
000:ea5a 7E           ld a, (hl)                               5
000:ea5b ED56         ipset 1                                  4
000:ea5d D3323000     ioi ld (0x0030), a                       11
000:ea61 32E1B4       ld (0xB4E1), a                           10
000:ea64 ED5D         ipres                                    4
000:ea66 EF           rst 0x28                                 10
[LCD.C(91:1)]: MSDELAY(10);
000:ea67 210A00       ld hl, 0x000A                            6
000:ea6a E5           push hl                                  10
000:ea6b CF50E700     lcall MSDELAY                            19
000:ea6f 2702         add sp, 2                                4
000:ea71 EF           rst 0x28                                 10
[LCD.C(92:1)]: WrPortI(PBDR,&PBDRShadow,0x04);          //  data
000:ea72 210400       ld hl, 0x0004                            6
000:ea75 7D           ld a, l                                  2
000:ea76 ED56         ipset 1                                  4
000:ea78 D3324000     ioi ld (0x0040), a                       11
000:ea7c 32E0B4       ld (0xB4E0), a                           10
000:ea7f ED5D         ipres                                    4
000:ea81 EF           rst 0x28                                 10
[LCD.C(93:1)]: MSDELAY(10);
000:ea82 210A00       ld hl, 0x000A                            6
000:ea85 E5           push hl                                  10
000:ea86 CF50E700     lcall MSDELAY                            19
000:ea8a 2702         add sp, 2                                4
000:ea8c EF           rst 0x28                                 10
[LCD.C(94:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:ea8d BF           clr hl                                   2
000:ea8e 7D           ld a, l                                  2
000:ea8f ED56         ipset 1                                  4
000:ea91 D3324000     ioi ld (0x0040), a                       11
000:ea95 32E0B4       ld (0xB4E0), a                           10
000:ea98 ED5D         ipres                                    4
000:ea9a EF           rst 0x28                                 10
[LCD.C(95:1)]: MSDELAY(10);
000:ea9b 210A00       ld hl, 0x000A                            6
000:ea9e E5           push hl                                  10
000:ea9f CF50E700     lcall MSDELAY                            19
000:eaa3 2702         add sp, 2                                4
000:eaa5 EF           rst 0x28                                 10
[LCD.C(96:1)]: BitWrPortI(PADR, &PADRShadow, 1,0);      // RS=1
000:eaa6 3E01         ld a, 0x01                               4
000:eaa8 ED56         ipset 1                                  4
000:eaaa 21E1B4       ld hl, 0xB4E1                            6
000:eaad 7FB6         or (hl)                                  7
000:eaaf 77           ld (hl), a                               6
000:eab0 D3323000     ioi ld (0x0030), a                       11
000:eab4 ED5D         ipres                                    4
000:eab6 EF           rst 0x28                                 10
[LCD.C(97:1)]: MSDELAY(10);
000:eab7 210A00       ld hl, 0x000A                            6
000:eaba E5           push hl                                  10
000:eabb CF50E700     lcall MSDELAY                            19
000:eabf 2702         add sp, 2                                4
000:eac1 EF           rst 0x28                                 10
[LCD.C(98:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:eac2 210800       ld hl, 0x0008                            6
000:eac5 7D           ld a, l                                  2
000:eac6 ED56         ipset 1                                  4
000:eac8 D3324000     ioi ld (0x0040), a                       11
000:eacc 32E0B4       ld (0xB4E0), a                           10
000:eacf ED5D         ipres                                    4
000:ead1 EF           rst 0x28                                 10
[LCD.C(99:1)]: MSDELAY(10);
000:ead2 210A00       ld hl, 0x000A                            6
000:ead5 E5           push hl                                  10
000:ead6 CF50E700     lcall MSDELAY                            19
000:eada 2702         add sp, 2                                4
000:eadc EF           rst 0x28                                 10
[LCD.C(100:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:eadd BF           clr hl                                   2
000:eade 7D           ld a, l                                  2
000:eadf ED56         ipset 1                                  4
000:eae1 D3324000     ioi ld (0x0040), a                       11
000:eae5 32E0B4       ld (0xB4E0), a                           10
000:eae8 ED5D         ipres                                    4
000:eaea EF           rst 0x28                                 10
[LCD.C(101:1)]: MSDELAY(10);
000:eaeb 210A00       ld hl, 0x000A                            6
000:eaee E5           push hl                                  10
000:eaef CF50E700     lcall MSDELAY                            19
000:eaf3 2702         add sp, 2                                4
000:eaf5 EF           rst 0x28                                 10
[LCD.C(102:1)]: BitWrPortI(PADR, &PADRShadow, 1,1);      // EN=1
000:eaf6 3E02         ld a, 0x02                               4
000:eaf8 ED56         ipset 1                                  4
000:eafa 21E1B4       ld hl, 0xB4E1                            6
000:eafd 7FB6         or (hl)                                  7
000:eaff 77           ld (hl), a                               6
000:eb00 D3323000     ioi ld (0x0030), a                       11
000:eb04 ED5D         ipres                                    4
000:eb06 EF           rst 0x28                                 10
[LCD.C(103:1)]: MSDELAY(10);
000:eb07 210A00       ld hl, 0x000A                            6
000:eb0a E5           push hl                                  10
000:eb0b CF50E700     lcall MSDELAY                            19
000:eb0f 2702         add sp, 2                                4
000:eb11 EF           rst 0x28                                 10
[LCD.C(104:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:eb12 210800       ld hl, 0x0008                            6
000:eb15 7D           ld a, l                                  2
000:eb16 ED56         ipset 1                                  4
000:eb18 D3324000     ioi ld (0x0040), a                       11
000:eb1c 32E0B4       ld (0xB4E0), a                           10
000:eb1f ED5D         ipres                                    4
000:eb21 EF           rst 0x28                                 10
[LCD.C(105:1)]: MSDELAY(10);
000:eb22 210A00       ld hl, 0x000A                            6
000:eb25 E5           push hl                                  10
000:eb26 CF50E700     lcall MSDELAY                            19
000:eb2a 2702         add sp, 2                                4
000:eb2c EF           rst 0x28                                 10
[LCD.C(106:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:eb2d BF           clr hl                                   2
000:eb2e 7D           ld a, l                                  2
000:eb2f ED56         ipset 1                                  4
000:eb31 D3324000     ioi ld (0x0040), a                       11
000:eb35 32E0B4       ld (0xB4E0), a                           10
000:eb38 ED5D         ipres                                    4
000:eb3a EF           rst 0x28                                 10
[LCD.C(107:1)]: MSDELAY(10);
000:eb3b 210A00       ld hl, 0x000A                            6
000:eb3e E5           push hl                                  10
000:eb3f CF50E700     lcall MSDELAY                            19
000:eb43 2702         add sp, 2                                4
000:eb45 EF           rst 0x28                                 10
[LCD.C(108:1)]: BitWrPortI(PADR, &PADRShadow, 0,1);      // EN=0
000:eb46 3EFD         ld a, 0xFD                               4
000:eb48 ED56         ipset 1                                  4
000:eb4a 21E1B4       ld hl, 0xB4E1                            6
000:eb4d 7FA6         and (hl)                                 7
000:eb4f 77           ld (hl), a                               6
000:eb50 D3323000     ioi ld (0x0030), a                       11
000:eb54 ED5D         ipres                                    4
000:eb56 EF           rst 0x28                                 10
[LCD.C(109:1)]: MSDELAY(10);
000:eb57 210A00       ld hl, 0x000A                            6
000:eb5a E5           push hl                                  10
000:eb5b CF50E700     lcall MSDELAY                            19
000:eb5f 2702         add sp, 2                                4
000:eb61 EF           rst 0x28                                 10
[LCD.C(110:1)]: WrPortI(PBDR,&PBDRShadow,0x08);
000:eb62 210800       ld hl, 0x0008                            6
000:eb65 7D           ld a, l                                  2
000:eb66 ED56         ipset 1                                  4
000:eb68 D3324000     ioi ld (0x0040), a                       11
000:eb6c 32E0B4       ld (0xB4E0), a                           10
000:eb6f ED5D         ipres                                    4
000:eb71 EF           rst 0x28                                 10
[LCD.C(111:1)]: MSDELAY(10);
000:eb72 210A00       ld hl, 0x000A                            6
000:eb75 E5           push hl                                  10
000:eb76 CF50E700     lcall MSDELAY                            19
000:eb7a 2702         add sp, 2                                4
000:eb7c EF           rst 0x28                                 10
[LCD.C(112:1)]: WrPortI(PBDR,&PBDRShadow,0x00);
000:eb7d BF           clr hl                                   2
000:eb7e 7D           ld a, l                                  2
000:eb7f ED56         ipset 1                                  4
000:eb81 D3324000     ioi ld (0x0040), a                       11
000:eb85 32E0B4       ld (0xB4E0), a                           10
000:eb88 ED5D         ipres                                    4
000:eb8a EF           rst 0x28                                 10
[LCD.C(113:1)]: MSDELAY(10);
000:eb8b 210A00       ld hl, 0x000A                            6
000:eb8e E5           push hl                                  10
000:eb8f CF50E700     lcall MSDELAY                            19
000:eb93 2702         add sp, 2                                4
000:eb95 EF           rst 0x28                                 10
[LCD.C(114:1)]: }
[LCD.C(114:1)]: }
000:eb96 D9           exx                                      2
000:eb97 BF           clr hl                                   2
000:eb98 CDFA26       call rspixffndbg_                        12
000:eb9b 00           nop                                      2
000:eb9c ED45         lret                                     13
[LCD.C(117:1)]: void LCDINIT(void)
000:eb9e D9           exx                                      2
000:eb9f BF           clr hl                                   2
000:eba0 CDF026       call sspixffndbg_                        12
000:eba3 00           nop                                      2
000:eba4 EF           rst 0x28                                 10
[LCD.C(119:1)]: LCDCOMMAND(0x38);     // initialization in 5X7 matrix ,8 data lines ,16X2 mode
000:eba5 213800       ld hl, 0x0038                            6
000:eba8 E5           push hl                                  10
000:eba9 CF00E900     lcall LCDCOMMAND                         19
000:ebad 2702         add sp, 2                                4
000:ebaf EF           rst 0x28                                 10
[LCD.C(120:1)]: MSDELAY(10);
000:ebb0 210A00       ld hl, 0x000A                            6
000:ebb3 E5           push hl                                  10
000:ebb4 CF50E700     lcall MSDELAY                            19
000:ebb8 2702         add sp, 2                                4
000:ebba EF           rst 0x28                                 10
[LCD.C(121:1)]: LCDCOMMAND(0x0E);     //display on cursor off
000:ebbb 210E00       ld hl, 0x000E                            6
000:ebbe E5           push hl                                  10
000:ebbf CF00E900     lcall LCDCOMMAND                         19
000:ebc3 2702         add sp, 2                                4
000:ebc5 EF           rst 0x28                                 10
[LCD.C(122:1)]: MSDELAY(10);
000:ebc6 210A00       ld hl, 0x000A                            6
000:ebc9 E5           push hl                                  10
000:ebca CF50E700     lcall MSDELAY                            19
000:ebce 2702         add sp, 2                                4
000:ebd0 EF           rst 0x28                                 10
[LCD.C(123:1)]: LCDCOMMAND(0x01);     //clear LCD
000:ebd1 BF           clr hl                                   2
000:ebd2 23           inc hl                                   2
000:ebd3 E5           push hl                                  10
000:ebd4 CF00E900     lcall LCDCOMMAND                         19
000:ebd8 2702         add sp, 2                                4
000:ebda EF           rst 0x28                                 10
[LCD.C(124:1)]: MSDELAY(10);
000:ebdb 210A00       ld hl, 0x000A                            6
000:ebde E5           push hl                                  10
000:ebdf CF50E700     lcall MSDELAY                            19
000:ebe3 2702         add sp, 2                                4
000:ebe5 EF           rst 0x28                                 10
[LCD.C(125:1)]: LCDCOMMAND(0x06);     //increment curser(shift curser to right)
000:ebe6 210600       ld hl, 0x0006                            6
000:ebe9 E5           push hl                                  10
000:ebea CF00E900     lcall LCDCOMMAND                         19
000:ebee 2702         add sp, 2                                4
000:ebf0 EF           rst 0x28                                 10
[LCD.C(126:1)]: MSDELAY(10);
000:ebf1 210A00       ld hl, 0x000A                            6
000:ebf4 E5           push hl                                  10
000:ebf5 CF50E700     lcall MSDELAY                            19
000:ebf9 2702         add sp, 2                                4
000:ebfb EF           rst 0x28                                 10
[LCD.C(127:1)]: LCDCOMMAND(0x80);     //line 1,position 6
000:ebfc 218000       ld hl, 0x0080                            6
000:ebff E5           push hl                                  10
000:ec00 CF00E900     lcall LCDCOMMAND                         19
000:ec04 2702         add sp, 2                                4
000:ec06 EF           rst 0x28                                 10
[LCD.C(128:1)]: MSDELAY(10);
000:ec07 210A00       ld hl, 0x000A                            6
000:ec0a E5           push hl                                  10
000:ec0b CF50E700     lcall MSDELAY                            19
000:ec0f 2702         add sp, 2                                4
000:ec11 EF           rst 0x28                                 10
[LCD.C(129:1)]: }
[LCD.C(129:1)]: }
000:ec12 D9           exx                                      2
000:ec13 BF           clr hl                                   2
000:ec14 CDFA26       call rspixffndbg_                        12
000:ec17 00           nop                                      2
000:ec18 ED45         lret                                     13
[LCD.C(131:1)]: void send_string(unsigned char *var)
000:ec1a D9           exx                                      2
000:ec1b BF           clr hl                                   2
000:ec1c CDF026       call sspixffndbg_                        12
000:ec1f 00           nop                                      2
000:ec20 EF           rst 0x28                                 10
[LCD.C(133:6)]: while(*var)              //till string ends
000:ec21 00           nop                                      2
[LCD.C(133:1)]: while(*var)              //till string ends
000:ec22 EF           rst 0x28                                 10
[LCD.C(133:12)]: *var)              //till string ends
000:ec23 C403         ld hl, (sp + 0x03)                       9
000:ec25 7E           ld a, (hl)                               5
000:ec26 BF           clr hl                                   2
000:ec27 6F           ld l, a                                  2
000:ec28 CC           bool hl                                  2
000:ec29 CA40EC       jp z, 0xEC40                             7
000:ec2c EF           rst 0x28                                 10
[LCD.C(134:8)]: LCDDATA(*var++);  //send characters one by one
000:ec2d C403         ld hl, (sp + 0x03)                       9
000:ec2f 23           inc hl                                   2
000:ec30 D403         ld (sp + 0x03), hl                       11
000:ec32 2B           dec hl                                   2
000:ec33 7E           ld a, (hl)                               5
000:ec34 BF           clr hl                                   2
000:ec35 6F           ld l, a                                  2
000:ec36 E5           push hl                                  10
000:ec37 CF4FEA00     lcall LCDDATA                            19
000:ec3b 2702         add sp, 2                                4
000:ec3d C322EC       jp 0xEC22                                7
[LCD.C(134:1)]: LCDDATA(*var++);  //send characters one by one
000:ec40 EF           rst 0x28                                 10
[LCD.C(135:1)]: }
[LCD.C(135:1)]: }
000:ec41 D9           exx                                      2
000:ec42 BF           clr hl                                   2
000:ec43 CDFA26       call rspixffndbg_                        12
000:ec46 00           nop                                      2
000:ec47 ED45         lret                                     13
[DKCORE.LIB(2612:1)]: #asm __xmem
[DKCORE.LIB(2613:1)]: dkGetCharFromStdio::
[DKCORE.LIB(2470:5)]: dkStructWatchMem = xalloc(_DK_WATCH_MEM_);
000:ec49 DDE5         push ix                                  12
000:ec4b 214FB3       ld hl, 0xB34F                            6
000:ec4e 010500       ld bc, 0x0005                            6
000:ec51 AF           xor a                                    2
000:ec52 32C6B3       ld (0xB3C6), a                           10
[DKCORE.LIB(2620:1)]: .retry:
[DKCORE.LIB(2621:1)]: .getlock:
000:ec55 CB4E         bit 1, (hl)                              7
000:ec57 CBCE         set 1, (hl)                              10
000:ec59 20FA         jr nz, .getlock                          5
000:ec5b CBA6         res 4, (hl)                              10
000:ec5d C5           push bc                                  10
000:ec5e 1E0E         ld e, 0x0E                               4
000:ec60 010400       ld bc, 0x0004                            6
000:ec63 21C3B3       ld hl, 0xB3C3                            6
000:ec66 CD4620       call dkRespond                           12
000:ec69 CDE719       call dkSetGetCharTimer                   12
[DKCORE.LIB(2634:1)]: __dk_gcfswaitforlock:
000:ec6c CF1FE501     lcall dkPollSerialPort                   19
000:ec70 CDF519       call dkCheckGetCharTimeOut               12
000:ec73 214FB3       ld hl, 0xB34F                            6
000:ec76 CB4E         bit 1, (hl)                              7
000:ec78 20F2         jr nz, __dk_gcfswaitforlock              5
000:ec7a CB66         bit 4, (hl)                              7
000:ec7c C1           pop bc                                   7
000:ec7d 2808         jr z, .done                              5
000:ec7f 3E01         ld a, 0x01                               4
000:ec81 32C6B3       ld (0xB3C6), a                           10
000:ec84 ED10CE       dwjnz .getlock                           7
[DKCORE.LIB(2646:1)]: .done:
000:ec87 DDE1         pop ix                                   9
000:ec89 ED45         lret                                     13
[DKCORE.LIB(2649:1)]: #endasm
[STDVDRIVER.LIB(90:1)]: #asm __xmem __nodebug
[STDVDRIVER.LIB(98:1)]: periodic_init::
[DKCOMMON.LIB(521:2)]: dkStdioTimeout = (unsigned)MS_TIMER + DK_STDIO_TIMEOUT;
000:ec8b ED76         push ip                                  9
000:ec8d ED5E         ipset 3                                  4
000:ec8f AF           xor a                                    2
000:ec90 A400         ld jkhl, 0                               4
000:ec92 322FB3       ld (0xB32F), a                           10
000:ec95 3230B3       ld (0xB330), a                           10
000:ec98 3242B3       ld (0xB342), a                           10
000:ec9b 3241B3       ld (0xB341), a                           10
000:ec9e 8435B3       ld (0xB335), jkhl                        19
000:eca1 3243B3       ld (0xB343), a                           10
000:eca4 843DB3       ld (0xB33D), jkhl                        19
[STDVDRIVER.LIB(122:3)]: SEC_TIMER = read_rtc();			// initialize SEC_TIMER to current RTC value
[STDVDRIVER.LIB(122:3)]: SEC_TIMER = read_rtc();			// initialize SEC_TIMER to current RTC value
000:eca7 CFE2E203     lcall read_rtc                           19
000:ecab 2139B3       ld hl, 0xB339                            6
000:ecae DD1B         ld (hl), bcde                            18
[STDVDRIVER.LIB(122:26)]: // initialize SEC_TIMER to current RTC value
000:ecb0 3EC3         ld a, 0xC3                               4
000:ecb2 3200B8       ld (0xB800), a                           10
000:ecb5 21111A       ld hl, 0x1A11                            6
000:ecb8 2201B8       ld (0xB801), hl                          13
000:ecbb 3AE4B4       ld a, (0xB4E4)                           9
000:ecbe E6FC         and 0xFC                                 4
000:ecc0 F601         or 0x01                                  4
000:ecc2 32E4B4       ld (0xB4E4), a                           10
000:ecc5 D3320000     ioi ld (0x0000), a                       11
000:ecc9 ED7E         pop ip                                   7
000:eccb ED45         lret                                     13
[STDVDRIVER.LIB(142:1)]: #endasm
[SLICE.LIB(29:1)]: void slicefsp_init(void)
[SLICE.LIB(31:1)]: #asm xmemok
000:eccd ED76         push ip                                  9
000:eccf ED56         ipset 1                                  4
000:ecd1 BF           clr hl                                   2
000:ecd2 2233B3       ld (0xB333), hl                          13
000:ecd5 2231B3       ld (0xB331), hl                          13
000:ecd8 ED7E         pop ip                                   7
[SLICE.LIB(38:1)]: #endasm
[SLICE.LIB(39:1)]: }
[SLICE.LIB(39:1)]: }
000:ecda ED45         lret                                     13
[STDVDRIVER.LIB(506:1)]: #asm __nodebug __xmem
[STDVDRIVER.LIB(513:1)]: bios_intexit::
000:ecdc DD2A33B3     ld ix, (0xB333)                          13
000:ece0 BF           clr hl                                   2
000:ece1 39           add hl, sp                               2
000:ece2 F402         ld (ix + 2), hl                          11
000:ece4 E404         ld hl, (ix + 4)                          9
000:ece6 F9           ld sp, hl                                2
000:ece7 BF           clr hl                                   2
000:ece8 2233B3       ld (0xB333), hl                          13
000:eceb AF           xor a                                    2
000:ecec 322FB3       ld (0xB32F), a                           10
000:ecef 3230B3       ld (0xB330), a                           10
000:ecf2 ED45         lret                                     13
[STDVDRIVER.LIB(544:1)]: #endasm
[DKAPP.LIB(129:1)]: #asm __xmem
[DKAPP.LIB(130:1)]: __dk_setrun::
000:ecf4 3E07         ld a, 0x07                               4
000:ecf6 32AEB3       ld (0xB3AE), a                           10
000:ecf9 F680         or 0x80                                  4
000:ecfb 5F           ld e, a                                  2
000:ecfc 010000       ld bc, 0x0000                            6
000:ecff CD4620       call dkRespond                           12
000:ed02 CF00E301     lcall dkDisableRST28                     19
000:ed06 3EC9         ld a, 0xC9                               4
000:ed08 324EB3       ld (0xB34E), a                           10
000:ed0b 2AE0B0       ld hl, (0xB0E0)                          11
000:ed0e 4C           test hl                                  2
000:ed0f 2009         jr nz, __dk_srdone                       5
000:ed11 3EC9         ld a, 0xC9                               4
000:ed13 324DB3       ld (0xB34D), a                           10
000:ed16 CF0FE301     lcall dkDisableRST20                     19
[DKAPP.LIB(167:1)]: __dk_srdone:
000:ed1a ED45         lret                                     13
[DKAPP.LIB(169:1)]: #endasm
[DKAPP.LIB(177:1)]: #asm __xmem
[DKAPP.LIB(178:1)]: __dk_setstop::
000:ed1c 3E08         ld a, 0x08                               4
000:ed1e 32AEB3       ld (0xB3AE), a                           10
000:ed21 3E05         ld a, 0x05                               4
000:ed23 32ADB3       ld (0xB3AD), a                           10
000:ed26 3AAFB3       ld a, (0xB3AF)                           9
000:ed29 CBEF         set 5, a                                 4
000:ed2b 32AFB3       ld (0xB3AF), a                           10
000:ed2e 1E88         ld e, 0x88                               4
000:ed30 010000       ld bc, 0x0000                            6
000:ed33 CD4620       call dkRespond                           12
000:ed36 CFF9E201     lcall dkEnableRST28                      19
000:ed3a CF08E301     lcall dkEnableRST20                      19
000:ed3e 3EC3         ld a, 0xC3                               4
000:ed40 324EB3       ld (0xB34E), a                           10
000:ed43 324DB3       ld (0xB34D), a                           10
000:ed46 ED45         lret                                     13
[DKAPP.LIB(195:1)]: #endasm
[DKAPP.LIB(203:1)]: #asm __xmem
[DKAPP.LIB(204:1)]: __dk_startprogram::
000:ed48 3E06         ld a, 0x06                               4
000:ed4a 32AEB3       ld (0xB3AE), a                           10
000:ed4d 32ADB3       ld (0xB3AD), a                           10
000:ed50 3AAFB3       ld a, (0xB3AF)                           9
000:ed53 CBEF         set 5, a                                 4
000:ed55 32AFB3       ld (0xB3AF), a                           10
000:ed58 ED45         lret                                     13
[DKAPP.LIB(212:1)]: #endasm
[DKAPP.LIB(239:1)]: #asm __xmem
[DKAPP.LIB(241:1)]: __dk_clearallbps::
000:ed5a CFDAE101     lcall dkClearBPTable                     19
000:ed5e 3AB0B3       ld a, (0xB3B0)                           9
000:ed61 CB57         bit 2, a                                 4
000:ed63 2809         jr z, .dk_Step                           5
000:ed65 3EC9         ld a, 0xC9                               4
000:ed67 324DB3       ld (0xB34D), a                           10
000:ed6a CF0FE301     lcall dkDisableRST20                     19
[DKAPP.LIB(249:1)]: .dk_Step:
000:ed6e 1E83         ld e, 0x83                               4
000:ed70 010000       ld bc, 0x0000                            6
000:ed73 CD4620       call dkRespond                           12
000:ed76 ED45         lret                                     13
[DKAPP.LIB(255:1)]: #endasm
[DKAPP.LIB(265:1)]: #asm __xmem
[DKAPP.LIB(266:1)]: __dk_regread::
000:ed78 1601         ld d, 0x01                               4
000:ed7a 1E91         ld e, 0x91                               4
000:ed7c 216BB3       ld hl, 0xB36B                            6
000:ed7f 013F00       ld bc, 0x003F                            6
000:ed82 ED7C         ex jk', hl                               4
000:ed84 9F           ld hl, lxpc                              2
000:ed85 B9           ex jk, hl                                2
000:ed86 ED7C         ex jk', hl                               4
000:ed88 CD4620       call dkRespond                           12
000:ed8b ED45         lret                                     13
[DKAPP.LIB(277:1)]: #endasm
[DKAPP.LIB(593:1)]: #asm __xmem
[DKAPP.LIB(595:1)]: __dk_deleteallwatches::
000:ed8d CF9DEE00     lcall dkDeleteAllWatches                 19
000:ed91 1E8B         ld e, 0x8B                               4
000:ed93 010000       ld bc, 0x0000                            6
000:ed96 CD4620       call dkRespond                           12
000:ed99 ED45         lret                                     13
[DKAPP.LIB(602:1)]: #endasm
[DKAPP.LIB(629:1)]: #asm __xmem
[DKAPP.LIB(631:1)]: __dk_execallwatches::
000:ed9b 3AB0B3       ld a, (0xB3B0)                           9
000:ed9e CB7F         bit 7, a                                 4
000:eda0 200D         jr nz, __dk_eawnoeval                    5
000:eda2 3E0D         ld a, 0x0D                               4
000:eda4 32AEB3       ld (0xB3AE), a                           10
000:eda7 CFF9E201     lcall dkEnableRST28                      19
000:edab CF08E301     lcall dkEnableRST20                      19
[DKAPP.LIB(639:1)]: __dk_eawnoeval:
000:edaf 1E8D         ld e, 0x8D                               4
000:edb1 010000       ld bc, 0x0000                            6
000:edb4 CD4620       call dkRespond                           12
000:edb7 ED45         lret                                     13
[DKAPP.LIB(645:1)]: #endasm
[DKAPP.LIB(694:1)]: #asm __xmem
[DKAPP.LIB(695:1)]: __dk_getenabledoptions::
000:edb9 3E01         ld a, 0x01                               4
000:edbb F602         or 0x02                                  4
000:edbd F604         or 0x04                                  4
000:edbf 322BB3       ld (0xB32B), a                           10
000:edc2 3E08         ld a, 0x08                               4
000:edc4 322CB3       ld (0xB32C), a                           10
000:edc7 212000       ld hl, 0x0020                            6
000:edca 222DB3       ld (0xB32D), hl                          13
000:edcd 1601         ld d, 0x01                               4
000:edcf 1E99         ld e, 0x99                               4
000:edd1 212BB3       ld hl, 0xB32B                            6
000:edd4 010400       ld bc, 0x0004                            6
000:edd7 ED7C         ex jk', hl                               4
000:edd9 9F           ld hl, lxpc                              2
000:edda B9           ex jk, hl                                2
000:eddb ED7C         ex jk', hl                               4
000:eddd CD4620       call dkRespond                           12
000:ede0 ED45         lret                                     13
[DKAPP.LIB(714:1)]: #endasm
[DKCORE.LIB(2082:1)]: #asm __xmem
[DKCORE.LIB(2096:1)]: dkDeleteWatch::
000:ede2 3A2AB3       ld a, (0xB32A)                           9
000:ede5 FE00         cp 0x00                                  4
000:ede7 2002         jr nz, __dk_dwindexok                    5
000:ede9 ED45         lret                                     13
[DKCORE.LIB(2103:1)]: __dk_dwindexok:
000:edeb 76A1         altd ld hl, de                           4
000:eded AF           xor a                                    2
000:edee 011200       ld bc, 0x0012                            6
000:edf1 218EB2       ld hl, 0xB28E                            6
000:edf4 CF24E301     lcall dkGetStructMemberAddr              19
000:edf8 FD7D         ld iy, hl                                4
000:edfa FDE410       ld hl, (iy + 16)                         11
000:edfd E3           ex de', hl                               2
000:edfe 3A2AB3       ld a, (0xB32A)                           9
000:ee01 3D           dec a                                    2
000:ee02 7FBB         cp e                                     4
000:ee04 CA97EE       jp z, __dk_dwdone                        7
000:ee07 13           inc de                                   2
000:ee08 3E0C         ld a, 0x0C                               4
000:ee0a 011200       ld bc, 0x0012                            6
000:ee0d 218EB2       ld hl, 0xB28E                            6
000:ee10 CF24E301     lcall dkGetStructMemberAddr              19
000:ee14 DDE400       ld hl, (hl + 0)                          11
000:ee17 E5           push hl                                  10
000:ee18 ED5B2AB3     ld de, (0xB32A)                          13
000:ee1c 1600         ld d, 0x00                               4
000:ee1e 1B           dec de                                   2
000:ee1f 3E00         ld a, 0x00                               4
000:ee21 011200       ld bc, 0x0012                            6
000:ee24 218EB2       ld hl, 0xB28E                            6
000:ee27 CF24E301     lcall dkGetStructMemberAddr              19
000:ee2b DD7D         ld ix, hl                                4
000:ee2d DDE40C       ld hl, (hl + 12)                         11
000:ee30 AF           xor a                                    2
000:ee31 D1           pop de                                   7
000:ee32 ED52         sbc hl, de                               4
000:ee34 2002         jr nz, __dk_dwmovewatches                5
000:ee36 E410         ld hl, (ix + 16)                         9
[DKCORE.LIB(2155:1)]: __dk_dwmovewatches:
000:ee38 7F44         ld b, h                                  4
000:ee3a 7F4D         ld c, l                                  4
000:ee3c FDE40C       ld hl, (iy + 12)                         11
000:ee3f EB           ex de, hl                                2
000:ee40 EDB0         ldir                                     6+7i
000:ee42 111200       ld de, 0x0012                            6
000:ee45 FD7C         ld hl, iy                                4
000:ee47 19           add hl, de                               2
000:ee48 E5           push hl                                  10
000:ee49 AF           xor a                                    2
000:ee4a 011200       ld bc, 0x0012                            6
000:ee4d 218EB2       ld hl, 0xB28E                            6
000:ee50 ED5B2AB3     ld de, (0xB32A)                          13
000:ee54 1600         ld d, 0x00                               4
000:ee56 CF24E301     lcall dkGetStructMemberAddr              19
000:ee5a AF           xor a                                    2
000:ee5b D1           pop de                                   7
000:ee5c ED52         sbc hl, de                               4
000:ee5e 7F44         ld b, h                                  4
000:ee60 7F4D         ld c, l                                  4
000:ee62 FD7C         ld hl, iy                                4
000:ee64 EB           ex de, hl                                2
000:ee65 2830         jr z, __dk_dwdone                        5
000:ee67 EDB0         ldir                                     6+7i
000:ee69 CC           bool hl                                  2
000:ee6a 2A2AB3       ld hl, (0xB32A)                          11
000:ee6d 76EB         altd ex de, hl                           4
000:ee6f ED52         sbc hl, de                               4
000:ee71 2B           dec hl                                   2
000:ee72 7F45         ld b, l                                  4
[DKCORE.LIB(2194:1)]: __dk_dwupdateaddress:
000:ee74 C5           push bc                                  10
000:ee75 3E0C         ld a, 0x0C                               4
000:ee77 011200       ld bc, 0x0012                            6
000:ee7a 218EB2       ld hl, 0xB28E                            6
000:ee7d CF24E301     lcall dkGetStructMemberAddr              19
000:ee81 DD7D         ld ix, hl                                4
000:ee83 DDE400       ld hl, (hl + 0)                          11
000:ee86 13           inc de                                   2
000:ee87 76EB         altd ex de, hl                           4
000:ee89 D9           exx                                      2
000:ee8a ED51         ld de', de                               4
000:ee8c D9           exx                                      2
000:ee8d AF           xor a                                    2
000:ee8e ED52         sbc hl, de                               4
000:ee90 F400         ld (ix + 0), hl                          11
000:ee92 76EB         altd ex de, hl                           4
000:ee94 C1           pop bc                                   7
000:ee95 10DD         djnz __dk_dwupdateaddress                5
[DKCORE.LIB(2216:1)]: __dk_dwdone:
000:ee97 212AB3       ld hl, 0xB32A                            6
000:ee9a 35           dec (hl)                                 8
000:ee9b ED45         lret                                     13
[DKCORE.LIB(2220:1)]: #endasm
[DKCORE.LIB(2222:1)]: #asm __xmem
[DKCORE.LIB(2223:1)]: dkDeleteAllWatches::
000:ee9d AF           xor a                                    2
000:ee9e 322AB3       ld (0xB32A), a                           10
000:eea1 019000       ld bc, 0x0090                            6
000:eea4 218EB2       ld hl, 0xB28E                            6
000:eea7 CF42E700     lcall dkcClearMemory                     19
000:eeab ED45         lret                                     13
[DKCORE.LIB(2230:1)]: #endasm
[DKCORE.LIB(2301:1)]: #asm __xmem
[DKCORE.LIB(2302:1)]: dkExecuteWatch::
000:eead AF           xor a                                    2
000:eeae 32AEB3       ld (0xB3AE), a                           10
000:eeb1 ED5B8CB2     ld de, (0xB28C)                          13
000:eeb5 21BEEE       ld hl, 0xEEBE                            6
000:eeb8 2284B2       ld (0xB284), hl                          13
000:eebb C3A21C       jp __dk_executewatch                     7
[DKCORE.LIB(2309:1)]: __dk_ewret:
000:eebe 3A4EB3       ld a, (0xB34E)                           9
000:eec1 FEC3         cp 0xC3                                  4
000:eec3 2006         jr nz, __dk_ewdisablerst28               5
000:eec5 CFF9E201     lcall dkEnableRST28                      19
000:eec9 1804         jr __dk_ewrst28done                      5
[DKCORE.LIB(2315:1)]: __dk_ewdisablerst28:
000:eecb CF00E301     lcall dkDisableRST28                     19
[DKCORE.LIB(2317:1)]: __dk_ewrst28done:
000:eecf 3A4DB3       ld a, (0xB34D)                           9
000:eed2 FEC3         cp 0xC3                                  4
000:eed4 2006         jr nz, __dk_ewdisablerst20               5
000:eed6 CF08E301     lcall dkEnableRST20                      19
000:eeda 1804         jr __dk_ewrst20done                      5
[DKCORE.LIB(2323:1)]: __dk_ewdisablerst20:
000:eedc CF0FE301     lcall dkDisableRST20                     19
[DKCORE.LIB(2325:1)]: __dk_ewrst20done:
000:eee0 CF6DEF00     lcall dkSendWatches                      19
000:eee4 3AB0B3       ld a, (0xB3B0)                           9
000:eee7 CBBF         res 7, a                                 4
000:eee9 32B0B3       ld (0xB3B0), a                           10
000:eeec C33A1D       jp 0x1D3A                                7
[DKCORE.LIB(2332:1)]: dkExecuteAllWatches::
000:eeef 3A76B4       ld a, (0xB476)                           9
000:eef2 B7           or a                                     2
000:eef3 2041         jr nz, __dk_eawdone                      5
000:eef5 3A2AB3       ld a, (0xB32A)                           9
000:eef8 FE00         cp 0x00                                  4
000:eefa 283A         jr z, __dk_eawdone                       5
000:eefc 3AB0B3       ld a, (0xB3B0)                           9
000:eeff CBFF         set 7, a                                 4
000:ef01 32B0B3       ld (0xB3B0), a                           10
000:ef04 CF00E301     lcall dkDisableRST28                     19
000:ef08 3A2AB3       ld a, (0xB32A)                           9
000:ef0b 47           ld b, a                                  2
000:ef0c 328AB2       ld (0xB28A), a                           10
000:ef0f AF           xor a                                    2
000:ef10 328BB2       ld (0xB28B), a                           10
000:ef13 CC           bool hl                                  2
000:ef14 7F6C         ld l, h                                  4
000:ef16 2282B2       ld (0xB282), hl                          13
[DKCORE.LIB(2355:1)]: __dk_eawexecwatch:						; while there are still watches, execute them
000:ef19 1600         ld d, 0x00                               4
000:ef1b 3A8BB2       ld a, (0xB28B)                           9
000:ef1e 5F           ld e, a                                  2
000:ef1f 2128EF       ld hl, 0xEF28                            6
000:ef22 2284B2       ld (0xB284), hl                          13
000:ef25 C3A21C       jp __dk_executewatch                     7
[DKCORE.LIB(2362:1)]: __dk_eawexecret:
000:ef28 218BB2       ld hl, 0xB28B                            6
000:ef2b 34           inc (hl)                                 8
000:ef2c 3A8AB2       ld a, (0xB28A)                           9
000:ef2f 47           ld b, a                                  2
000:ef30 218AB2       ld hl, 0xB28A                            6
000:ef33 35           dec (hl)                                 8
000:ef34 10E3         djnz __dk_eawexecwatch                   5
[DKCORE.LIB(2371:1)]: __dk_eawdone:
000:ef36 3A4DB3       ld a, (0xB34D)                           9
000:ef39 FEC3         cp 0xC3                                  4
000:ef3b 2006         jr nz, __dk_eawdisablerst20              5
000:ef3d CF08E301     lcall dkEnableRST20                      19
000:ef41 1804         jr __dk_eawrst20done                     5
[DKCORE.LIB(2377:1)]: __dk_eawdisablerst20:
000:ef43 CF0FE301     lcall dkDisableRST20                     19
[DKCORE.LIB(2379:1)]: __dk_eawrst20done:
000:ef47 3AAEB3       ld a, (0xB3AE)                           9
000:ef4a FE0D         cp 0x0D                                  4
000:ef4c 200F         jr nz, __dk_eawend                       5
000:ef4e AF           xor a                                    2
000:ef4f 32AEB3       ld (0xB3AE), a                           10
000:ef52 3AB0B3       ld a, (0xB3B0)                           9
000:ef55 CBBF         res 7, a                                 4
000:ef57 32B0B3       ld (0xB3B0), a                           10
000:ef5a C33E1D       jp 0x1D3E                                7
[DKCORE.LIB(2399:1)]: __dk_eawend:
000:ef5d AF           xor a                                    2
000:ef5e 32AEB3       ld (0xB3AE), a                           10
000:ef61 3AB0B3       ld a, (0xB3B0)                           9
000:ef64 CBBF         res 7, a                                 4
000:ef66 32B0B3       ld (0xB3B0), a                           10
000:ef69 C7CCE201     ljp __dk_eawret                          10
[DKCORE.LIB(2407:1)]: dkSendWatches::
000:ef6d 218EB2       ld hl, 0xB28E                            6
000:ef70 019000       ld bc, 0x0090                            6
000:ef73 1601         ld d, 0x01                               4
000:ef75 1E12         ld e, 0x12                               4
000:ef77 CD4620       call dkRespond                           12
000:ef7a ED45         lret                                     13
[DKCORE.LIB(2415:1)]: #endasm
[DKCORE.LIB(824:1)]: #asm __xmem
[DKCORE.LIB(830:1)]: dkBPTableFindEmpty::
000:ef7c 08           ex af, af'                               2
000:ef7d AF           xor a                                    2
000:ef7e CBC7         set 0, a                                 4
000:ef80 08           ex af, af'                               2
000:ef81 180F         jr __dk_bplookup                         5
[DKCORE.LIB(839:1)]: dkBPTableFindBP::
000:ef83 3EDF         ld a, 0xDF                               4
000:ef85 7FBA         cp d                                     4
000:ef87 3806         jr c, .dkbpinxmem                        5
000:ef89 CD5010       call dkcPhysicalToLogical                12
000:ef8c EB           ex de, hl                                2
000:ef8d B9           ex jk, hl                                2
000:ef8e B3           ex bc, hl                                2
[DKCORE.LIB(849:1)]: .dkbpinxmem:
000:ef8f 08           ex af, af'                               2
000:ef90 AF           xor a                                    2
000:ef91 08           ex af, af'                               2
[DKCORE.LIB(857:1)]: __dk_bplookup:
000:ef92 211F00       ld hl, 0x001F                            6
000:ef95 DC           and hl, de                               2
000:ef96 DDF5         push bcde                                18
000:ef98 012000       ld bc, 0x0020                            6
000:ef9b EB           ex de, hl                                2
000:ef9c ED51         ld de', de                               4
[DKCORE.LIB(870:1)]: __dk_bplookupnext:
000:ef9e ED49         ld bc', bc                               4
000:efa0 010D00       ld bc, 0x000D                            6
000:efa3 AF           xor a                                    2
000:efa4 21E2B0       ld hl, 0xB0E2                            6
000:efa7 CF24E301     lcall dkGetStructMemberAddr              19
000:efab DDF1         pop bcde                                 13
000:efad FD7D         ld iy, hl                                4
000:efaf 08           ex af, af'                               2
000:efb0 CB47         bit 0, a                                 4
000:efb2 2036         jr nz, __dk_bpinserting                  5
000:efb4 08           ex af, af'                               2
000:efb5 FD7E08       ld a, (iy + 8)                           9
000:efb8 FE00         cp 0x00                                  4
000:efba CAE2EF       jp z, __dk_bpinactive                    7
[DKCORE.LIB(893:1)]: __dk_bpcheckaddr:
000:efbd 0600         ld b, 0x00                               4
000:efbf AF           xor a                                    2
000:efc0 FDE400       ld hl, (iy + 0)                          11
000:efc3 ED52         sbc hl, de                               4
000:efc5 2031         jr nz, __dk_bpindexused                  5
000:efc7 3EDF         ld a, 0xDF                               4
000:efc9 7FBA         cp d                                     4
000:efcb 300F         jr nc, __dk_bpfound                      5
000:efcd 11FF01       ld de, 0x01FF                            6
000:efd0 81           ld hl, bc                                2
000:efd1 DC           and hl, de                               2
000:efd2 91           ld bc, hl                                2
000:efd3 FDE402       ld hl, (iy + 2)                          11
000:efd6 DC           and hl, de                               2
000:efd7 AF           xor a                                    2
000:efd8 ED42         sbc hl, bc                               4
000:efda 201C         jr nz, __dk_bpindexused                  5
[DKCORE.LIB(911:1)]: __dk_bpfound:
000:efdc FD7C         ld hl, iy                                4
000:efde 3E01         ld a, 0x01                               4
000:efe0 ED45         lret                                     13
[DKCORE.LIB(916:1)]: __dk_bpinactive:
000:efe2 210000       ld hl, 0x0000                            6
000:efe5 AF           xor a                                    2
000:efe6 3E02         ld a, 0x02                               4
000:efe8 180E         jr __dk_bpindexused                      5
[DKCORE.LIB(923:1)]: __dk_bpinserting:
000:efea 08           ex af, af'                               2
000:efeb FD7E08       ld a, (iy + 8)                           9
000:efee CB47         bit 0, a                                 4
000:eff0 20CB         jr nz, __dk_bpcheckaddr                  5
000:eff2 FD7C         ld hl, iy                                4
000:eff4 3E03         ld a, 0x03                               4
000:eff6 ED45         lret                                     13
[DKCORE.LIB(934:1)]: __dk_bpindexused:
000:eff8 C5           push bc                                  10
000:eff9 D5           push de                                  10
000:effa D9           exx                                      2
000:effb ED49         ld bc', bc                               4
000:effd ED51         ld de', de                               4
000:efff D9           exx                                      2
001:e000 AF           xor a                                    2
001:e001 13           inc de                                   2
001:e002 211F00       ld hl, 0x001F                            6
001:e005 ED52         sbc hl, de                               4
001:e007 3006         jr nc, 0xE00F                            5
001:e009 A1           ld hl, de                                2
001:e00a 112000       ld de, 0x0020                            6
001:e00d 55           sub hl, de                               2
001:e00e B1           ld de, hl                                2
[DKCORE.LIB(951:1)]: __dk_bpnowrap:
001:e00f ED51         ld de', de                               4
001:e011 ED108A       dwjnz 0xDF9E                             7
001:e014 210000       ld hl, 0x0000                            6
001:e017 3E04         ld a, 0x04                               4
001:e019 2704         add sp, 4                                4
001:e01b ED45         lret                                     13
[DKCORE.LIB(959:1)]: #endasm
[DKCORE.LIB(985:1)]: #asm __nodebug __xmem
[DKCORE.LIB(986:1)]: dkToggleBreakpoint::
001:e01d AF           xor a                                    2
001:e01e 32AEB3       ld (0xB3AE), a                           10
001:e021 DD2156B3     ld ix, 0xB356                            8
001:e025 DD7E03       ld a, (ix + 3)                           9
001:e028 08           ex af, af'                               2
001:e029 DD6E08       ld l, (ix + 8)                           9
001:e02c CB65         bit 4, l                                 4
001:e02e 2811         jr z, 0xE041                             5
001:e030 DD7E03       ld a, (ix + 3)                           9
001:e033 E680         and 0x80                                 4
001:e035 280A         jr z, 0xE041                             5
001:e037 DD7E02       ld a, (ix + 2)                           9
001:e03a E400         ld hl, (ix + 0)                          9
001:e03c FD7D         ld iy, hl                                4
001:e03e C3FCE0       jp 0xE0FC                                7
[DKCORE.LIB(1007:1)]: __dk_skipPhysCheck:
001:e041 E400         ld hl, (ix + 0)                          9
001:e043 7C           ld a, h                                  2
001:e044 FEE0         cp 0xE0                                  4
001:e046 D299E0       jp nc, 0xE099                            7
001:e049 E5           push hl                                  10
001:e04a ED7C         ex jk', hl                               4
001:e04c BF           clr hl                                   2
001:e04d B9           ex jk, hl                                2
001:e04e ED7C         ex jk', hl                               4
001:e050 CD011D       call dkConvertAddress                    12
001:e053 FD7C         ld hl, iy                                4
001:e055 DDF5         push bcde                                18
001:e057 4F           ld c, a                                  2
001:e058 29           add hl, hl                               2
001:e059 62           rl bc                                    2
001:e05a 29           add hl, hl                               2
001:e05b 62           rl bc                                    2
001:e05c 29           add hl, hl                               2
001:e05d 62           rl bc                                    2
001:e05e 29           add hl, hl                               2
001:e05f 62           rl bc                                    2
001:e060 79           ld a, c                                  2
001:e061 D60E         sub 0x0E                                 4
001:e063 4F           ld c, a                                  2
001:e064 78           ld a, b                                  2
001:e065 DE00         sbc 0x00                                 4
001:e067 E60F         and 0x0F                                 4
001:e069 47           ld b, a                                  2
001:e06a B1           ld de, hl                                2
001:e06b DDF5         push bcde                                18
001:e06d FDF1         pop jkhl                                 13
001:e06f B7           or a                                     2
001:e070 FC           rr hl                                    2
001:e071 37           scf                                      2
001:e072 FC           rr hl                                    2
001:e073 37           scf                                      2
001:e074 FC           rr hl                                    2
001:e075 37           scf                                      2
001:e076 FC           rr hl                                    2
001:e077 79           ld a, c                                  2
001:e078 DDF1         pop bcde                                 13
001:e07a F400         ld (ix + 0), hl                          11
001:e07c B9           ex jk, hl                                2
001:e07d F402         ld (ix + 2), hl                          11
001:e07f E1           pop hl                                   7
001:e080 DD7E08       ld a, (ix + 8)                           9
001:e083 CB67         bit 4, a                                 4
001:e085 2807         jr z, 0xE08E                             5
001:e087 CB7F         bit 7, a                                 4
001:e089 2003         jr nz, 0xE08E                            5
001:e08b AF           xor a                                    2
001:e08c 1802         jr 0xE090                                5
[DKCORE.LIB(1046:1)]: __dk_instructionAddr:
001:e08e AF           xor a                                    2
001:e08f 3C           inc a                                    2
[DKCORE.LIB(1049:1)]: __dk_dataAddr:
001:e090 CDE30F       call dkcLogicalToPhysical                12
001:e093 EB           ex de, hl                                2
001:e094 FD7D         ld iy, hl                                4
001:e096 79           ld a, c                                  2
001:e097 1808         jr 0xE0A1                                5
[DKCORE.LIB(1058:1)]: .__dk_tbinxmem:
001:e099 E402         ld hl, (ix + 2)                          9
001:e09b B9           ex jk, hl                                2
001:e09c E400         ld hl, (ix + 0)                          9
001:e09e CD011D       call dkConvertAddress                    12
[DKCORE.LIB(1066:1)]: .__dk_tbreadopcode:
001:e0a1 DD6E08       ld l, (ix + 8)                           9
001:e0a4 CB65         bit 4, l                                 4
001:e0a6 2054         jr nz, 0xE0FC                            5
001:e0a8 F5           push af                                  10
001:e0a9 FDE5         push iy                                  12
001:e0ab BF           clr hl                                   2
001:e0ac E60F         and 0x0F                                 4
001:e0ae 6F           ld l, a                                  2
001:e0af B9           ex jk, hl                                2
001:e0b0 FD7C         ld hl, iy                                4
001:e0b2 FD8D         ld pw, jkhl                              4
001:e0b4 8500         ld hl, (pw + 0)                          9
001:e0b6 3EEF         ld a, 0xEF                               4
001:e0b8 7FBD         cp l                                     4
001:e0ba 2810         jr z, 0xE0CC                             5
001:e0bc 3EE7         ld a, 0xE7                               4
001:e0be 7FBD         cp l                                     4
001:e0c0 280A         jr z, 0xE0CC                             5
001:e0c2 3E02         ld a, 0x02                               4
001:e0c4 F680         or 0x80                                  4
001:e0c6 F1           pop af                                   7
001:e0c7 FDE1         pop iy                                   9
001:e0c9 C3D8E1       jp 0xE1D8                                7
[DKCORE.LIB(1095:1)]: __dk_tbcont:
001:e0cc E402         ld hl, (ix + 2)                          9
001:e0ce 91           ld bc, hl                                2
001:e0cf E400         ld hl, (ix + 0)                          9
001:e0d1 EB           ex de, hl                                2
001:e0d2 DD7E08       ld a, (ix + 8)                           9
001:e0d5 CB4F         bit 1, a                                 4
001:e0d7 C292E1       jp nz, 0xE192                            7
001:e0da CF7CEF00     lcall dkBPTableFindEmpty                 19
001:e0de FE04         cp 0x04                                  4
001:e0e0 CAD4E1       jp z, 0xE1D4                             7
001:e0e3 FE01         cp 0x01                                  4
001:e0e5 CAD8E1       jp z, 0xE1D8                             7
001:e0e8 EB           ex de, hl                                2
001:e0e9 DD7C         ld hl, ix                                4
001:e0eb 010D00       ld bc, 0x000D                            6
001:e0ee EDB0         ldir                                     6+7i
001:e0f0 3EC3         ld a, 0xC3                               4
001:e0f2 324DB3       ld (0xB34D), a                           10
001:e0f5 CF08E301     lcall dkEnableRST20                      19
001:e0f9 C361E1       jp 0xE161                                7
[DKCORE.LIB(1125:1)]: __dk_HWbreakpoint:
001:e0fc FD7C         ld hl, iy                                4
001:e0fe E5           push hl                                  10
001:e0ff 08           ex af, af'                               2
001:e100 E670         and 0x70                                 4
001:e102 A91803       ld jk, 0x0318                            6
001:e105 FE40         cp 0x40                                  4
001:e107 3802         jr c, 0xE10B                             5
001:e109 C610         add 0x10                                 4
[DKCORE.LIB(1135:1)]: __dk_normaladdr:
001:e10b 2600         ld h, 0x00                               4
001:e10d 6F           ld l, a                                  2
001:e10e 65           add hl, jk                               2
001:e10f FD7D         ld iy, hl                                4
001:e111 08           ex af, af'                               2
001:e112 E1           pop hl                                   7
001:e113 D3FD7706     ioi ld (iy + 6), a                       11
001:e117 D3FDF404     ioi ld (iy + 4), hl                      13
001:e11b 3E00         ld a, 0x00                               4
001:e11d D3FD7703     ioi ld (iy + 3), a                       11
001:e121 E404         ld hl, (ix + 4)                          9
001:e123 D3FDF400     ioi ld (iy + 0), hl                      13
001:e127 DD7E06       ld a, (ix + 6)                           9
001:e12a D3FD7702     ioi ld (iy + 2), a                       11
001:e12e DD7E08       ld a, (ix + 8)                           9
001:e131 CB6F         bit 5, a                                 4
001:e133 2806         jr z, 0xE13B                             5
001:e135 3E30         ld a, 0x30                               4
001:e137 D3FD7703     ioi ld (iy + 3), a                       11
[DKCORE.LIB(1161:1)]: .checkDataWriteBit:
001:e13b DD7E08       ld a, (ix + 8)                           9
001:e13e CB77         bit 6, a                                 4
001:e140 280A         jr z, 0xE14C                             5
001:e142 D3FD7E03     ioi ld a, (iy + 3)                       11
001:e146 F60C         or 0x0C                                  4
001:e148 D3FD7703     ioi ld (iy + 3), a                       11
[DKCORE.LIB(1169:1)]: .checkHWInsFetchBit:
001:e14c DD7E08       ld a, (ix + 8)                           9
001:e14f CB7F         bit 7, a                                 4
001:e151 CA7AE1       jp z, 0xE17A                             7
001:e154 D3FD7E03     ioi ld a, (iy + 3)                       11
001:e158 F6C0         or 0xC0                                  4
001:e15a D3FD7703     ioi ld (iy + 3), a                       11
001:e15e C37AE1       jp 0xE17A                                7
[DKCORE.LIB(1181:1)]: __dk_notHWbreakpoint:
001:e161 FDE1         pop iy                                   9
001:e163 F1           pop af                                   7
001:e164 BF           clr hl                                   2
001:e165 E60F         and 0x0F                                 4
001:e167 6F           ld l, a                                  2
001:e168 B9           ex jk, hl                                2
001:e169 FD7C         ld hl, iy                                4
001:e16b FD8D         ld pw, jkhl                              4
001:e16d 8500         ld hl, (pw + 0)                          9
001:e16f 2EE7         ld l, 0xE7                               4
001:e171 8600         ld (pw + 0), hl                          11
001:e173 C376E1       jp 0xE176                                7
[DKCORE.LIB(1240:1)]: __dk_tbbpset:
001:e176 21E0B0       ld hl, 0xB0E0                            6
001:e179 34           inc (hl)                                 8
[DKCORE.LIB(1243:1)]: __dk_tbHWbpset:
001:e17a CFB9E100     lcall dkSaveBxCR                         19
001:e17e CDC900       call dkClearBxCR                         12
001:e181 3AB0B3       ld a, (0xB3B0)                           9
001:e184 CB57         bit 2, a                                 4
001:e186 2804         jr z, 0xE18C                             5
001:e188 CFE7E100     lcall dkUpdateBxCR                       19
[DKCORE.LIB(1251:1)]: __dk_skipclrbp:
001:e18c 3E02         ld a, 0x02                               4
001:e18e F680         or 0x80                                  4
001:e190 1846         jr 0xE1D8                                5
[DKCORE.LIB(1257:1)]: __dk_tbdelete:
001:e192 2704         add sp, 4                                4
001:e194 CF83EF00     lcall dkBPTableFindBP                    19
001:e198 FE04         cp 0x04                                  4
001:e19a 2838         jr z, 0xE1D4                             5
001:e19c FE02         cp 0x02                                  4
001:e19e 2834         jr z, 0xE1D4                             5
001:e1a0 FD7D         ld iy, hl                                4
001:e1a2 FD7E08       ld a, (iy + 8)                           9
001:e1a5 CB4F         bit 1, a                                 4
001:e1a7 202F         jr nz, 0xE1D8                            5
001:e1a9 CBCF         set 1, a                                 4
001:e1ab CB87         res 0, a                                 4
001:e1ad FD7708       ld (iy + 8), a                           10
001:e1b0 ED7C         ex jk', hl                               4
001:e1b2 2AE0B0       ld hl, (0xB0E0)                          11
001:e1b5 2B           dec hl                                   2
001:e1b6 22E0B0       ld (0xB0E0), hl                          13
001:e1b9 4C           test hl                                  2
001:e1ba ED7C         ex jk', hl                               4
001:e1bc 2010         jr nz, 0xE1CE                            5
001:e1be 3AB0B3       ld a, (0xB3B0)                           9
001:e1c1 CB57         bit 2, a                                 4
001:e1c3 2809         jr z, 0xE1CE                             5
001:e1c5 3EC9         ld a, 0xC9                               4
001:e1c7 324DB3       ld (0xB34D), a                           10
001:e1ca CF0FE301     lcall dkDisableRST20                     19
[DKCORE.LIB(1289:1)]: __dk_tbdeletedone:
001:e1ce 3E02         ld a, 0x02                               4
001:e1d0 F680         or 0x80                                  4
001:e1d2 1804         jr 0xE1D8                                5
[DKCORE.LIB(1294:1)]: __dk_tberror:
001:e1d4 3E02         ld a, 0x02                               4
001:e1d6 F640         or 0x40                                  4
[DKCORE.LIB(1299:1)]: __dk_tbdone:
001:e1d8 ED45         lret                                     13
[DKCORE.LIB(1301:1)]: #endasm
[DKCORE.LIB(1303:1)]: #asm __xmem
[DKCORE.LIB(1308:1)]: dkClearBPTable::
001:e1da 21E2B0       ld hl, 0xB0E2                            6
001:e1dd 3600         ld (hl), 0x00                            7
001:e1df 7F54         ld d, h                                  4
001:e1e1 7F5D         ld e, l                                  4
001:e1e3 13           inc de                                   2
001:e1e4 019F01       ld bc, 0x019F                            6
001:e1e7 EDB0         ldir                                     6+7i
001:e1e9 AF           xor a                                    2
001:e1ea 32E0B0       ld (0xB0E0), a                           10
001:e1ed ED45         lret                                     13
[DKCORE.LIB(1324:1)]: dkToggleAllBreakpoints::
001:e1ef 110000       ld de, 0x0000                            6
001:e1f2 012000       ld bc, 0x0020                            6
[DKCORE.LIB(1327:1)]: __dktab_loop:
001:e1f5 ED49         ld bc', bc                               4
001:e1f7 3E08         ld a, 0x08                               4
001:e1f9 010D00       ld bc, 0x000D                            6
001:e1fc 21E2B0       ld hl, 0xB0E2                            6
001:e1ff CF24E301     lcall dkGetStructMemberAddr              19
001:e203 CBCE         set 1, (hl)                              10
001:e205 D9           exx                                      2
001:e206 ED49         ld bc', bc                               4
001:e208 D9           exx                                      2
001:e209 13           inc de                                   2
001:e20a ED10E8       dwjnz 0xE1F5                             7
001:e20d ED45         lret                                     13
[DKCORE.LIB(1342:1)]: #endasm
[DKCORE.LIB(1344:1)]: #asm __xmem
[DKCORE.LIB(1345:1)]: dkResetBreakpoints::
001:e20f ED45         lret                                     13
[DKCORE.LIB(1347:1)]: #endasm
[DKCORE.LIB(471:1)]: #asm __xmem
[DKCORE.LIB(473:1)]: dkCore::
001:e211 CDAD01       call bioshitwd                           12
001:e214 CF1FE501     lcall dkPollSerialPort                   19
001:e218 3AAFB3       ld a, (0xB3AF)                           9
001:e21b CB67         bit 4, a                                 4
001:e21d 2812         jr z, 0xE231                             5
001:e21f C792E201     ljp dkSendStatus                         10
[DKCORE.LIB(480:1)]: __dk_sendstatusret::
001:e223 ED76         push ip                                  9
001:e225 ED56         ipset 1                                  4
001:e227 3AAFB3       ld a, (0xB3AF)                           9
001:e22a CBA7         res 4, a                                 4
001:e22c 32AFB3       ld (0xB3AF), a                           10
001:e22f ED7E         pop ip                                   7
[DKCORE.LIB(491:1)]: __dk_get_command:
001:e231 3AAEB3       ld a, (0xB3AE)                           9
001:e234 FE00         cp 0x00                                  4
001:e236 C25EE2       jp nz, 0xE25E                            7
001:e239 3AB0B3       ld a, (0xB3B0)                           9
001:e23c CB6F         bit 5, a                                 4
001:e23e 2803         jr z, 0xE243                             5
001:e240 C33314       jp startupcode                           7
[DKCORE.LIB(501:1)]: .checkrunmode:
001:e243 3AB0B3       ld a, (0xB3B0)                           9
001:e246 CB57         bit 2, a                                 4
001:e248 28C7         jr z, 0xE211                             5
001:e24a 3A4EB3       ld a, (0xB34E)                           9
001:e24d FEC3         cp 0xC3                                  4
001:e24f 2806         jr z, 0xE257                             5
001:e251 CF00E301     lcall dkDisableRST28                     19
001:e255 1804         jr 0xE25B                                5
[DKCORE.LIB(523:1)]: __dk_corerst28enable:
001:e257 CFF9E201     lcall dkEnableRST28                      19
[DKCORE.LIB(525:1)]: __dk_corerst28done:
001:e25b C34A20       jp dkRestoreContext                      7
[DKCORE.LIB(550:1)]: __dk_core_handle_command:
001:e25e FE01         cp 0x01                                  4
001:e260 2004         jr nz, 0xE266                            5
001:e262 C75DE501     ljp dkSingleStep                         10
[DKCORE.LIB(554:1)]: __dk_notss:
001:e266 FE07         cp 0x07                                  4
001:e268 2004         jr nz, 0xE26E                            5
001:e26a C737E501     ljp dkRunProgram                         10
[DKCORE.LIB(558:1)]: __dk_notrun:
001:e26e FE08         cp 0x08                                  4
001:e270 2004         jr nz, 0xE276                            5
001:e272 C7C6E501     ljp dkStopProgram                        10
[DKCORE.LIB(562:1)]: __dk_notstop:
001:e276 FE06         cp 0x06                                  4
001:e278 2004         jr nz, 0xE27E                            5
001:e27a C7B1E501     ljp dkStartProgram                       10
[DKCORE.LIB(566:1)]: __dk_notstart:
001:e27e FE0C         cp 0x0C                                  4
001:e280 2004         jr nz, 0xE286                            5
001:e282 C7ADEE00     ljp dkExecuteWatch                       10
[DKCORE.LIB(571:1)]: __dk_notexecwatch:
001:e286 FE0D         cp 0x0D                                  4
001:e288 2004         jr nz, 0xE28E                            5
001:e28a C7EFEE00     ljp dkExecuteAllWatches                  10
[DKCORE.LIB(575:1)]: __dk_notexecwatches:
001:e28e C711E201     ljp dkCore                               10
[DKCORE.LIB(579:1)]: #endasm
[DKCORE.LIB(581:1)]: #asm __xmem
[DKCORE.LIB(582:1)]: dkSendStatus::
001:e292 3AAFB3       ld a, (0xB3AF)                           9
001:e295 B7           or a                                     2
001:e296 CAD9E2       jp z, 0xE2D9                             7
001:e299 3AAFB3       ld a, (0xB3AF)                           9
001:e29c CB5F         bit 3, a                                 4
001:e29e 280D         jr z, 0xE2AD                             5
001:e2a0 216BB3       ld hl, 0xB36B                            6
001:e2a3 013F00       ld bc, 0x003F                            6
001:e2a6 1601         ld d, 0x01                               4
001:e2a8 1E11         ld e, 0x11                               4
001:e2aa CD4620       call dkRespond                           12
[DKCORE.LIB(599:1)]: __dk_noregsend:
001:e2ad 3AAFB3       ld a, (0xB3AF)                           9
001:e2b0 CB47         bit 0, a                                 4
001:e2b2 CAC2E2       jp z, 0xE2C2                             7
001:e2b5 2A6BB3       ld hl, (0xB36B)                          11
001:e2b8 012000       ld bc, 0x0020                            6
001:e2bb 1601         ld d, 0x01                               4
001:e2bd 1E14         ld e, 0x14                               4
001:e2bf CD4620       call dkRespond                           12
[DKCORE.LIB(609:1)]: __dk_nostacksend:
001:e2c2 3AAFB3       ld a, (0xB3AF)                           9
001:e2c5 CB4F         bit 1, a                                 4
001:e2c7 2810         jr z, 0xE2D9                             5
001:e2c9 C3421D       jp 0x1D42                                7
[DKCORE.LIB(615:1)]: __dk_eawret::
001:e2cc 218EB2       ld hl, 0xB28E                            6
001:e2cf 019000       ld bc, 0x0090                            6
001:e2d2 1601         ld d, 0x01                               4
001:e2d4 1E12         ld e, 0x12                               4
001:e2d6 CD4620       call dkRespond                           12
[DKCORE.LIB(623:1)]: __dk_nowatchsend:
[DKCORE.LIB(646:1)]: __dk_exitsendstatus:
001:e2d9 3AAFB3       ld a, (0xB3AF)                           9
001:e2dc CB6F         bit 5, a                                 4
001:e2de 2815         jr z, 0xE2F5                             5
001:e2e0 CBAF         res 5, a                                 4
001:e2e2 32AFB3       ld (0xB3AF), a                           10
001:e2e5 3AADB3       ld a, (0xB3AD)                           9
001:e2e8 F680         or 0x80                                  4
001:e2ea 5F           ld e, a                                  2
001:e2eb 010000       ld bc, 0x0000                            6
001:e2ee CD4620       call dkRespond                           12
001:e2f1 AF           xor a                                    2
001:e2f2 32ADB3       ld (0xB3AD), a                           10
[DKCORE.LIB(683:1)]: __dk_noacksend:
001:e2f5 C723E201     ljp __dk_sendstatusret                   10
[DKCORE.LIB(685:1)]: #endasm
[DKCORE.LIB(2853:1)]: #asm __xmem
[DKCORE.LIB(2854:1)]: dkEnableRST28::
001:e2f9 AF           xor a                                    2
001:e2fa D3321C00     ioi ld (0x001C), a                       11
001:e2fe ED45         lret                                     13
[DKCORE.LIB(2858:1)]: dkDisableRST28::
001:e300 3E80         ld a, 0x80                               4
001:e302 D3321C00     ioi ld (0x001C), a                       11
001:e306 ED45         lret                                     13
[DKCORE.LIB(2863:1)]: dkEnableRST20::
001:e308 3EC3         ld a, 0xC3                               4
001:e30a 3240B8       ld (0xB840), a                           10
001:e30d ED45         lret                                     13
[DKCORE.LIB(2867:1)]: dkDisableRST20::
001:e30f 3EC9         ld a, 0xC9                               4
001:e311 3240B8       ld (0xB840), a                           10
001:e314 ED45         lret                                     13
[DKCORE.LIB(2873:1)]: dkEnableRST18::
001:e316 3EC3         ld a, 0xC3                               4
001:e318 3230B8       ld (0xB830), a                           10
001:e31b ED45         lret                                     13
[DKCORE.LIB(2877:1)]: dkDisableRST18::
001:e31d 3EC9         ld a, 0xC9                               4
001:e31f 3230B8       ld (0xB830), a                           10
001:e322 ED45         lret                                     13
[DKCORE.LIB(2881:1)]: #endasm
[DKCORE.LIB(1987:1)]: #asm __xmem
[DKCORE.LIB(1997:1)]: dkGetStructMemberAddr::
001:e324 E5           push hl                                  10
001:e325 F7           mul                                      12
001:e326 E1           pop hl                                   7
001:e327 09           add hl, bc                               2
001:e328 4F           ld c, a                                  2
001:e329 0600         ld b, 0x00                               4
001:e32b 09           add hl, bc                               2
001:e32c ED45         lret                                     13
[DKCORE.LIB(2006:1)]: #endasm
[DKCORE.LIB(1606:1)]: #asm __xmem
[DKCORE.LIB(1610:1)]: dkAsmSingleStep::
001:e32e E5           push hl                                  10
001:e32f BF           clr hl                                   2
001:e330 2254B3       ld (0xB354), hl                          13
001:e333 CFF9E201     lcall dkEnableRST28                      19
001:e337 3EC3         ld a, 0xC3                               4
001:e339 324EB3       ld (0xB34E), a                           10
001:e33c E1           pop hl                                   7
001:e33d CD361E       call dkCopyNextInstruction               12
001:e340 FD21C8B0     ld iy, 0xB0C8                            8
001:e344 FD7E00       ld a, (iy + 0)                           9
001:e347 FECD         cp 0xCD                                  4
001:e349 CAF7E3       jp z, 0xE3F7                             7
001:e34c FECF         cp 0xCF                                  4
001:e34e CA3FE4       jp z, 0xE43F                             7
001:e351 FEE7         cp 0xE7                                  4
001:e353 CACFE4       jp z, 0xE4CF                             7
001:e356 FEEF         cp 0xEF                                  4
001:e358 CACFE4       jp z, 0xE4CF                             7
001:e35b FEF9         cp 0xF9                                  4
001:e35d 2006         jr nz, 0xE365                            5
001:e35f A301         ld bcde, 1                               4
001:e361 C7E1E401     ljp __dkCopyToRam                        10
[DKCORE.LIB(1643:1)]: __dk_checkspixiy:
001:e365 FEDD         cp 0xDD                                  4
001:e367 2804         jr z, 0xE36D                             5
001:e369 FEFD         cp 0xFD                                  4
001:e36b 200D         jr nz, 0xE37A                            5
[DKCORE.LIB(1648:1)]: __dk_twobytesp:
001:e36d FD7E01       ld a, (iy + 1)                           9
001:e370 FEF9         cp 0xF9                                  4
001:e372 205C         jr nz, 0xE3D0                            5
001:e374 A302         ld bcde, 2                               4
001:e376 C7E1E401     ljp __dkCopyToRam                        10
[DKCORE.LIB(1656:1)]: __dk_checkbitB_hl:
001:e37a FECB         cp 0xCB                                  4
001:e37c 200F         jr nz, 0xE38D                            5
001:e37e FD7E01       ld a, (iy + 1)                           9
001:e381 E6C7         and 0xC7                                 4
001:e383 FE46         cp 0x46                                  4
001:e385 2049         jr nz, 0xE3D0                            5
001:e387 A302         ld bcde, 2                               4
001:e389 C7E1E401     ljp __dkCopyToRam                        10
[DKCORE.LIB(1666:1)]: __dk_checkED_page:
001:e38d FEED         cp 0xED                                  4
001:e38f 203F         jr nz, 0xE3D0                            5
001:e391 FD23         inc iy                                   4
001:e393 FD7E00       ld a, (iy + 0)                           9
001:e396 E687         and 0x87                                 4
001:e398 FE80         cp 0x80                                  4
001:e39a 282C         jr z, 0xE3C8                             5
001:e39c FD7E00       ld a, (iy + 0)                           9
001:e39f E6C6         and 0xC6                                 4
001:e3a1 FE46         cp 0x46                                  4
001:e3a3 2823         jr z, 0xE3C8                             5
001:e3a5 FD7E00       ld a, (iy + 0)                           9
001:e3a8 FE83         cp 0x83                                  4
001:e3aa 281C         jr z, 0xE3C8                             5
001:e3ac FE4D         cp 0x4D                                  4
001:e3ae 2818         jr z, 0xE3C8                             5
001:e3b0 FE5D         cp 0x5D                                  4
001:e3b2 2814         jr z, 0xE3C8                             5
001:e3b4 FE7D         cp 0x7D                                  4
001:e3b6 2810         jr z, 0xE3C8                             5
001:e3b8 FEB1         cp 0xB1                                  4
001:e3ba 2804         jr z, 0xE3C0                             5
001:e3bc FEB5         cp 0xB5                                  4
001:e3be 2010         jr nz, 0xE3D0                            5
[DKCORE.LIB(1703:1)]: __dk_copy_ed_4:
001:e3c0 FD2B         dec iy                                   4
001:e3c2 A304         ld bcde, 4                               4
001:e3c4 C7E1E401     ljp __dkCopyToRam                        10
[DKCORE.LIB(1708:1)]: __dk_copy_ed_inst:
001:e3c8 FD2B         dec iy                                   4
001:e3ca A302         ld bcde, 2                               4
001:e3cc C7E1E401     ljp __dkCopyToRam                        10
[DKCORE.LIB(1713:1)]: __dk_skip_rep_ops:
[DKCORE.LIB(1717:1)]: __dk_default_step::
001:e3d0 2A6DB3       ld hl, (0xB36D)                          11
001:e3d3 B1           ld de, hl                                2
001:e3d4 9F           ld hl, lxpc                              2
001:e3d5 ED7C         ex jk', hl                               4
001:e3d7 A1           ld hl, de                                2
001:e3d8 B9           ex jk, hl                                2
001:e3d9 2AA8B3       ld hl, (0xB3A8)                          11
001:e3dc CF221D00     lcall dkConvertCodeAddress               19
001:e3e0 ED7C         ex jk', hl                               4
001:e3e2 97           ld lxpc, hl                              2
001:e3e3 D3ED430E03   ioi ld (0x030E), bc                      15
001:e3e8 D3ED530C03   ioi ld (0x030C), de                      15
001:e3ed 3EC0         ld a, 0xC0                               4
001:e3ef D3320B03     ioi ld (0x030B), a                       11
001:e3f3 C74A2000     ljp dkRestoreContext                     10
[DKCORE.LIB(1743:1)]: __dk_call::
001:e3f7 110300       ld de, 0x0003                            6
001:e3fa 3AACB3       ld a, (0xB3AC)                           9
001:e3fd CB47         bit 0, a                                 4
001:e3ff C22CE4       jp nz, 0xE42C                            7
001:e402 D32A1A00     ioi ld hl, (0x001A)                      13
001:e406 22D6B0       ld (0xB0D6), hl                          13
001:e409 CC           bool hl                                  2
001:e40a 7F6C         ld l, h                                  4
001:e40c 39           add hl, sp                               2
001:e40d 2B           dec hl                                   2
001:e40e 2B           dec hl                                   2
001:e40f 22D4B0       ld (0xB0D4), hl                          13
001:e412 2A67B3       ld hl, (0xB367)                          11
001:e415 19           add hl, de                               2
001:e416 22D0B0       ld (0xB0D0), hl                          13
001:e419 2A6DB3       ld hl, (0xB36D)                          11
001:e41c 22D2B0       ld (0xB0D2), hl                          13
001:e41f 3AACB3       ld a, (0xB3AC)                           9
001:e422 CBAF         res 5, a                                 4
001:e424 CBE7         set 4, a                                 4
001:e426 32ACB3       ld (0xB3AC), a                           10
001:e429 C3E1E4       jp 0xE4E1                                7
[DKCORE.LIB(1769:1)]: __dk_stepintocall::							; stepping into function call:
001:e42c 3EC3         ld a, 0xC3                               4
001:e42e 324EB3       ld (0xB34E), a                           10
001:e431 2A67B3       ld hl, (0xB367)                          11
001:e434 19           add hl, de                               2
001:e435 E5           push hl                                  10
001:e436 FDE401       ld hl, (iy + 1)                          11
001:e439 2267B3       ld (0xB367), hl                          13
001:e43c C3D9E4       jp 0xE4D9                                7
[DKCORE.LIB(1779:1)]: __dk_lcall::
001:e43f 110400       ld de, 0x0004                            6
001:e442 3AACB3       ld a, (0xB3AC)                           9
001:e445 CB47         bit 0, a                                 4
001:e447 C2D0E3       jp nz, 0xE3D0                            7
001:e44a D32A1A00     ioi ld hl, (0x001A)                      13
001:e44e 22D6B0       ld (0xB0D6), hl                          13
001:e451 CC           bool hl                                  2
001:e452 7F6C         ld l, h                                  4
001:e454 39           add hl, sp                               2
001:e455 2B           dec hl                                   2
001:e456 2B           dec hl                                   2
001:e457 2B           dec hl                                   2
001:e458 22D4B0       ld (0xB0D4), hl                          13
001:e45b 2A67B3       ld hl, (0xB367)                          11
001:e45e 19           add hl, de                               2
001:e45f 22D0B0       ld (0xB0D0), hl                          13
001:e462 2A6DB3       ld hl, (0xB36D)                          11
001:e465 22D2B0       ld (0xB0D2), hl                          13
001:e468 3AACB3       ld a, (0xB3AC)                           9
001:e46b CBA7         res 4, a                                 4
001:e46d CBEF         set 5, a                                 4
001:e46f 32ACB3       ld (0xB3AC), a                           10
001:e472 C3E1E4       jp 0xE4E1                                7
[DKCORE.LIB(1806:1)]: #endasm
[DKCORE.LIB(1822:1)]: #asm __xmem
[DKCORE.LIB(1823:1)]: __dk_stepintolcall:
001:e475 CD4A1E       call __dk_copylcallreturn                12
001:e478 ED7C         ex jk', hl                               4
001:e47a 2A6DB3       ld hl, (0xB36D)                          11
001:e47d E5           push hl                                  10
001:e47e ED7C         ex jk', hl                               4
001:e480 33           inc sp                                   2
001:e481 E5           push hl                                  10
001:e482 C3D9E4       jp 0xE4D9                                7
[DKCORE.LIB(1835:1)]: __dk_do_ldir::
001:e485 22A8B3       ld (0xB3A8), hl                          13
001:e488 2A67B3       ld hl, (0xB367)                          11
001:e48b 19           add hl, de                               2
001:e48c 2267B3       ld (0xB367), hl                          13
001:e48f CFAFE501     lcall dkSingleStepExit                   19
001:e493 C74A2000     ljp dkRestoreContext                     10
[DKCORE.LIB(1844:1)]: __dk_ldir::
001:e497 2111E5       ld hl, 0xE511                            6
001:e49a C385E4       jp 0xE485                                7
[DKCORE.LIB(1848:1)]: __dk_lddsr::
001:e49d 215C1E       ld hl, 0x1E5C                            6
001:e4a0 C385E4       jp 0xE485                                7
[DKCORE.LIB(1852:1)]: __dk_ldisr::
001:e4a3 215F1E       ld hl, 0x1E5F                            6
001:e4a6 C385E4       jp 0xE485                                7
[DKCORE.LIB(1856:1)]: __dk_lsdr::
001:e4a9 21621E       ld hl, 0x1E62                            6
001:e4ac C385E4       jp 0xE485                                7
[DKCORE.LIB(1860:1)]: __dk_lsir::
001:e4af 21651E       ld hl, 0x1E65                            6
001:e4b2 C385E4       jp 0xE485                                7
[DKCORE.LIB(1864:1)]: __dk_lsddr::
001:e4b5 21681E       ld hl, 0x1E68                            6
001:e4b8 C385E4       jp 0xE485                                7
[DKCORE.LIB(1868:1)]: __dk_lsidr::
001:e4bb 216B1E       ld hl, 0x1E6B                            6
001:e4be C385E4       jp 0xE485                                7
[DKCORE.LIB(1873:1)]: __dk_ljp::
001:e4c1 1167B3       ld de, 0xB367                            6
001:e4c4 FD7C         ld hl, iy                                4
001:e4c6 23           inc hl                                   2
001:e4c7 010300       ld bc, 0x0003                            6
001:e4ca EDB0         ldir                                     6+7i
001:e4cc C3D9E4       jp 0xE4D9                                7
[DKCORE.LIB(1880:1)]: #endasm
[DKCORE.LIB(1882:1)]: #asm __xmem
[DKCORE.LIB(1883:1)]: __dk_rst2028::
001:e4cf 2A67B3       ld hl, (0xB367)                          11
001:e4d2 23           inc hl                                   2
001:e4d3 2267B3       ld (0xB367), hl                          13
001:e4d6 C3D9E4       jp 0xE4D9                                7
[DKCORE.LIB(1889:1)]: __dkReenterRST18::
001:e4d9 2AAAB3       ld hl, (0xB3AA)                          11
001:e4dc 36DF         ld (hl), 0xDF                            7
001:e4de C3F7E4       jp 0xE4F7                                7
[DKCORE.LIB(1894:1)]: __dkCopyToRam::								; copy instruction to RAM
001:e4e1 2A67B3       ld hl, (0xB367)                          11
001:e4e4 19           add hl, de                               2
001:e4e5 2267B3       ld (0xB367), hl                          13
001:e4e8 7F42         ld b, d                                  4
001:e4ea 7F4B         ld c, e                                  4
001:e4ec ED5BAAB3     ld de, (0xB3AA)                          13
001:e4f0 FD7C         ld hl, iy                                4
001:e4f2 EDB0         ldir                                     6+7i
001:e4f4 3EDF         ld a, 0xDF                               4
001:e4f6 12           ld (de), a                               7
[DKCORE.LIB(1907:1)]: __dkExecInRAM::
001:e4f7 ED7C         ex jk', hl                               4
001:e4f9 9F           ld hl, lxpc                              2
001:e4fa E5           push hl                                  10
001:e4fb ED7C         ex jk', hl                               4
001:e4fd CFAFE501     lcall dkSingleStepExit                   19
001:e501 E1           pop hl                                   7
001:e502 97           ld lxpc, hl                              2
001:e503 2AAAB3       ld hl, (0xB3AA)                          11
001:e506 22A8B3       ld (0xB3A8), hl                          13
001:e509 9F           ld hl, lxpc                              2
001:e50a 226DB3       ld (0xB36D), hl                          13
001:e50d C74A2000     ljp dkRestoreContext                     10
[DKCORE.LIB(1937:1)]: #endasm
[DKCORE.LIB(1939:1)]: #asm __xmem
[DKCORE.LIB(1940:1)]: __dk_handle_ldir::											; Special handler to execute ldir in root code space so xmem dest/src work correctly.
001:e511 EDB0         ldir                                     6+7i
001:e513 DF           rst 0x18                                 10
[DKCORE.LIB(1943:1)]: #endasm
[DKCORE.LIB(330:1)]: #asm __xmem
[DKCORE.LIB(333:1)]: dkCheckEntry::
001:e514 E5           push hl                                  10
001:e515 214FB3       ld hl, 0xB34F                            6
001:e518 CB5E         bit 3, (hl)                              7
001:e51a CBDE         set 3, (hl)                              10
001:e51c E1           pop hl                                   7
001:e51d ED45         lret                                     13
[DKCORE.LIB(340:1)]: #endasm
[DKCORE.LIB(432:1)]: #asm __xmem __nodebug
[DKCORE.LIB(433:1)]: dkPollSerialPort::
001:e51f ED76         push ip                                  9
001:e521 ED76         push ip                                  9
001:e523 E1           pop hl                                   7
001:e524 7D           ld a, l                                  2
001:e525 E603         and 0x03                                 4
001:e527 280A         jr z, 0xE533                             5
001:e529 ED76         push ip                                  9
001:e52b 21E500       ld hl, 0x00E5                            6
001:e52e CD1120       call dkDoHook                            12
001:e531 ED7E         pop ip                                   7
[DKCORE.LIB(448:1)]: __dk_pspexit:
001:e533 ED45         lret                                     13
[DKCORE.LIB(450:1)]: #endasm
[DKENTRY.LIB(26:1)]: #asm __xmem
[DKENTRY.LIB(29:1)]: dkExit::
001:e535 ED45         lret                                     13
[DKENTRY.LIB(41:1)]: #endasm
[DKCORE.LIB(710:1)]: #asm __xmem
[DKCORE.LIB(715:1)]: dkRunProgram::
001:e537 AF           xor a                                    2
001:e538 32AEB3       ld (0xB3AE), a                           10
001:e53b 32ACB3       ld (0xB3AC), a                           10
001:e53e 3AB0B3       ld a, (0xB3B0)                           9
001:e541 CBD7         set 2, a                                 4
001:e543 CB9F         res 3, a                                 4
001:e545 CB87         res 0, a                                 4
001:e547 CB8F         res 1, a                                 4
001:e549 32B0B3       ld (0xB3B0), a                           10
001:e54c C34A20       jp dkRestoreContext                      7
[DKCORE.LIB(727:1)]: #endasm
[DKCORE.LIB(415:1)]: #asm __xmem
[DKCORE.LIB(419:1)]: dkSavepc::
001:e54f 2A69B3       ld hl, (0xB369)                          11
001:e552 226DB3       ld (0xB36D), hl                          13
001:e555 2A67B3       ld hl, (0xB367)                          11
001:e558 22A8B3       ld (0xB3A8), hl                          13
001:e55b ED45         lret                                     13
[DKCORE.LIB(426:1)]: #endasm
[DKCORE.LIB(1482:1)]: #asm __xmem
[DKCORE.LIB(1483:1)]: dkSingleStep::
001:e55d AF           xor a                                    2
001:e55e 32AEB3       ld (0xB3AE), a                           10
001:e561 3AB0B3       ld a, (0xB3B0)                           9
001:e564 CBDF         set 3, a                                 4
001:e566 CB97         res 2, a                                 4
001:e568 CB87         res 0, a                                 4
001:e56a CB8F         res 1, a                                 4
001:e56c 32B0B3       ld (0xB3B0), a                           10
001:e56f 3AAFB3       ld a, (0xB3AF)                           9
001:e572 CBE7         set 4, a                                 4
001:e574 32AFB3       ld (0xB3AF), a                           10
001:e577 3E01         ld a, 0x01                               4
001:e579 3AACB3       ld a, (0xB3AC)                           9
001:e57c CB5F         bit 3, a                                 4
001:e57e 2804         jr z, 0xE584                             5
001:e580 C788E501     ljp dkCSingleStep                        10
[DKCORE.LIB(1503:1)]: __dk_asmss:
001:e584 C72EE301     ljp dkAsmSingleStep                      10
[DKCORE.LIB(1505:1)]: #endasm
[DKCORE.LIB(1510:1)]: #asm __xmem
[DKCORE.LIB(1513:1)]: dkCSingleStep::
001:e588 ED7C         ex jk', hl                               4
001:e58a 9F           ld hl, lxpc                              2
001:e58b E5           push hl                                  10
001:e58c ED7C         ex jk', hl                               4
001:e58e CFAFE501     lcall dkSingleStepExit                   19
001:e592 E1           pop hl                                   7
001:e593 97           ld lxpc, hl                              2
001:e594 CC           bool hl                                  2
001:e595 7F6C         ld l, h                                  4
001:e597 2254B3       ld (0xB354), hl                          13
001:e59a CFF9E201     lcall dkEnableRST28                      19
001:e59e 3EC3         ld a, 0xC3                               4
001:e5a0 324EB3       ld (0xB34E), a                           10
001:e5a3 2A67B3       ld hl, (0xB367)                          11
001:e5a6 DD21A8B3     ld ix, 0xB3A8                            8
001:e5aa F400         ld (ix + 0), hl                          11
001:e5ac C34A20       jp dkRestoreContext                      7
[DKCORE.LIB(1537:1)]: #endasm
[DKENTRY.LIB(47:1)]: #asm __xmem
[DKENTRY.LIB(50:1)]: dkSingleStepExit::
001:e5af ED45         lret                                     13
[DKENTRY.LIB(62:1)]: #endasm
[DKCORE.LIB(690:1)]: #asm __xmem
[DKCORE.LIB(691:1)]: dkStartProgram::
001:e5b1 3AAFB3       ld a, (0xB3AF)                           9
001:e5b4 CBE7         set 4, a                                 4
001:e5b6 32AFB3       ld (0xB3AF), a                           10
001:e5b9 AF           xor a                                    2
001:e5ba 32AEB3       ld (0xB3AE), a                           10
001:e5bd 213614       ld hl, 0x1436                            6
001:e5c0 22A8B3       ld (0xB3A8), hl                          13
001:e5c3 C34A20       jp dkRestoreContext                      7
[DKCORE.LIB(705:1)]: #endasm
[DKCORE.LIB(732:1)]: #asm __xmem
[DKCORE.LIB(736:1)]: dkStopProgram::
001:e5c6 AF           xor a                                    2
001:e5c7 32AEB3       ld (0xB3AE), a                           10
001:e5ca 3AB0B3       ld a, (0xB3B0)                           9
001:e5cd CB97         res 2, a                                 4
001:e5cf CB9F         res 3, a                                 4
001:e5d1 32B0B3       ld (0xB3B0), a                           10
001:e5d4 3AAFB3       ld a, (0xB3AF)                           9
001:e5d7 CBE7         set 4, a                                 4
001:e5d9 32AFB3       ld (0xB3AF), a                           10
001:e5dc C711E201     ljp dkCore                               10
[DKCORE.LIB(748:1)]: #endasm
[DKAPP.LIB(726:1)]: #asm __xmem
[DKAPP.LIB(727:1)]: __dk_unlockstdio::
001:e5e0 ED76         push ip                                  9
001:e5e2 ED56         ipset 1                                  4
001:e5e4 214FB3       ld hl, 0xB34F                            6
001:e5e7 CB86         res 0, (hl)                              10
001:e5e9 ED7E         pop ip                                   7
001:e5eb ED45         lret                                     13
[DKAPP.LIB(734:1)]: #endasm
[VDRIVER.LIB(56:1)]: void VdInit (void)
[VDRIVER.LIB(58:1)]: #asm xmemok
001:e5ed ED76         push ip                                  9
001:e5ef ED5E         ipset 3                                  4
[VDRIVER.LIB(61:1)]: #endasm
[VDRIVER.LIB(63:4)]: vwdogInit();
001:e5f1 CFBBE803     lcall vwdogInit                          19
[VDRIVER.LIB(64:4)]: periodic_init();
001:e5f5 CF8BEC00     lcall periodic_init                      19
[VDRIVER.LIB(66:1)]: #asm xmemok
001:e5f9 ED7E         pop ip                                   7
[VDRIVER.LIB(68:1)]: #endasm
[VDRIVER.LIB(69:1)]: } //VdInit()
[VDRIVER.LIB(69:1)]: } //VdInit()
001:e5fb ED45         lret                                     13
[STACK.LIB(363:1)]: void _Init_Stacks(void)
001:e5fd 27E8         add sp, -24                              4
[STACK.LIB(372:2)]: locCounts[0] = STACK_CNT_256;
001:e5ff BF           clr hl                                   2
001:e600 D404         ld (sp + 0x04), hl                       11
[STACK.LIB(373:2)]: locCounts[1] = STACK_CNT_512;
001:e602 BF           clr hl                                   2
001:e603 D406         ld (sp + 0x06), hl                       11
[STACK.LIB(374:2)]: locCounts[2] = STACK_CNT_1K;
001:e605 BF           clr hl                                   2
001:e606 D408         ld (sp + 0x08), hl                       11
[STACK.LIB(375:2)]: locCounts[3] = STACK_CNT_2K;
001:e608 BF           clr hl                                   2
001:e609 D40A         ld (sp + 0x0A), hl                       11
[STACK.LIB(376:2)]: locCounts[4] = STACK_CNT_4K;
001:e60b BF           clr hl                                   2
001:e60c 23           inc hl                                   2
001:e60d D40C         ld (sp + 0x0C), hl                       11
[STACK.LIB(377:2)]: totalStackCounts = TOTAL_STACK_CNT;
001:e60f BF           clr hl                                   2
001:e610 23           inc hl                                   2
001:e611 D400         ld (sp + 0x00), hl                       11
[STACK.LIB(378:2)]: SizeOfStacks1 = 0;
001:e613 A300         ld bcde, 0                               4
001:e615 83B8B0       ld (0xB0B8), bcde                        19
[STACK.LIB(379:2)]: allocIndex    = 0;
001:e618 BF           clr hl                                   2
001:e619 D402         ld (sp + 0x02), hl                       11
[STACK.LIB(381:2)]: for(i = 0; i< STACKPOOLCOUNT; i++) {
001:e61b BF           clr hl                                   2
001:e61c D40E         ld (sp + 0x0E), hl                       11
001:e61e 4805         cp hl, 5                                 4
001:e620 EDB4         flag lt, hl                              4
001:e622 CC           bool hl                                  2
001:e623 CA6BE6       jp z, 0xE66B                             7
[STACK.LIB(381:1)]: for(i = 0; i< STACKPOOLCOUNT; i++) {
[STACK.LIB(381:37)]: {
[STACK.LIB(382:3)]: SizeOfStacks1 += locCounts[i]*(unsigned long)stackSizes[i];
001:e626 93B8B0       ld bcde, (0xB0B8)                        15
001:e629 DDF5         push bcde                                18
001:e62b 210800       ld hl, 0x0008                            6
001:e62e 39           add hl, sp                               2
001:e62f E5           push hl                                  10
001:e630 C414         ld hl, (sp + 0x14)                       9
001:e632 29           add hl, hl                               2
001:e633 B1           ld de, hl                                2
001:e634 E1           pop hl                                   7
001:e635 19           add hl, de                               2
001:e636 DDE400       ld hl, (hl + 0)                          11
001:e639 A300         ld bcde, 0                               4
001:e63b B1           ld de, hl                                2
001:e63c DDF5         push bcde                                18
001:e63e EDA53022     push 0x2230                              15
001:e642 C418         ld hl, (sp + 0x18)                       9
001:e644 29           add hl, hl                               2
001:e645 B1           ld de, hl                                2
001:e646 E1           pop hl                                   7
001:e647 19           add hl, de                               2
001:e648 DDE400       ld hl, (hl + 0)                          11
001:e64b A300         ld bcde, 0                               4
001:e64d B1           ld de, hl                                2
001:e64e CDCC03       call .dummyLMUL                          12
001:e651 FDF1         pop jkhl                                 13
001:e653 EDC6         add jkhl, bcde                           4
001:e655 B1           ld de, hl                                2
001:e656 B9           ex jk, hl                                2
001:e657 91           ld bc, hl                                2
001:e658 B9           ex jk, hl                                2
001:e659 21B8B0       ld hl, 0xB0B8                            6
001:e65c DD1B         ld (hl), bcde                            18
[STACK.LIB(383:2)]: }
[STACK.LIB(383:1)]: }
001:e65e C40E         ld hl, (sp + 0x0E)                       9
001:e660 23           inc hl                                   2
001:e661 D40E         ld (sp + 0x0E), hl                       11
001:e663 4805         cp hl, 5                                 4
001:e665 EDB4         flag lt, hl                              4
001:e667 CC           bool hl                                  2
001:e668 C226E6       jp nz, 0xE626                            7
[STACK.LIB(383:1)]: }
[STACK.LIB(388:2)]: allocatedForStacks = SizeOfStacks1;
001:e66b 93B8B0       ld bcde, (0xB0B8)                        15
001:e66e DDEF14       ld (sp + 0x14), bcde                     19
[STACK.LIB(391:2)]: BaseOfStacks1 = _xalloc(&allocatedForStacks, 12, XALLOC_MAYBBB);
001:e671 EDA50300     push 0x0003                              15
001:e675 EDA50C00     push 0x000C                              15
001:e679 211800       ld hl, 0x0018                            6
001:e67c 39           add hl, sp                               2
001:e67d E5           push hl                                  10
001:e67e CF2EEC01     lcall 01:ec2e                            19
001:e682 2706         add sp, 6                                4
001:e684 83BCB0       ld (0xB0BC), bcde                        19
[STACK.LIB(395:2)]: spaceLeft = BaseOfStacks1 + allocatedForStacks & 0xFFF000L;
001:e687 94BCB0       ld jkhl, (0xB0BC)                        15
001:e68a DDEE14       ld bcde, (sp + 0x14)                     15
001:e68d EDC6         add jkhl, bcde                           4
001:e68f 1100F0       ld de, 0xF000                            6
001:e692 01FF00       ld bc, 0x00FF                            6
001:e695 EDE6         and jkhl, bcde                           4
001:e697 B1           ld de, hl                                2
001:e698 B9           ex jk, hl                                2
001:e699 91           ld bc, hl                                2
001:e69a B9           ex jk, hl                                2
001:e69b 211000       ld hl, 0x0010                            6
001:e69e 39           add hl, sp                               2
001:e69f DD1B         ld (hl), bcde                            18
[STACK.LIB(397:1)]: while(totalStackCounts) {
[STACK.LIB(397:2)]: while(totalStackCounts) {
001:e6a1 C400         ld hl, (sp + 0x00)                       9
001:e6a3 CC           bool hl                                  2
001:e6a4 CA8EE7       jp z, 0xE78E                             7
[STACK.LIB(397:26)]: {
[STACK.LIB(398:3)]: for(i = STACKPOOLCOUNT-1; i>=0; i--) {
001:e6a7 210400       ld hl, 0x0004                            6
001:e6aa D40E         ld (sp + 0x0E), hl                       11
001:e6ac 48FF         cp hl, -1                                4
001:e6ae EDA4         flag gt, hl                              4
001:e6b0 CC           bool hl                                  2
001:e6b1 CA61E7       jp z, 0xE761                             7
[STACK.LIB(398:1)]: for(i = STACKPOOLCOUNT-1; i>=0; i--) {
[STACK.LIB(398:40)]: {
[STACK.LIB(400:1)]: while(locCounts[i] && (spaceLeft & 0xfffL) >= stackSizes[i]-1) {
[STACK.LIB(400:4)]: while(locCounts[i] && (spaceLeft & 0xfffL) >= stackSizes[i]-1) {
001:e6b4 210400       ld hl, 0x0004                            6
001:e6b7 39           add hl, sp                               2
001:e6b8 E5           push hl                                  10
001:e6b9 C410         ld hl, (sp + 0x10)                       9
001:e6bb 29           add hl, hl                               2
001:e6bc B1           ld de, hl                                2
001:e6bd E1           pop hl                                   7
001:e6be 19           add hl, de                               2
001:e6bf DDE400       ld hl, (hl + 0)                          11
001:e6c2 CC           bool hl                                  2
001:e6c3 CAECE6       jp z, 0xE6EC                             7
001:e6c6 FDEE10       ld jkhl, (sp + 0x10)                     15
001:e6c9 11FF0F       ld de, 0x0FFF                            6
001:e6cc 010000       ld bc, 0x0000                            6
001:e6cf EDE6         and jkhl, bcde                           4
001:e6d1 FDF5         push jkhl                                18
001:e6d3 EDA53022     push 0x2230                              15
001:e6d7 C414         ld hl, (sp + 0x14)                       9
001:e6d9 29           add hl, hl                               2
001:e6da B1           ld de, hl                                2
001:e6db E1           pop hl                                   7
001:e6dc 19           add hl, de                               2
001:e6dd DDE400       ld hl, (hl + 0)                          11
001:e6e0 2B           dec hl                                   2
001:e6e1 A300         ld bcde, 0                               4
001:e6e3 B1           ld de, hl                                2
001:e6e4 FDF1         pop jkhl                                 13
001:e6e6 ED58         cp jkhl, bcde                            4
001:e6e8 EDB4         flag lt, hl                              4
001:e6ea 2B           dec hl                                   2
001:e6eb CC           bool hl                                  2
[STACK.LIB(400:1)]: while(locCounts[i] && (spaceLeft & 0xfffL) >= stackSizes[i]-1) {
001:e6ec CC           bool hl                                  2
001:e6ed CA54E7       jp z, 0xE754                             7
[STACK.LIB(400:67)]: {
[STACK.LIB(403:5)]: locCounts[i]--;
001:e6f0 A404         ld jkhl, 4                               4
001:e6f2 39           add hl, sp                               2
001:e6f3 E5           push hl                                  10
001:e6f4 C410         ld hl, (sp + 0x10)                       9
001:e6f6 29           add hl, hl                               2
001:e6f7 B1           ld de, hl                                2
001:e6f8 E1           pop hl                                   7
001:e6f9 19           add hl, de                               2
001:e6fa FD7D         ld iy, hl                                4
001:e6fc DDE400       ld hl, (hl + 0)                          11
001:e6ff 2B           dec hl                                   2
001:e700 FDF400       ld (iy + 0), hl                          13
[STACK.LIB(404:5)]: totalStackCounts--;
001:e703 C400         ld hl, (sp + 0x00)                       9
001:e705 2B           dec hl                                   2
001:e706 D400         ld (sp + 0x00), hl                       11
[STACK.LIB(405:5)]: freeStacks[allocIndex] = ((long)i<<24)+spaceLeft;
001:e708 EDA5C0B0     push 0xB0C0                              15
001:e70c C404         ld hl, (sp + 0x04)                       9
001:e70e 29           add hl, hl                               2
001:e70f 29           add hl, hl                               2
001:e710 B1           ld de, hl                                2
001:e711 E1           pop hl                                   7
001:e712 19           add hl, de                               2
001:e713 E5           push hl                                  10
001:e714 C410         ld hl, (sp + 0x10)                       9
001:e716 B1           ld de, hl                                2
001:e717 42           rl hl                                    2
001:e718 ED62         sbc hl, hl                               4
001:e71a 91           ld bc, hl                                2
001:e71b 7B           ld a, e                                  2
001:e71c A300         ld bcde, 0                               4
001:e71e 47           ld b, a                                  2
001:e71f B4           ex jkhl, bcde                            2
001:e720 DDEE12       ld bcde, (sp + 0x12)                     15
001:e723 EDC6         add jkhl, bcde                           4
001:e725 B4           ex jkhl, bcde                            2
001:e726 E1           pop hl                                   7
001:e727 DD1B         ld (hl), bcde                            18
[STACK.LIB(406:5)]: allocIndex++;
001:e729 C402         ld hl, (sp + 0x02)                       9
001:e72b 23           inc hl                                   2
001:e72c D402         ld (sp + 0x02), hl                       11
[STACK.LIB(407:5)]: spaceLeft -= stackSizes[i];
001:e72e DDEE10       ld bcde, (sp + 0x10)                     15
001:e731 DDF5         push bcde                                18
001:e733 EDA53022     push 0x2230                              15
001:e737 C414         ld hl, (sp + 0x14)                       9
001:e739 29           add hl, hl                               2
001:e73a B1           ld de, hl                                2
001:e73b E1           pop hl                                   7
001:e73c 19           add hl, de                               2
001:e73d DDE400       ld hl, (hl + 0)                          11
001:e740 A300         ld bcde, 0                               4
001:e742 B1           ld de, hl                                2
001:e743 FDF1         pop jkhl                                 13
001:e745 EDD6         sub jkhl, bcde                           4
001:e747 B1           ld de, hl                                2
001:e748 B9           ex jk, hl                                2
001:e749 91           ld bc, hl                                2
001:e74a B9           ex jk, hl                                2
001:e74b 211000       ld hl, 0x0010                            6
001:e74e 39           add hl, sp                               2
001:e74f DD1B         ld (hl), bcde                            18
[STACK.LIB(408:4)]: }
001:e751 C3B4E6       jp 0xE6B4                                7
[STACK.LIB(408:1)]: }
[STACK.LIB(409:3)]: }
[STACK.LIB(409:1)]: }
001:e754 C40E         ld hl, (sp + 0x0E)                       9
001:e756 2B           dec hl                                   2
001:e757 D40E         ld (sp + 0x0E), hl                       11
001:e759 48FF         cp hl, -1                                4
001:e75b EDA4         flag gt, hl                              4
001:e75d CC           bool hl                                  2
001:e75e C2B4E6       jp nz, 0xE6B4                            7
[STACK.LIB(409:1)]: }
[STACK.LIB(412:3)]: if (i < 0 ) {
001:e761 C40E         ld hl, (sp + 0x0E)                       9
001:e763 4800         cp hl, 0                                 4
001:e765 EDB4         flag lt, hl                              4
001:e767 CC           bool hl                                  2
001:e768 CA8BE7       jp z, 0xE78B                             7
[STACK.LIB(412:15)]: {
[STACK.LIB(413:4)]: spaceLeft -= 0x1000;
001:e76b FDEE10       ld jkhl, (sp + 0x10)                     15
001:e76e 110010       ld de, 0x1000                            6
001:e771 010000       ld bc, 0x0000                            6
001:e774 EDD6         sub jkhl, bcde                           4
001:e776 FDEF10       ld (sp + 0x10), jkhl                     19
[STACK.LIB(414:4)]: spaceLeft |= 0xfff;
001:e779 11FF0F       ld de, 0x0FFF                            6
001:e77c 010000       ld bc, 0x0000                            6
001:e77f EDF6         or jkhl, bcde                            4
001:e781 B1           ld de, hl                                2
001:e782 B9           ex jk, hl                                2
001:e783 91           ld bc, hl                                2
001:e784 B9           ex jk, hl                                2
001:e785 211000       ld hl, 0x0010                            6
001:e788 39           add hl, sp                               2
001:e789 DD1B         ld (hl), bcde                            18
[STACK.LIB(415:3)]: }
[STACK.LIB(416:1)]: }
[STACK.LIB(416:2)]: }
001:e78b C3A1E6       jp 0xE6A1                                7
[STACK.LIB(416:1)]: }
[STACK.LIB(417:1)]: }
[STACK.LIB(417:1)]: }
001:e78e 2718         add sp, 24                               4
001:e790 ED45         lret                                     13
[STACK.LIB(442:1)]: unsigned _Get_Stack_Size(long ptr) {
001:e792 27FE         add sp, -2                               4
[STACK.LIB(449:1)]: #asm
001:e794 C405         ld hl, (sp + 0x05)                       9
001:e796 EB           ex de, hl                                2
001:e797 C407         ld hl, (sp + 0x07)                       9
001:e799 AF           xor a                                    2
001:e79a 7F43         ld b, e                                  4
001:e79c 7F5A         ld e, d                                  4
001:e79e 57           ld d, a                                  2
001:e79f 29           add hl, hl                               2
001:e7a0 29           add hl, hl                               2
001:e7a1 29           add hl, hl                               2
001:e7a2 29           add hl, hl                               2
001:e7a3 19           add hl, de                               2
001:e7a4 7F55         ld d, l                                  4
001:e7a6 7F58         ld e, b                                  4
001:e7a8 7F6C         ld l, h                                  4
001:e7aa 67           ld h, a                                  2
001:e7ab D407         ld (sp + 0x07), hl                       11
001:e7ad EB           ex de, hl                                2
001:e7ae D405         ld (sp + 0x05), hl                       11
[STACK.LIB(469:1)]: #endasm
[STACK.LIB(470:2)]: for(i = 1; i < TOTAL_STACK_CNT ; i++) {
001:e7b0 BF           clr hl                                   2
001:e7b1 23           inc hl                                   2
001:e7b2 D400         ld (sp + 0x00), hl                       11
001:e7b4 4801         cp hl, 1                                 4
001:e7b6 EDB4         flag lt, hl                              4
001:e7b8 CC           bool hl                                  2
001:e7b9 CA40E8       jp z, 0xE840                             7
[STACK.LIB(470:1)]: for(i = 1; i < TOTAL_STACK_CNT ; i++) {
[STACK.LIB(470:40)]: {
[STACK.LIB(471:3)]: if(ptr > (freeStacks[i] & 0xffffffL) && ptr <= (freeStacks[i-1] & 0xffffffL)) {
001:e7bc DDEE05       ld bcde, (sp + 0x05)                     15
001:e7bf DDF5         push bcde                                18
001:e7c1 EDA5C0B0     push 0xB0C0                              15
001:e7c5 C406         ld hl, (sp + 0x06)                       9
001:e7c7 29           add hl, hl                               2
001:e7c8 29           add hl, hl                               2
001:e7c9 B1           ld de, hl                                2
001:e7ca E1           pop hl                                   7
001:e7cb 19           add hl, de                               2
001:e7cc FD1A         ld jkhl, (hl)                            14
001:e7ce A3FF         ld bcde, -1                              4
001:e7d0 01FF00       ld bc, 0x00FF                            6
001:e7d3 EDE6         and jkhl, bcde                           4
001:e7d5 B4           ex jkhl, bcde                            2
001:e7d6 FDF1         pop jkhl                                 13
001:e7d8 ED58         cp jkhl, bcde                            4
001:e7da EDA4         flag gt, hl                              4
001:e7dc CC           bool hl                                  2
001:e7dd CA03E8       jp z, 0xE803                             7
001:e7e0 DDEE05       ld bcde, (sp + 0x05)                     15
001:e7e3 DDF5         push bcde                                18
001:e7e5 EDA5C0B0     push 0xB0C0                              15
001:e7e9 C406         ld hl, (sp + 0x06)                       9
001:e7eb 2B           dec hl                                   2
001:e7ec 29           add hl, hl                               2
001:e7ed 29           add hl, hl                               2
001:e7ee B1           ld de, hl                                2
001:e7ef E1           pop hl                                   7
001:e7f0 19           add hl, de                               2
001:e7f1 FD1A         ld jkhl, (hl)                            14
001:e7f3 A3FF         ld bcde, -1                              4
001:e7f5 01FF00       ld bc, 0x00FF                            6
001:e7f8 EDE6         and jkhl, bcde                           4
001:e7fa B4           ex jkhl, bcde                            2
001:e7fb FDF1         pop jkhl                                 13
001:e7fd ED58         cp jkhl, bcde                            4
001:e7ff EDA4         flag gt, hl                              4
001:e801 2B           dec hl                                   2
001:e802 CC           bool hl                                  2
[STACK.LIB(471:1)]: if(ptr > (freeStacks[i] & 0xffffffL) && ptr <= (freeStacks[i-1] & 0xffffffL)) {
001:e803 CC           bool hl                                  2
001:e804 CA33E8       jp z, 0xE833                             7
[STACK.LIB(471:81)]: {
[STACK.LIB(479:4)]: return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
001:e807 EDA53022     push 0x2230                              15
001:e80b EDA5C0B0     push 0xB0C0                              15
001:e80f C404         ld hl, (sp + 0x04)                       9
001:e811 2B           dec hl                                   2
001:e812 29           add hl, hl                               2
001:e813 29           add hl, hl                               2
001:e814 B1           ld de, hl                                2
001:e815 E1           pop hl                                   7
001:e816 19           add hl, de                               2
001:e817 DD1A         ld bcde, (hl)                            14
001:e819 60           rlc bc                                   2
001:e81a 61           rrc bc                                   2
001:e81b ED62         sbc hl, hl                               4
001:e81d B1           ld de, hl                                2
001:e81e DD4F         rlc 8, bcde                              4
001:e820 91           ld bc, hl                                2
001:e821 A1           ld hl, de                                2
001:e822 117F00       ld de, 0x007F                            6
001:e825 DC           and hl, de                               2
001:e826 29           add hl, hl                               2
001:e827 B1           ld de, hl                                2
001:e828 E1           pop hl                                   7
001:e829 19           add hl, de                               2
001:e82a DDE400       ld hl, (hl + 0)                          11
[STACK.LIB(479:1)]: return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
001:e82d D9           exx                                      2
001:e82e 2702         add sp, 2                                4
001:e830 D9           exx                                      2
001:e831 ED45         lret                                     13
[STACK.LIB(481:3)]: }
[STACK.LIB(482:1)]: }
[STACK.LIB(482:2)]: }
[STACK.LIB(482:1)]: }
001:e833 C400         ld hl, (sp + 0x00)                       9
001:e835 23           inc hl                                   2
001:e836 D400         ld (sp + 0x00), hl                       11
001:e838 4801         cp hl, 1                                 4
001:e83a EDB4         flag lt, hl                              4
001:e83c CC           bool hl                                  2
001:e83d C2BCE7       jp nz, 0xE7BC                            7
[STACK.LIB(482:1)]: }
[STACK.LIB(483:2)]: if(ptr <= (freeStacks[i-1] & 0xffffffL)) {
001:e840 DDEE05       ld bcde, (sp + 0x05)                     15
001:e843 DDF5         push bcde                                18
001:e845 EDA5C0B0     push 0xB0C0                              15
001:e849 C406         ld hl, (sp + 0x06)                       9
001:e84b 2B           dec hl                                   2
001:e84c 29           add hl, hl                               2
001:e84d 29           add hl, hl                               2
001:e84e B1           ld de, hl                                2
001:e84f E1           pop hl                                   7
001:e850 19           add hl, de                               2
001:e851 FD1A         ld jkhl, (hl)                            14
001:e853 A3FF         ld bcde, -1                              4
001:e855 01FF00       ld bc, 0x00FF                            6
001:e858 EDE6         and jkhl, bcde                           4
001:e85a B4           ex jkhl, bcde                            2
001:e85b FDF1         pop jkhl                                 13
001:e85d ED58         cp jkhl, bcde                            4
001:e85f EDA4         flag gt, hl                              4
001:e861 2B           dec hl                                   2
001:e862 CC           bool hl                                  2
001:e863 CA8FE8       jp z, 0xE88F                             7
[STACK.LIB(483:43)]: {
[STACK.LIB(484:3)]: return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
001:e866 EDA53022     push 0x2230                              15
001:e86a EDA5C0B0     push 0xB0C0                              15
001:e86e C404         ld hl, (sp + 0x04)                       9
001:e870 2B           dec hl                                   2
001:e871 29           add hl, hl                               2
001:e872 29           add hl, hl                               2
001:e873 B1           ld de, hl                                2
001:e874 E1           pop hl                                   7
001:e875 19           add hl, de                               2
001:e876 DD1A         ld bcde, (hl)                            14
001:e878 60           rlc bc                                   2
001:e879 61           rrc bc                                   2
001:e87a ED62         sbc hl, hl                               4
001:e87c B1           ld de, hl                                2
001:e87d DD4F         rlc 8, bcde                              4
001:e87f 91           ld bc, hl                                2
001:e880 A1           ld hl, de                                2
001:e881 117F00       ld de, 0x007F                            6
001:e884 DC           and hl, de                               2
001:e885 29           add hl, hl                               2
001:e886 B1           ld de, hl                                2
001:e887 E1           pop hl                                   7
001:e888 19           add hl, de                               2
001:e889 DDE400       ld hl, (hl + 0)                          11
001:e88c C32DE8       jp 0xE82D                                7
[STACK.LIB(485:2)]: }
[STACK.LIB(486:1)]: return 0;
[STACK.LIB(486:2)]: return 0;
001:e88f BF           clr hl                                   2
001:e890 C32DE8       jp 0xE82D                                7
[STACK.LIB(514:1)]: long _Alloc_Stack(unsigned int sz)
001:e893 27F6         add sp, -10                              4
[STACK.LIB(525:2)]: for(i = 0;i < STACKPOOLCOUNT;i++) {
001:e895 BF           clr hl                                   2
001:e896 D404         ld (sp + 0x04), hl                       11
001:e898 4805         cp hl, 5                                 4
001:e89a EDB4         flag lt, hl                              4
001:e89c CC           bool hl                                  2
001:e89d CACEE8       jp z, 0xE8CE                             7
[STACK.LIB(525:1)]: for(i = 0;i < STACKPOOLCOUNT;i++) {
[STACK.LIB(525:36)]: {
[STACK.LIB(526:3)]: if(sz <= stackSizes[i]) {
001:e8a0 C40D         ld hl, (sp + 0x0D)                       9
001:e8a2 E5           push hl                                  10
001:e8a3 EDA53022     push 0x2230                              15
001:e8a7 C408         ld hl, (sp + 0x08)                       9
001:e8a9 29           add hl, hl                               2
001:e8aa B1           ld de, hl                                2
001:e8ab E1           pop hl                                   7
001:e8ac 19           add hl, de                               2
001:e8ad DDE400       ld hl, (hl + 0)                          11
001:e8b0 D1           pop de                                   7
001:e8b1 ED48         cp hl, de                                4
001:e8b3 EDD4         flag nc, hl                              4
001:e8b5 CC           bool hl                                  2
001:e8b6 CAC1E8       jp z, 0xE8C1                             7
[STACK.LIB(526:27)]: {
[STACK.LIB(527:4)]: sz = i;
001:e8b9 C404         ld hl, (sp + 0x04)                       9
001:e8bb D40D         ld (sp + 0x0D), hl                       11
[STACK.LIB(528:4)]: break;
001:e8bd 180F         jr 0xE8CE                                5
001:e8bf 00           nop                                      2
001:e8c0 00           nop                                      2
[STACK.LIB(529:3)]: }
[STACK.LIB(530:1)]: }
[STACK.LIB(530:2)]: }
[STACK.LIB(530:1)]: }
001:e8c1 C404         ld hl, (sp + 0x04)                       9
001:e8c3 23           inc hl                                   2
001:e8c4 D404         ld (sp + 0x04), hl                       11
001:e8c6 4805         cp hl, 5                                 4
001:e8c8 EDB4         flag lt, hl                              4
001:e8ca CC           bool hl                                  2
001:e8cb C2A0E8       jp nz, 0xE8A0                            7
[STACK.LIB(530:1)]: }
[STACK.LIB(532:2)]: if (i == STACKPOOLCOUNT) {
001:e8ce C404         ld hl, (sp + 0x04)                       9
001:e8d0 4805         cp hl, 5                                 4
001:e8d2 EDCC         flag z, hl                               4
001:e8d4 CC           bool hl                                  2
001:e8d5 CAE1E8       jp z, 0xE8E1                             7
[STACK.LIB(532:27)]: {
[STACK.LIB(533:3)]: return 0;
001:e8d8 BF           clr hl                                   2
001:e8d9 A300         ld bcde, 0                               4
[STACK.LIB(533:1)]: return 0;
001:e8db D9           exx                                      2
001:e8dc 270A         add sp, 10                               4
001:e8de D9           exx                                      2
001:e8df ED45         lret                                     13
[STACK.LIB(534:2)]: }
[STACK.LIB(535:1)]: fsPtr = (char *) freeStacks;
[STACK.LIB(535:2)]: fsPtr = (char *) freeStacks;
001:e8e1 21C0B0       ld hl, 0xB0C0                            6
001:e8e4 D400         ld (sp + 0x00), hl                       11
[STACK.LIB(536:2)]: for(i = TOTAL_STACK_CNT-1; i >= 0;i--) {
001:e8e6 BF           clr hl                                   2
001:e8e7 D404         ld (sp + 0x04), hl                       11
001:e8e9 48FF         cp hl, -1                                4
001:e8eb EDA4         flag gt, hl                              4
001:e8ed CC           bool hl                                  2
001:e8ee CA44E9       jp z, 0xE944                             7
[STACK.LIB(536:1)]: for(i = TOTAL_STACK_CNT-1; i >= 0;i--) {
[STACK.LIB(536:41)]: {
[STACK.LIB(538:3)]: i2 = i*sizeof(long)+sizeof(long)-1;
001:e8f1 C404         ld hl, (sp + 0x04)                       9
001:e8f3 29           add hl, hl                               2
001:e8f4 29           add hl, hl                               2
001:e8f5 110400       ld de, 0x0004                            6
001:e8f8 19           add hl, de                               2
001:e8f9 2B           dec hl                                   2
001:e8fa D402         ld (sp + 0x02), hl                       11
[STACK.LIB(539:3)]: if(!(fsPtr[i2] & 0x80)) {
001:e8fc B1           ld de, hl                                2
001:e8fd C400         ld hl, (sp + 0x00)                       9
001:e8ff 19           add hl, de                               2
001:e900 7E           ld a, (hl)                               5
001:e901 BF           clr hl                                   2
001:e902 6F           ld l, a                                  2
001:e903 118000       ld de, 0x0080                            6
001:e906 DC           and hl, de                               2
001:e907 CC           bool hl                                  2
001:e908 2B           dec hl                                   2
001:e909 CC           bool hl                                  2
001:e90a CA37E9       jp z, 0xE937                             7
[STACK.LIB(539:27)]: {
[STACK.LIB(540:4)]: if(fsPtr[i2]>=sz) {
001:e90d C402         ld hl, (sp + 0x02)                       9
001:e90f B1           ld de, hl                                2
001:e910 C400         ld hl, (sp + 0x00)                       9
001:e912 19           add hl, de                               2
001:e913 7E           ld a, (hl)                               5
001:e914 BF           clr hl                                   2
001:e915 6F           ld l, a                                  2
001:e916 E5           push hl                                  10
001:e917 C40F         ld hl, (sp + 0x0F)                       9
001:e919 B1           ld de, hl                                2
001:e91a E1           pop hl                                   7
001:e91b ED48         cp hl, de                                4
001:e91d EDD4         flag nc, hl                              4
001:e91f CC           bool hl                                  2
001:e920 CA37E9       jp z, 0xE937                             7
[STACK.LIB(540:22)]: {
[STACK.LIB(541:5)]: fsPtr[i2] |= 0x80;
001:e923 C402         ld hl, (sp + 0x02)                       9
001:e925 B1           ld de, hl                                2
001:e926 C400         ld hl, (sp + 0x00)                       9
001:e928 19           add hl, de                               2
001:e929 3E80         ld a, 0x80                               4
001:e92b 7FB6         or (hl)                                  7
001:e92d 77           ld (hl), a                               6
001:e92e 118000       ld de, 0x0080                            6
001:e931 BF           clr hl                                   2
001:e932 6F           ld l, a                                  2
[STACK.LIB(542:5)]: break;
001:e933 180F         jr 0xE944                                5
001:e935 00           nop                                      2
001:e936 00           nop                                      2
[STACK.LIB(543:4)]: }
[STACK.LIB(544:1)]: }
[STACK.LIB(544:3)]: }
[STACK.LIB(545:1)]: }
[STACK.LIB(545:2)]: }
[STACK.LIB(545:1)]: }
001:e937 C404         ld hl, (sp + 0x04)                       9
001:e939 2B           dec hl                                   2
001:e93a D404         ld (sp + 0x04), hl                       11
001:e93c 48FF         cp hl, -1                                4
001:e93e EDA4         flag gt, hl                              4
001:e940 CC           bool hl                                  2
001:e941 C2F1E8       jp nz, 0xE8F1                            7
[STACK.LIB(545:1)]: }
[STACK.LIB(547:2)]: if (i < 0) {
001:e944 C404         ld hl, (sp + 0x04)                       9
001:e946 4800         cp hl, 0                                 4
001:e948 EDB4         flag lt, hl                              4
001:e94a CC           bool hl                                  2
001:e94b CA54E9       jp z, 0xE954                             7
[STACK.LIB(547:13)]: {
[STACK.LIB(548:3)]: return 0;
001:e94e BF           clr hl                                   2
001:e94f A300         ld bcde, 0                               4
001:e951 C3DBE8       jp 0xE8DB                                7
[STACK.LIB(549:2)]: }
[STACK.LIB(550:1)]: retval = freeStacks[i] & 0xffffff; // get the physical address
[STACK.LIB(550:2)]: retval = freeStacks[i] & 0xffffff; // get the physical address
001:e954 EDA5C0B0     push 0xB0C0                              15
001:e958 C406         ld hl, (sp + 0x06)                       9
001:e95a 29           add hl, hl                               2
001:e95b 29           add hl, hl                               2
001:e95c B1           ld de, hl                                2
001:e95d E1           pop hl                                   7
001:e95e 19           add hl, de                               2
001:e95f FD1A         ld jkhl, (hl)                            14
001:e961 A3FF         ld bcde, -1                              4
001:e963 01FF00       ld bc, 0x00FF                            6
001:e966 EDE6         and jkhl, bcde                           4
001:e968 B1           ld de, hl                                2
001:e969 B9           ex jk, hl                                2
001:e96a 91           ld bc, hl                                2
001:e96b B9           ex jk, hl                                2
001:e96c DDEF06       ld (sp + 0x06), bcde                     19
[STACK.LIB(561:4)]: _gen_lin2seg(&retval, 0xd);
001:e96f EDA50D00     push 0x000D                              15
001:e973 210800       ld hl, 0x0008                            6
001:e976 39           add hl, sp                               2
001:e977 E5           push hl                                  10
001:e978 CF0DEA01     lcall _gen_lin2seg                       19
001:e97c 2704         add sp, 4                                4
[STACK.LIB(562:2)]: return retval;
001:e97e 210600       ld hl, 0x0006                            6
001:e981 39           add hl, sp                               2
001:e982 DD1A         ld bcde, (hl)                            14
001:e984 C3DBE8       jp 0xE8DB                                7
[STACK.LIB(590:1)]: int _Dealloc_Stack(long ptr)
001:e987 27FC         add sp, -4                               4
[STACK.LIB(599:1)]: #asm
001:e989 C407         ld hl, (sp + 0x07)                       9
001:e98b EB           ex de, hl                                2
001:e98c C409         ld hl, (sp + 0x09)                       9
001:e98e AF           xor a                                    2
001:e98f 7F43         ld b, e                                  4
001:e991 7F5A         ld e, d                                  4
001:e993 57           ld d, a                                  2
001:e994 29           add hl, hl                               2
001:e995 29           add hl, hl                               2
001:e996 29           add hl, hl                               2
001:e997 29           add hl, hl                               2
001:e998 19           add hl, de                               2
001:e999 7C           ld a, h                                  2
001:e99a E60F         and 0x0F                                 4
001:e99c 7F55         ld d, l                                  4
001:e99e 7F58         ld e, b                                  4
001:e9a0 6F           ld l, a                                  2
001:e9a1 2600         ld h, 0x00                               4
001:e9a3 D409         ld (sp + 0x09), hl                       11
001:e9a5 EB           ex de, hl                                2
001:e9a6 D407         ld (sp + 0x07), hl                       11
[STACK.LIB(621:1)]: #endasm
[STACK.LIB(622:2)]: fsPtr = (char *) freeStacks;
001:e9a8 21C0B0       ld hl, 0xB0C0                            6
001:e9ab 22B6B0       ld (0xB0B6), hl                          13
[STACK.LIB(623:2)]: for(i = TOTAL_STACK_CNT-1; i >= 0; i--) {
001:e9ae BF           clr hl                                   2
001:e9af D402         ld (sp + 0x02), hl                       11
001:e9b1 48FF         cp hl, -1                                4
001:e9b3 EDA4         flag gt, hl                              4
001:e9b5 CC           bool hl                                  2
001:e9b6 CA09EA       jp z, 0xEA09                             7
[STACK.LIB(623:1)]: for(i = TOTAL_STACK_CNT-1; i >= 0; i--) {
[STACK.LIB(623:42)]: {
[STACK.LIB(624:3)]: if((freeStacks[i]&0xfffff) == ptr) {
001:e9b9 EDA5C0B0     push 0xB0C0                              15
001:e9bd C404         ld hl, (sp + 0x04)                       9
001:e9bf 29           add hl, hl                               2
001:e9c0 29           add hl, hl                               2
001:e9c1 B1           ld de, hl                                2
001:e9c2 E1           pop hl                                   7
001:e9c3 19           add hl, de                               2
001:e9c4 FD1A         ld jkhl, (hl)                            14
001:e9c6 A3FF         ld bcde, -1                              4
001:e9c8 010F00       ld bc, 0x000F                            6
001:e9cb EDE6         and jkhl, bcde                           4
001:e9cd DDEE07       ld bcde, (sp + 0x07)                     15
001:e9d0 ED58         cp jkhl, bcde                            4
001:e9d2 EDCC         flag z, hl                               4
001:e9d4 CC           bool hl                                  2
001:e9d5 CAFCE9       jp z, 0xE9FC                             7
[STACK.LIB(624:38)]: {
[STACK.LIB(625:4)]: i2 = i*sizeof(long)+sizeof(long)-1;
001:e9d8 C402         ld hl, (sp + 0x02)                       9
001:e9da 29           add hl, hl                               2
001:e9db 29           add hl, hl                               2
001:e9dc 110400       ld de, 0x0004                            6
001:e9df 19           add hl, de                               2
001:e9e0 2B           dec hl                                   2
001:e9e1 D400         ld (sp + 0x00), hl                       11
[STACK.LIB(626:4)]: fsPtr[i2] &= 0x7f;
001:e9e3 2AB6B0       ld hl, (0xB0B6)                          11
001:e9e6 E5           push hl                                  10
001:e9e7 C402         ld hl, (sp + 0x02)                       9
001:e9e9 B1           ld de, hl                                2
001:e9ea E1           pop hl                                   7
001:e9eb 19           add hl, de                               2
001:e9ec 3E7F         ld a, 0x7F                               4
001:e9ee 7FA6         and (hl)                                 7
001:e9f0 77           ld (hl), a                               6
001:e9f1 117F00       ld de, 0x007F                            6
[STACK.LIB(627:4)]: return TRUE;
001:e9f4 BF           clr hl                                   2
001:e9f5 23           inc hl                                   2
[STACK.LIB(627:1)]: return TRUE;
001:e9f6 D9           exx                                      2
001:e9f7 2704         add sp, 4                                4
001:e9f9 D9           exx                                      2
001:e9fa ED45         lret                                     13
[STACK.LIB(628:3)]: }
[STACK.LIB(629:1)]: }
[STACK.LIB(629:2)]: }
[STACK.LIB(629:1)]: }
001:e9fc C402         ld hl, (sp + 0x02)                       9
001:e9fe 2B           dec hl                                   2
001:e9ff D402         ld (sp + 0x02), hl                       11
001:ea01 48FF         cp hl, -1                                4
001:ea03 EDA4         flag gt, hl                              4
001:ea05 CC           bool hl                                  2
001:ea06 C2B9E9       jp nz, 0xE9B9                            7
[STACK.LIB(629:1)]: }
[STACK.LIB(630:2)]: return FALSE;
001:ea09 BF           clr hl                                   2
001:ea0a C3F6E9       jp 0xE9F6                                7
[XMEM.LIB(19:1)]: void _gen_lin2seg(long* laddr, char norm) {
[XMEM.LIB(21:1)]: #asm __nodebug
001:ea0d DDE5         push ix                                  12
001:ea0f C407         ld hl, (sp + 0x07)                       9
001:ea11 91           ld bc, hl                                2
001:ea12 DDC405       ld ix, (sp + 0x05)                       11
001:ea15 DD7E02       ld a, (ix + 2)                           9
001:ea18 E400         ld hl, (ix + 0)                          9
001:ea1a DDF5         push bcde                                18
001:ea1c 1600         ld d, 0x00                               4
001:ea1e 5F           ld e, a                                  2
001:ea1f 29           add hl, hl                               2
001:ea20 F3           rl de                                    2
001:ea21 29           add hl, hl                               2
001:ea22 F3           rl de                                    2
001:ea23 29           add hl, hl                               2
001:ea24 F3           rl de                                    2
001:ea25 29           add hl, hl                               2
001:ea26 F3           rl de                                    2
001:ea27 7B           ld a, e                                  2
001:ea28 7F91         sub c                                    4
001:ea2a 5F           ld e, a                                  2
001:ea2b 7A           ld a, d                                  2
001:ea2c DE00         sbc 0x00                                 4
001:ea2e 57           ld d, a                                  2
001:ea2f ED7C         ex jk', hl                               4
001:ea31 A1           ld hl, de                                2
001:ea32 B9           ex jk, hl                                2
001:ea33 ED7C         ex jk', hl                               4
001:ea35 79           ld a, c                                  2
001:ea36 1F           rra                                      2
001:ea37 FC           rr hl                                    2
001:ea38 1F           rra                                      2
001:ea39 FC           rr hl                                    2
001:ea3a 1F           rra                                      2
001:ea3b FC           rr hl                                    2
001:ea3c 1F           rra                                      2
001:ea3d FC           rr hl                                    2
001:ea3e 7B           ld a, e                                  2
001:ea3f DDF1         pop bcde                                 13
001:ea41 F400         ld (ix + 0), hl                          11
001:ea43 B9           ex jk, hl                                2
001:ea44 F402         ld (ix + 2), hl                          11
001:ea46 DDE1         pop ix                                   9
[XMEM.LIB(35:1)]: #endasm
[XMEM.LIB(36:1)]: }
[XMEM.LIB(36:1)]: }
001:ea48 ED45         lret                                     13
[MEM.LIB(607:1)]: void _init_xalloc()
001:ea4a 27FE         add sp, -2                               4
[MEM.LIB(614:4)]: if (alloc_init(_orgtable, _orgtablesize) == -ENOMEM)
001:ea4c 21A327       ld hl, 0x27A3                            6
001:ea4f DDE400       ld hl, (hl + 0)                          11
001:ea52 E5           push hl                                  10
001:ea53 21A527       ld hl, 0x27A5                            6
001:ea56 E5           push hl                                  10
001:ea57 CFC1ED01     lcall 01:edc1                            19
001:ea5b 2704         add sp, 4                                4
001:ea5d 48F4         cp hl, -12                               4
001:ea5f EDCC         flag z, hl                               4
001:ea61 CC           bool hl                                  2
001:ea62 CA78EA       jp z, 0xEA78                             7
[MEM.LIB(615:4)]: {
[MEM.LIB(616:7)]: exception(-ENOMEM);
001:ea65 21F4FF       ld hl, 0xFFF4                            6
001:ea68 E5           push hl                                  10
001:ea69 CD7321       call exception                           12
001:ea6c 2702         add sp, 2                                4
[MEM.LIB(617:7)]: exit(-ENOMEM);
001:ea6e 21F4FF       ld hl, 0xFFF4                            6
001:ea71 E5           push hl                                  10
001:ea72 CD8125       call exit                                12
001:ea75 00           nop                                      2
001:ea76 2702         add sp, 2                                4
[MEM.LIB(618:4)]: }
[MEM.LIB(620:1)]: xalloc_init(_orgtable, _orgtablesize);
[MEM.LIB(620:4)]: xalloc_init(_orgtable, _orgtablesize);
001:ea78 21A327       ld hl, 0x27A3                            6
001:ea7b DDE400       ld hl, (hl + 0)                          11
001:ea7e E5           push hl                                  10
001:ea7f 21A527       ld hl, 0x27A5                            6
001:ea82 E5           push hl                                  10
001:ea83 CFE8E803     lcall xalloc_init                        19
001:ea87 2704         add sp, 4                                4
[MEM.LIB(626:1)]: }
[MEM.LIB(626:1)]: }
001:ea89 2702         add sp, 2                                4
001:ea8b ED45         lret                                     13
[STDIO.C(277:1)]: void _stdio_files_init(void)
[STDIO.C(279:2)]: _f_memset( _stdio_files, 0, sizeof _stdio_files);
001:ea8d 11F801       ld de, 0x01F8                            6
001:ea90 010000       ld bc, 0x0000                            6
001:ea93 DDF5         push bcde                                18
001:ea95 BF           clr hl                                   2
001:ea96 E5           push hl                                  10
001:ea97 ED1C087D1000 ld px, 0x00107D08                        12
001:ea9d EDD5         push px                                  18
001:ea9f CDBB23       call _f_memset                           12
001:eaa2 00           nop                                      2
001:eaa3 270A         add sp, 10                               4
[STDIO.C(282:2)]: _stdio_files[0].flags = _FILE_FLAG_USED
001:eaa5 ED1C087D1000 ld px, 0x00107D08                        12
001:eaab 2111C0       ld hl, 0xC011                            6
001:eaae 9600         ld (px + 0), hl                          11
[STDIO.C(286:2)]: _stdio_files[0].read = _stream_stdin_read;
001:eab0 ED1C087D1000 ld px, 0x00107D08                        12
001:eab6 FDDD         ld jkhl, px                              4
001:eab8 A337         ld bcde, 55                              4
001:eaba EDC6         add jkhl, bcde                           4
001:eabc FDF5         push jkhl                                18
001:eabe 21EB23       ld hl, 0x23EB                            6
001:eac1 EDD1         pop px                                   13
001:eac3 9600         ld (px + 0), hl                          11
[STDIO.C(289:2)]: _stdio_files[1].flags = _stdio_files[2].flags = _FILE_FLAG_USED
001:eac5 21087D       ld hl, 0x7D08                            6
001:eac8 A91000       ld jk, 0x0010                            6
001:eacb A33F         ld bcde, 63                              4
001:eacd EDC6         add jkhl, bcde                           4
001:eacf FDF5         push jkhl                                18
001:ead1 21087D       ld hl, 0x7D08                            6
001:ead4 A91000       ld jk, 0x0010                            6
001:ead7 A37E         ld bcde, 126                             4
001:ead9 EDC6         add jkhl, bcde                           4
001:eadb FD9D         ld px, jkhl                              4
001:eadd 2122C9       ld hl, 0xC922                            6
001:eae0 9600         ld (px + 0), hl                          11
001:eae2 EDD1         pop px                                   13
001:eae4 2122C9       ld hl, 0xC922                            6
001:eae7 9600         ld (px + 0), hl                          11
[STDIO.C(295:2)]: _stdio_files[1].write = _stdio_files[2].write = _stream_stdout_write;
001:eae9 21087D       ld hl, 0x7D08                            6
001:eaec A91000       ld jk, 0x0010                            6
001:eaef A33F         ld bcde, 63                              4
001:eaf1 EDC6         add jkhl, bcde                           4
001:eaf3 A339         ld bcde, 57                              4
001:eaf5 EDC6         add jkhl, bcde                           4
001:eaf7 FDF5         push jkhl                                18
001:eaf9 ED1C087D1000 ld px, 0x00107D08                        12
001:eaff FDDD         ld jkhl, px                              4
001:eb01 A37E         ld bcde, 126                             4
001:eb03 EDC6         add jkhl, bcde                           4
001:eb05 A339         ld bcde, 57                              4
001:eb07 EDC6         add jkhl, bcde                           4
001:eb09 FDF5         push jkhl                                18
001:eb0b 21F723       ld hl, 0x23F7                            6
001:eb0e EDD1         pop px                                   13
001:eb10 9600         ld (px + 0), hl                          11
001:eb12 EDD1         pop px                                   13
001:eb14 9600         ld (px + 0), hl                          11
[STDIO.C(296:2)]: _stdio_files[1].bufsize = sizeof _stdout_buf;
001:eb16 21087D       ld hl, 0x7D08                            6
001:eb19 A91000       ld jk, 0x0010                            6
001:eb1c A33F         ld bcde, 63                              4
001:eb1e EDC6         add jkhl, bcde                           4
001:eb20 A315         ld bcde, 21                              4
001:eb22 EDC6         add jkhl, bcde                           4
001:eb24 FD9D         ld px, jkhl                              4
001:eb26 218000       ld hl, 0x0080                            6
001:eb29 9600         ld (px + 0), hl                          11
[STDIO.C(297:2)]: _stdio_files[1].buffer_base = _stdout_buf;
001:eb2b 21087D       ld hl, 0x7D08                            6
001:eb2e A91000       ld jk, 0x0010                            6
001:eb31 A33F         ld bcde, 63                              4
001:eb33 EDC6         add jkhl, bcde                           4
001:eb35 A31B         ld bcde, 27                              4
001:eb37 EDC6         add jkhl, bcde                           4
001:eb39 FDF5         push jkhl                                18
001:eb3b ED1C807F1000 ld px, 0x00107F80                        12
001:eb41 6D97         ld py, px                                4
001:eb43 EDD1         pop px                                   13
001:eb45 6D9900       ld (px + 0), py                          19
001:eb48 6D67         ld px, py                                4
[STDIO.C(298:2)]: _stdio_files[2].bufsize = sizeof _stderr_buf;
001:eb4a 21087D       ld hl, 0x7D08                            6
001:eb4d A91000       ld jk, 0x0010                            6
001:eb50 A37E         ld bcde, 126                             4
001:eb52 EDC6         add jkhl, bcde                           4
001:eb54 A315         ld bcde, 21                              4
001:eb56 EDC6         add jkhl, bcde                           4
001:eb58 FD9D         ld px, jkhl                              4
001:eb5a 218000       ld hl, 0x0080                            6
001:eb5d 9600         ld (px + 0), hl                          11
[STDIO.C(299:2)]: _stdio_files[2].buffer_base = _stderr_buf;
001:eb5f 21087D       ld hl, 0x7D08                            6
001:eb62 A91000       ld jk, 0x0010                            6
001:eb65 A37E         ld bcde, 126                             4
001:eb67 EDC6         add jkhl, bcde                           4
001:eb69 A31B         ld bcde, 27                              4
001:eb6b EDC6         add jkhl, bcde                           4
001:eb6d FDF5         push jkhl                                18
001:eb6f ED1C007F1000 ld px, 0x00107F00                        12
001:eb75 6D97         ld py, px                                4
001:eb77 EDD1         pop px                                   13
001:eb79 6D9900       ld (px + 0), py                          19
001:eb7c 6D67         ld px, py                                4
[STDIO.C(300:1)]: }
[STDIO.C(300:1)]: }
001:eb7e ED45         lret                                     13
[STDIO_DK.C(284:1)]: int _kbhit()
001:eb80 2A48B3       ld hl, (0xB348)                          11
[STDIO_DK.C(295:1)]: return dkCharReady;
001:eb83 ED45         lret                                     13
[STDIO_DK.C(299:1)]: int kbhit()
[STDIO_DK.C(302:2)]: return (_stdio_files[0].unget_idx || _kbhit());
001:eb85 21087D       ld hl, 0x7D08                            6
001:eb88 A91000       ld jk, 0x0010                            6
001:eb8b A32F         ld bcde, 47                              4
001:eb8d EDC6         add jkhl, bcde                           4
001:eb8f FD9D         ld px, jkhl                              4
001:eb91 9500         ld hl, (px + 0)                          9
001:eb93 CC           bool hl                                  2
001:eb94 C29CEB       jp nz, 0xEB9C                            7
001:eb97 CF80EB01     lcall _kbhit                             19
001:eb9b CC           bool hl                                  2
[STDIO_DK.C(302:1)]: return (_stdio_files[0].unget_idx || _kbhit());
[STDIO_DK.C(302:1)]: return (_stdio_files[0].unget_idx || _kbhit());
001:eb9c ED45         lret                                     13
[STDIO_DK.C(308:1)]: size_t _stream_stdin_read( void __far *cookie, void __far *buffer, size_t bytes)
[STDIO_DK.C(317:1)]: if (! bytes)
001:eb9e C40B         ld hl, (sp + 0x0B)                       9
001:eba0 CC           bool hl                                  2
001:eba1 2B           dec hl                                   2
001:eba2 CC           bool hl                                  2
001:eba3 CAA9EB       jp z, 0xEBA9                             7
[STDIO_DK.C(318:2)]: {
[STDIO_DK.C(319:3)]: return 0;
001:eba6 BF           clr hl                                   2
[STDIO_DK.C(319:1)]: return 0;
001:eba7 ED45         lret                                     13
[STDIO_DK.C(320:2)]: }
[STDIO_DK.C(323:1)]: while (! _kbhit())
[STDIO_DK.C(323:1)]: while (! _kbhit())
[STDIO_DK.C(323:2)]: while (! _kbhit())
001:eba9 CF80EB01     lcall _kbhit                             19
001:ebad CC           bool hl                                  2
001:ebae 2B           dec hl                                   2
001:ebaf CC           bool hl                                  2
001:ebb0 CAB7EB       jp z, 0xEBB7                             7
[STDIO_DK.C(324:2)]: {
[STDIO_DK.C(325:1)]: #asm
001:ebb3 EF           rst 0x28                                 10
[STDIO_DK.C(327:1)]: #endasm
[STDIO_DK.C(328:2)]: }
001:ebb4 C3A9EB       jp 0xEBA9                                7
[STDIO_DK.C(328:1)]: }
[STDIO_DK.C(355:2)]: dkGetCharFromStdio();
001:ebb7 CF49EC00     lcall dkGetCharFromStdio                 19
[STDIO_DK.C(356:2)]: *(char __far *)buffer = dkCharData;
001:ebbb DDEE07       ld bcde, (sp + 0x07)                     15
001:ebbe DD9D         ld px, bcde                              4
001:ebc0 3A4AB3       ld a, (0xB34A)                           9
001:ebc3 9E00         ld (px + 0), a                           8
[STDIO_DK.C(358:2)]: return 1;
001:ebc5 BF           clr hl                                   2
001:ebc6 23           inc hl                                   2
001:ebc7 C3A7EB       jp 0xEBA7                                7
[STDIO_DK.C(364:1)]: size_t _stream_stdout_write( void __far *cookie, const void __far *buffer,
[STDIO_DK.C(371:1)]: #asm
001:ebca 27FE         add sp, -2                               4
[STDIO_DK.C(371:1)]: #asm
001:ebcc DDD400       ld (sp + 0x00), ix                       13
001:ebcf 3AF3B4       ld a, (0xB4F3)                           9
001:ebd2 E608         and 0x08                                 4
001:ebd4 284D         jr z, 0xEC23                             5
[STDIO_DK.C(412:1)]: .dkDoMsg:
001:ebd6 CD2A20       call dkProlog                            12
[STDIO_DK.C(416:1)]: __dk_sschecklock:
001:ebd9 214FB3       ld hl, 0xB34F                            6
[STDIO_DK.C(418:1)]: .getlock:
001:ebdc CB46         bit 0, (hl)                              7
001:ebde CBC6         set 0, (hl)                              10
001:ebe0 20FA         jr nz, 0xEBDC                            5
[STDIO_DK.C(423:1)]: __dk_ssgotlock:
001:ebe2 C40D         ld hl, (sp + 0x0D)                       9
001:ebe4 4C           test hl                                  2
001:ebe5 2837         jr z, 0xEC1E                             5
001:ebe7 11F200       ld de, 0x00F2                            6
001:ebea ED48         cp hl, de                                4
001:ebec 3803         jr c, 0xEBF1                             5
001:ebee A1           ld hl, de                                2
001:ebef D40D         ld (sp + 0x0D), hl                       11
[STDIO_DK.C(432:1)]: .sizeok:
001:ebf1 91           ld bc, hl                                2
001:ebf2 1601         ld d, 0x01                               4
001:ebf4 1E15         ld e, 0x15                               4
001:ebf6 ED1409       ld px, (sp + 0x09)                       15
001:ebf9 CD6508       call dkBuildResponseF                    12
001:ebfc 3AB0B3       ld a, (0xB3B0)                           9
001:ebff CB7F         bit 7, a                                 4
001:ec01 2807         jr z, 0xEC0A                             5
001:ec03 214FB3       ld hl, 0xB34F                            6
001:ec06 CB86         res 0, (hl)                              10
001:ec08 1814         jr 0xEC1E                                5
[STDIO_DK.C(447:1)]: __dk_ssnotinwatch:
001:ec0a CDBB19       call dkSetStdioTimer                     12
[STDIO_DK.C(450:1)]: __dk_sswaitforlock:
001:ec0d CF1FE501     lcall dkPollSerialPort                   19
001:ec11 CDC919       call dkCheckStdioTimeOut                 12
001:ec14 CC           bool hl                                  2
001:ec15 2007         jr nz, 0xEC1E                            5
001:ec17 214FB3       ld hl, 0xB34F                            6
001:ec1a CB46         bit 0, (hl)                              7
001:ec1c 20EF         jr nz, 0xEC0D                            5
[STDIO_DK.C(459:1)]: __dk_ssdone:
001:ec1e CD9C20       call dkEpilog                            12
001:ec21 1800         jr 0xEC23                                5
[STDIO_DK.C(464:1)]: .exit:
001:ec23 DDC400       ld ix, (sp + 0x00)                       11
[STDIO_DK.C(466:1)]: #endasm
[STDIO_DK.C(468:2)]: return bytes;
001:ec26 C40D         ld hl, (sp + 0x0D)                       9
[STDIO_DK.C(468:1)]: return bytes;
001:ec28 D9           exx                                      2
001:ec29 2702         add sp, 2                                4
001:ec2b D9           exx                                      2
001:ec2c ED45         lret                                     13
[MEM.LIB(330:1)]: long _xalloc(long * szp, word alignm, word type)
001:ec2e 27E0         add sp, -32                              4
[MEM.LIB(355:4)]: sz = *szp;
001:ec30 C423         ld hl, (sp + 0x23)                       9
001:ec32 DD1A         ld bcde, (hl)                            14
001:ec34 DDEF12       ld (sp + 0x12), bcde                     19
[MEM.LIB(360:4)]: if (!alignm) {
001:ec37 C425         ld hl, (sp + 0x25)                       9
001:ec39 CC           bool hl                                  2
001:ec3a 2B           dec hl                                   2
001:ec3b CC           bool hl                                  2
001:ec3c CA43EC       jp z, 0xEC43                             7
[MEM.LIB(360:17)]: {
[MEM.LIB(361:5)]: alignm = 1;
001:ec3f BF           clr hl                                   2
001:ec40 23           inc hl                                   2
001:ec41 D425         ld (sp + 0x25), hl                       11
[MEM.LIB(362:4)]: }
[MEM.LIB(363:1)]: mask = ~0L << alignm;
[MEM.LIB(363:4)]: mask = ~0L << alignm;
001:ec43 C425         ld hl, (sp + 0x25)                       9
001:ec45 A300         ld bcde, 0                               4
001:ec47 B1           ld de, hl                                2
001:ec48 DDF5         push bcde                                18
001:ec4a A3FF         ld bcde, -1                              4
001:ec4c 01FFFF       ld bc, 0xFFFF                            6
001:ec4f CD4C27       call swap4_                              12
001:ec52 00           nop                                      2
001:ec53 CD9016       call L_asl                               12
001:ec56 DDEF1A       ld (sp + 0x1A), bcde                     19
[MEM.LIB(365:2)]: if (sz < 0)		// this value should fail (rounds up to 0x0000)
001:ec59 FDEE12       ld jkhl, (sp + 0x12)                     15
001:ec5c A300         ld bcde, 0                               4
001:ec5e ED58         cp jkhl, bcde                            4
001:ec60 EDB4         flag lt, hl                              4
001:ec62 CC           bool hl                                  2
001:ec63 CA69EC       jp z, 0xEC69                             7
[MEM.LIB(366:5)]: goto _fail;
001:ec66 C391ED       jp 0xED91                                7
[MEM.LIB(367:1)]: if (sz == 0)
[MEM.LIB(367:4)]: if (sz == 0)
001:ec69 FDEE12       ld jkhl, (sp + 0x12)                     15
001:ec6c A300         ld bcde, 0                               4
001:ec6e ED58         cp jkhl, bcde                            4
001:ec70 EDCC         flag z, hl                               4
001:ec72 CC           bool hl                                  2
001:ec73 CA7EEC       jp z, 0xEC7E                             7
[MEM.LIB(368:5)]: return 0L;	// Allocating zero always works, and returns addres zero.
001:ec76 A300         ld bcde, 0                               4
[MEM.LIB(368:1)]: return 0L;	// Allocating zero always works, and returns addres zero.
001:ec78 D9           exx                                      2
001:ec79 2720         add sp, 32                               4
001:ec7b D9           exx                                      2
001:ec7c ED45         lret                                     13
[MEM.LIB(369:1)]: if(!type) type = XALLOC_MAYBBB;
[MEM.LIB(369:4)]: if(!type) type = XALLOC_MAYBBB;
001:ec7e C427         ld hl, (sp + 0x27)                       9
001:ec80 CC           bool hl                                  2
001:ec81 2B           dec hl                                   2
001:ec82 CC           bool hl                                  2
001:ec83 CA8BEC       jp z, periodic_init                      7
[MEM.LIB(369:14)]: type = XALLOC_MAYBBB;
001:ec86 210300       ld hl, 0x0003                            6
001:ec89 D427         ld (sp + 0x27), hl                       11
[MEM.LIB(370:1)]: i = XALLOC_NOTBB;
[MEM.LIB(370:4)]: i = XALLOC_NOTBB;
001:ec8b 210200       ld hl, 0x0002                            6
001:ec8e D41E         ld (sp + 0x1E), hl                       11
[MEM.LIB(371:1)]: do {
[MEM.LIB(371:5)]: {
[MEM.LIB(371:2)]: do {
001:ec90 A300         ld bcde, 0                               4
001:ec92 DDEF0E       ld (sp + 0x0E), bcde                     19
[MEM.LIB(373:5)]: xsbreak.next = xubreak;
001:ec95 93AAB0       ld bcde, (0xB0AA)                        15
001:ec98 210800       ld hl, 0x0008                            6
001:ec9b 39           add hl, sp                               2
001:ec9c DD1B         ld (hl), bcde                            18
[MEM.LIB(374:1)]: do {
[MEM.LIB(374:8)]: {
[MEM.LIB(374:5)]: do {
001:ec9e DDEE08       ld bcde, (sp + 0x08)                     15
001:eca1 DDEF16       ld (sp + 0x16), bcde                     19
[MEM.LIB(376:8)]: xmem2root(&xsbreak, xsbreak.next, sizeof(xbreak_t));
001:eca4 EDA50E00     push 0x000E                              15
001:eca8 DDEE0A       ld bcde, (sp + 0x0A)                     15
001:ecab DDF5         push bcde                                18
001:ecad 210600       ld hl, 0x0006                            6
001:ecb0 39           add hl, sp                               2
001:ecb1 E5           push hl                                  10
001:ecb2 CFD8E203     lcall paddr                              19
001:ecb6 2702         add sp, 2                                4
001:ecb8 DDF5         push bcde                                18
001:ecba CF5FEA03     lcall xmem2xmem                          19
001:ecbe 270A         add sp, 10                               4
[MEM.LIB(378:8)]: if(xsbreak.chksum != alloc_calc_chksum(&xsbreak, sizeof(xbreak_t)))
001:ecc0 C40D         ld hl, (sp + 0x0D)                       9
001:ecc2 2600         ld h, 0x00                               4
001:ecc4 7D           ld a, l                                  2
001:ecc5 E5           push hl                                  10
001:ecc6 EDA50E00     push 0x000E                              15
001:ecca 210400       ld hl, 0x0004                            6
001:eccd 39           add hl, sp                               2
001:ecce FD9F         ldl px, hl                               4
001:ecd0 DDDD         ld bcde, px                              4
001:ecd2 EDD5         push px                                  18
001:ecd4 CFA7ED01     lcall alloc_calc_chksum                  19
001:ecd8 7D           ld a, l                                  2
001:ecd9 2706         add sp, 6                                4
001:ecdb 2600         ld h, 0x00                               4
001:ecdd B1           ld de, hl                                2
001:ecde E1           pop hl                                   7
001:ecdf ED48         cp hl, de                                4
001:ece1 EDC4         flag nz, hl                              4
001:ece3 CC           bool hl                                  2
001:ece4 CAEAEC       jp z, 0xECEA                             7
[MEM.LIB(379:11)]: goto _fail;
001:ece7 C391ED       jp 0xED91                                7
[MEM.LIB(381:1)]: base = xsbreak.sbreak - sz & mask;
[MEM.LIB(381:8)]: base = xsbreak.sbreak - sz & mask;
001:ecea FDEE00       ld jkhl, (sp + 0x00)                     15
001:eced DDEE12       ld bcde, (sp + 0x12)                     15
001:ecf0 EDD6         sub jkhl, bcde                           4
001:ecf2 DDEE1A       ld bcde, (sp + 0x1A)                     15
001:ecf5 EDE6         and jkhl, bcde                           4
001:ecf7 B1           ld de, hl                                2
001:ecf8 B9           ex jk, hl                                2
001:ecf9 91           ld bc, hl                                2
001:ecfa B9           ex jk, hl                                2
001:ecfb DDEF0E       ld (sp + 0x0E), bcde                     19
[MEM.LIB(388:4)]: if(xsbreak.flags & i & type && base >= xsbreak.limit) {
001:ecfe C40C         ld hl, (sp + 0x0C)                       9
001:ed00 2600         ld h, 0x00                               4
001:ed02 7D           ld a, l                                  2
001:ed03 E5           push hl                                  10
001:ed04 C420         ld hl, (sp + 0x20)                       9
001:ed06 B1           ld de, hl                                2
001:ed07 E1           pop hl                                   7
001:ed08 DC           and hl, de                               2
001:ed09 E5           push hl                                  10
001:ed0a C429         ld hl, (sp + 0x29)                       9
001:ed0c B1           ld de, hl                                2
001:ed0d E1           pop hl                                   7
001:ed0e DC           and hl, de                               2
001:ed0f CC           bool hl                                  2
001:ed10 CA1FED       jp z, 0xED1F                             7
001:ed13 FDEE0E       ld jkhl, (sp + 0x0E)                     15
001:ed16 DDEE04       ld bcde, (sp + 0x04)                     15
001:ed19 ED58         cp jkhl, bcde                            4
001:ed1b EDB4         flag lt, hl                              4
001:ed1d 2B           dec hl                                   2
001:ed1e CC           bool hl                                  2
[MEM.LIB(388:1)]: if(xsbreak.flags & i & type && base >= xsbreak.limit) {
001:ed1f CC           bool hl                                  2
001:ed20 CA7FED       jp z, 0xED7F                             7
[MEM.LIB(388:58)]: {
[MEM.LIB(389:13)]: *szp = xsbreak.sbreak - base;
001:ed23 C423         ld hl, (sp + 0x23)                       9
001:ed25 E5           push hl                                  10
001:ed26 FDEE02       ld jkhl, (sp + 0x02)                     15
001:ed29 DDEE10       ld bcde, (sp + 0x10)                     15
001:ed2c EDD6         sub jkhl, bcde                           4
001:ed2e B1           ld de, hl                                2
001:ed2f B9           ex jk, hl                                2
001:ed30 91           ld bc, hl                                2
001:ed31 B9           ex jk, hl                                2
001:ed32 E1           pop hl                                   7
001:ed33 DD1B         ld (hl), bcde                            18
[MEM.LIB(390:5)]: xsbreak.sbreak = base;
001:ed35 DDEE0E       ld bcde, (sp + 0x0E)                     15
001:ed38 DDEF00       ld (sp + 0x00), bcde                     19
[MEM.LIB(391:5)]: xsbreak.chksum = alloc_calc_chksum(&xsbreak, sizeof(xbreak_t));
001:ed3b 210D00       ld hl, 0x000D                            6
001:ed3e 39           add hl, sp                               2
001:ed3f E5           push hl                                  10
001:ed40 EDA50E00     push 0x000E                              15
001:ed44 210400       ld hl, 0x0004                            6
001:ed47 39           add hl, sp                               2
001:ed48 FD9F         ldl px, hl                               4
001:ed4a DDDD         ld bcde, px                              4
001:ed4c EDD5         push px                                  18
001:ed4e CFA7ED01     lcall alloc_calc_chksum                  19
001:ed52 2706         add sp, 6                                4
001:ed54 7D           ld a, l                                  2
001:ed55 E1           pop hl                                   7
001:ed56 77           ld (hl), a                               6
[MEM.LIB(392:7)]: root2xmem(next, &xsbreak, sizeof(xbreak_t));
001:ed57 EDA50E00     push 0x000E                              15
001:ed5b 210200       ld hl, 0x0002                            6
001:ed5e 39           add hl, sp                               2
001:ed5f E5           push hl                                  10
001:ed60 CFD8E203     lcall paddr                              19
001:ed64 2702         add sp, 2                                4
001:ed66 DDF5         push bcde                                18
001:ed68 211C00       ld hl, 0x001C                            6
001:ed6b 39           add hl, sp                               2
001:ed6c DD1A         ld bcde, (hl)                            14
001:ed6e DDF5         push bcde                                18
001:ed70 CF5FEA03     lcall xmem2xmem                          19
001:ed74 270A         add sp, 10                               4
[MEM.LIB(396:7)]: return base;
001:ed76 210E00       ld hl, 0x000E                            6
001:ed79 39           add hl, sp                               2
001:ed7a DD1A         ld bcde, (hl)                            14
001:ed7c C378EC       jp 0xEC78                                7
[MEM.LIB(397:10)]: }
[MEM.LIB(398:1)]: } while(xsbreak.next);
[MEM.LIB(398:6)]: while(xsbreak.next);
[MEM.LIB(398:1)]: } while(xsbreak.next);
[MEM.LIB(398:13)]: xsbreak.next);
001:ed7f DDEE08       ld bcde, (sp + 0x08)                     15
001:ed82 81           ld hl, bc                                2
001:ed83 EC           or hl, de                                2
001:ed84 CC           bool hl                                  2
001:ed85 C29EEC       jp nz, 0xEC9E                            7
[MEM.LIB(398:1)]: } while(xsbreak.next);
[MEM.LIB(399:3)]: while(--i);
[MEM.LIB(399:1)]: } while(--i);
[MEM.LIB(399:10)]: --i);
001:ed88 C41E         ld hl, (sp + 0x1E)                       9
001:ed8a 2B           dec hl                                   2
001:ed8b D41E         ld (sp + 0x1E), hl                       11
001:ed8d CC           bool hl                                  2
001:ed8e C290EC       jp nz, 0xEC90                            7
[MEM.LIB(399:1)]: } while(--i);
[MEM.LIB(400:1)]: _fail:
[MEM.LIB(400:6)]: :
001:ed91 2130FD       ld hl, 0xFD30                            6
001:ed94 E5           push hl                                  10
001:ed95 CD7321       call exception                           12
001:ed98 2702         add sp, 2                                4
[MEM.LIB(402:2)]: exit(-ERR_BADXALLOC);
001:ed9a 2130FD       ld hl, 0xFD30                            6
001:ed9d E5           push hl                                  10
001:ed9e CD8125       call exit                                12
001:eda1 00           nop                                      2
001:eda2 2702         add sp, 2                                4
[MEM.LIB(403:1)]: }
001:eda4 C378EC       jp 0xEC78                                7
[MEM.LIB(46:1)]: __xmem char alloc_calc_chksum(void __far *p, int num) {
[MEM.LIB(48:1)]: #asm
001:eda7 C407         ld hl, (sp + 0x07)                       9
001:eda9 7F45         ld b, l                                  4
001:edab 05           dec b                                    2
001:edac AF           xor a                                    2
001:edad 4F           ld c, a                                  2
001:edae ED1403       ld px, (sp + 0x03)                       15
[MEM.LIB(55:1)]: .loop:
001:edb1 9D00         ld a, (px + 0)                           7
001:edb3 7F81         add c                                    4
001:edb5 4F           ld c, a                                  2
001:edb6 6D5C01       ld px, px + 1                            6
001:edb9 10F6         djnz 0xEDB1                              5
001:edbb 79           ld a, c                                  2
001:edbc 2F           cpl                                      2
001:edbd BF           clr hl                                   2
001:edbe 6F           ld l, a                                  2
[MEM.LIB(65:1)]: #endasm
[MEM.LIB(68:1)]: }
[MEM.LIB(68:1)]: }
001:edbf ED45         lret                                     13
[MEM.LIB(155:1)]: int alloc_init(_sys_mem_origin_t *orgtbl, uint16 orgtblsize) {
001:edc1 27F6         add sp, -10                              4
[MEM.LIB(161:2)]: ubreak = NULL;
001:edc3 BF           clr hl                                   2
001:edc4 22A8B0       ld (0xB0A8), hl                          13
[MEM.LIB(162:4)]: bsize = 0;
001:edc7 BF           clr hl                                   2
001:edc8 D404         ld (sp + 0x04), hl                       11
[MEM.LIB(163:4)]: i = orgtblsize;
001:edca C40F         ld hl, (sp + 0x0F)                       9
001:edcc D408         ld (sp + 0x08), hl                       11
[MEM.LIB(164:4)]: pe = orgtbl;
001:edce C40D         ld hl, (sp + 0x0D)                       9
001:edd0 D400         ld (sp + 0x00), hl                       11
[MEM.LIB(165:1)]: do {
[MEM.LIB(165:5)]: {
[MEM.LIB(165:2)]: do {
001:edd2 C400         ld hl, (sp + 0x00)                       9
001:edd4 7E           ld a, (hl)                               5
001:edd5 BF           clr hl                                   2
001:edd6 6F           ld l, a                                  2
001:edd7 4804         cp hl, 4                                 4
001:edd9 EDCC         flag z, hl                               4
001:eddb CC           bool hl                                  2
001:eddc CAE2EE       jp z, 0xEEE2                             7
[MEM.LIB(166:29)]: {
[MEM.LIB(167:4)]: msize = (int)(pe->totalbytes - pe->usedbytes);
001:eddf C400         ld hl, (sp + 0x00)                       9
001:ede1 A30C         ld bcde, 12                              4
001:ede3 19           add hl, de                               2
001:ede4 DD1A         ld bcde, (hl)                            14
001:ede6 DDF5         push bcde                                18
001:ede8 C404         ld hl, (sp + 0x04)                       9
001:edea A308         ld bcde, 8                               4
001:edec 19           add hl, de                               2
001:eded DD1A         ld bcde, (hl)                            14
001:edef FDF1         pop jkhl                                 13
001:edf1 EDD6         sub jkhl, bcde                           4
001:edf3 B1           ld de, hl                                2
001:edf4 B9           ex jk, hl                                2
001:edf5 91           ld bc, hl                                2
001:edf6 B9           ex jk, hl                                2
001:edf7 A1           ld hl, de                                2
001:edf8 D406         ld (sp + 0x06), hl                       11
[MEM.LIB(168:10)]: if(msize > sizeof(rbreak_t)) {
001:edfa 4808         cp hl, 8                                 4
001:edfc EDAC         flag gtu, hl                             4
001:edfe CC           bool hl                                  2
001:edff CAE2EE       jp z, 0xEEE2                             7
[MEM.LIB(168:39)]: {
[MEM.LIB(169:9)]: mbreak = (rbreak_t*)(pe->laddr - msize);
001:ee02 C400         ld hl, (sp + 0x00)                       9
001:ee04 110600       ld de, 0x0006                            6
001:ee07 19           add hl, de                               2
001:ee08 DDE400       ld hl, (hl + 0)                          11
001:ee0b E5           push hl                                  10
001:ee0c C408         ld hl, (sp + 0x08)                       9
001:ee0e B1           ld de, hl                                2
001:ee0f E1           pop hl                                   7
001:ee10 55           sub hl, de                               2
001:ee11 D402         ld (sp + 0x02), hl                       11
[MEM.LIB(170:9)]: mbreak->sbreak = (void *)(pe->laddr - 1);
001:ee13 FD7D         ld iy, hl                                4
001:ee15 C400         ld hl, (sp + 0x00)                       9
001:ee17 110600       ld de, 0x0006                            6
001:ee1a 19           add hl, de                               2
001:ee1b DDE400       ld hl, (hl + 0)                          11
001:ee1e 2B           dec hl                                   2
001:ee1f FDF400       ld (iy + 0), hl                          13
[MEM.LIB(171:11)]: mbreak->limit = mbreak + 1;
001:ee22 C402         ld hl, (sp + 0x02)                       9
001:ee24 23           inc hl                                   2
001:ee25 23           inc hl                                   2
001:ee26 FD7D         ld iy, hl                                4
001:ee28 C402         ld hl, (sp + 0x02)                       9
001:ee2a 110800       ld de, 0x0008                            6
001:ee2d 19           add hl, de                               2
001:ee2e FDF400       ld (iy + 0), hl                          13
[MEM.LIB(172:13)]: mbreak->flags = pe->flags;
001:ee31 C402         ld hl, (sp + 0x02)                       9
001:ee33 110600       ld de, 0x0006                            6
001:ee36 19           add hl, de                               2
001:ee37 E5           push hl                                  10
001:ee38 C402         ld hl, (sp + 0x02)                       9
001:ee3a 23           inc hl                                   2
001:ee3b 7E           ld a, (hl)                               5
001:ee3c E1           pop hl                                   7
001:ee3d 77           ld (hl), a                               6
[MEM.LIB(174:11)]: if(bsize == 0 || (msize > bsize && mbreak->flags & XALLOC_NOTBB)) {
001:ee3e C404         ld hl, (sp + 0x04)                       9
001:ee40 4800         cp hl, 0                                 4
001:ee42 EDCC         flag z, hl                               4
001:ee44 CC           bool hl                                  2
001:ee45 C264EE       jp nz, 0xEE64                            7
001:ee48 C404         ld hl, (sp + 0x04)                       9
001:ee4a B1           ld de, hl                                2
001:ee4b C406         ld hl, (sp + 0x06)                       9
001:ee4d ED48         cp hl, de                                4
001:ee4f EDAC         flag gtu, hl                             4
001:ee51 CC           bool hl                                  2
001:ee52 CA63EE       jp z, 0xEE63                             7
001:ee55 C402         ld hl, (sp + 0x02)                       9
001:ee57 110600       ld de, 0x0006                            6
001:ee5a 19           add hl, de                               2
001:ee5b 7E           ld a, (hl)                               5
001:ee5c BF           clr hl                                   2
001:ee5d 6F           ld l, a                                  2
001:ee5e 110200       ld de, 0x0002                            6
001:ee61 DC           and hl, de                               2
001:ee62 CC           bool hl                                  2
[MEM.LIB(174:1)]: if(bsize == 0 || (msize > bsize && mbreak->flags & XALLOC_NOTBB)) {
001:ee63 CC           bool hl                                  2
[MEM.LIB(174:1)]: if(bsize == 0 || (msize > bsize && mbreak->flags & XALLOC_NOTBB)) {
001:ee64 CC           bool hl                                  2
001:ee65 CA82EE       jp z, 0xEE82                             7
[MEM.LIB(174:77)]: {
[MEM.LIB(175:12)]: bsize = msize;
001:ee68 C406         ld hl, (sp + 0x06)                       9
001:ee6a D404         ld (sp + 0x04), hl                       11
[MEM.LIB(176:16)]: mbreak->next = ubreak;
001:ee6c C402         ld hl, (sp + 0x02)                       9
001:ee6e 110400       ld de, 0x0004                            6
001:ee71 19           add hl, de                               2
001:ee72 FD7D         ld iy, hl                                4
001:ee74 2AA8B0       ld hl, (0xB0A8)                          11
001:ee77 FDF400       ld (iy + 0), hl                          13
[MEM.LIB(177:14)]: ubreak = mbreak;
001:ee7a C402         ld hl, (sp + 0x02)                       9
001:ee7c 22A8B0       ld (0xB0A8), hl                          13
[MEM.LIB(178:13)]: }
001:ee7f C3C3EE       jp 0xEEC3                                7
[MEM.LIB(179:1)]: else {
[MEM.LIB(179:18)]: {
[MEM.LIB(180:14)]: mbreak->next = ubreak->next;
001:ee82 C402         ld hl, (sp + 0x02)                       9
001:ee84 A304         ld bcde, 4                               4
001:ee86 19           add hl, de                               2
001:ee87 FD7D         ld iy, hl                                4
001:ee89 2AA8B0       ld hl, (0xB0A8)                          11
001:ee8c A304         ld bcde, 4                               4
001:ee8e 19           add hl, de                               2
001:ee8f DDE400       ld hl, (hl + 0)                          11
001:ee92 FDF400       ld (iy + 0), hl                          13
[MEM.LIB(181:16)]: ubreak->next = mbreak;
001:ee95 2AA8B0       ld hl, (0xB0A8)                          11
001:ee98 A304         ld bcde, 4                               4
001:ee9a 19           add hl, de                               2
001:ee9b FD7D         ld iy, hl                                4
001:ee9d C402         ld hl, (sp + 0x02)                       9
001:ee9f FDF400       ld (iy + 0), hl                          13
[MEM.LIB(183:6)]: ubreak->chksum = alloc_calc_chksum(ubreak, sizeof(rbreak_t));
001:eea2 2AA8B0       ld hl, (0xB0A8)                          11
001:eea5 A307         ld bcde, 7                               4
001:eea7 19           add hl, de                               2
001:eea8 E5           push hl                                  10
001:eea9 EDA50800     push 0x0008                              15
001:eead 2AA8B0       ld hl, (0xB0A8)                          11
001:eeb0 B1           ld de, hl                                2
001:eeb1 CC           bool hl                                  2
001:eeb2 4D           neg hl                                   2
001:eeb3 91           ld bc, hl                                2
001:eeb4 DD9D         ld px, bcde                              4
001:eeb6 EDD5         push px                                  18
001:eeb8 CFA7ED01     lcall alloc_calc_chksum                  19
001:eebc 2706         add sp, 6                                4
001:eebe 7D           ld a, l                                  2
001:eebf E1           pop hl                                   7
001:eec0 77           ld (hl), a                               6
001:eec1 BF           clr hl                                   2
001:eec2 6F           ld l, a                                  2
[MEM.LIB(184:13)]: }
[MEM.LIB(184:1)]: }
[MEM.LIB(185:7)]: mbreak->chksum = alloc_calc_chksum(mbreak, sizeof(rbreak_t));
001:eec3 C402         ld hl, (sp + 0x02)                       9
001:eec5 A307         ld bcde, 7                               4
001:eec7 19           add hl, de                               2
001:eec8 E5           push hl                                  10
001:eec9 EDA50800     push 0x0008                              15
001:eecd C406         ld hl, (sp + 0x06)                       9
001:eecf B1           ld de, hl                                2
001:eed0 CC           bool hl                                  2
001:eed1 4D           neg hl                                   2
001:eed2 91           ld bc, hl                                2
001:eed3 DD9D         ld px, bcde                              4
001:eed5 EDD5         push px                                  18
001:eed7 CFA7ED01     lcall alloc_calc_chksum                  19
001:eedb 2706         add sp, 6                                4
001:eedd 7D           ld a, l                                  2
001:eede E1           pop hl                                   7
001:eedf 77           ld (hl), a                               6
001:eee0 BF           clr hl                                   2
001:eee1 6F           ld l, a                                  2
[MEM.LIB(186:10)]: }
[MEM.LIB(187:1)]: }
[MEM.LIB(187:7)]: }
[MEM.LIB(188:1)]: pe++;
[MEM.LIB(188:7)]: pe++;
001:eee2 C400         ld hl, (sp + 0x00)                       9
001:eee4 111000       ld de, 0x0010                            6
001:eee7 19           add hl, de                               2
001:eee8 D400         ld (sp + 0x00), hl                       11
001:eeea 111000       ld de, 0x0010                            6
001:eeed 55           sub hl, de                               2
[MEM.LIB(189:5)]: while(--i);
[MEM.LIB(189:1)]: } while(--i);
[MEM.LIB(189:12)]: --i);
001:eeee C408         ld hl, (sp + 0x08)                       9
001:eef0 2B           dec hl                                   2
001:eef1 D408         ld (sp + 0x08), hl                       11
001:eef3 CC           bool hl                                  2
001:eef4 C2D2ED       jp nz, 0xEDD2                            7
[MEM.LIB(189:1)]: } while(--i);
[MEM.LIB(191:2)]: if(ubreak) {
001:eef7 2AA8B0       ld hl, (0xB0A8)                          11
001:eefa CC           bool hl                                  2
001:eefb CA05EF       jp z, 0xEF05                             7
[MEM.LIB(191:13)]: {
[MEM.LIB(192:5)]: return 0;
001:eefe BF           clr hl                                   2
[MEM.LIB(192:1)]: return 0;
001:eeff D9           exx                                      2
001:ef00 270A         add sp, 10                               4
001:ef02 D9           exx                                      2
001:ef03 ED45         lret                                     13
[MEM.LIB(193:4)]: }
[MEM.LIB(194:1)]: return -ENOMEM;		// allocation failed, no RVARORG regions found
[MEM.LIB(194:4)]: return -ENOMEM;		// allocation failed, no RVARORG regions found
001:ef05 21F4FF       ld hl, 0xFFF4                            6
001:ef08 C3FFEE       jp 0xEEFF                                7
[RCM43XX_BIOS.LIB(238:1)]: void coreInit()
[RCM43XX_BIOS.LIB(240:4)]: _shared_port_init();
001:ef0b CD2324       call _shared_port_init                   12
[RCM43XX_BIOS.LIB(241:1)]: }
[RCM43XX_BIOS.LIB(241:1)]: }
001:ef0e ED45         lret                                     13
[RCM43XX_BIOS.LIB(261:4)]: _rcm43_spi_init(DEFSPIDIVISOR, SPI_DEF_CONTROL_VAL, SPI_DEF_ECONTROL_VAL);
*** Constant Data ***
001:ef10  00 00 00 00 00 00 00 00                                 
*** End Constant Data ***
[STDIO.C(477:1)]: int fclose( FILE __far *stream)
001:ef18 218FB0       ld hl, 0xB08F                            6
001:ef1b ED1C10FF0000 ld px, 0x0000FF10                        12
001:ef21 6D97         ld py, px                                4
001:ef23 FD9F         ldl px, hl                               4
001:ef25 EDD5         push px                                  18
001:ef27 6D67         ld px, py                                4
001:ef29 EDE1         pop py                                   13
001:ef2b EDE5         push py                                  18
001:ef2d 010800       ld bc, 0x0008                            6
001:ef30 ED80         copy                                     7+7i
001:ef32 EDD1         pop px                                   13
001:ef34 ED45         lret                                     13
001:ef36 27ED         add sp, -19                              4
[STDIO.C(482:6)]: retval = 0, error;
001:ef38 BF           clr hl                                   2
001:ef39 D402         ld (sp + 0x02), hl                       11
[STDIO.C(488:2)]: if (fflush( stream))
001:ef3b 211600       ld hl, 0x0016                            6
001:ef3e 39           add hl, sp                               2
001:ef3f DD1A         ld bcde, (hl)                            14
001:ef41 DD9D         ld px, bcde                              4
001:ef43 EDD5         push px                                  18
001:ef45 CFD7E002     lcall fflush                             19
001:ef49 2704         add sp, 4                                4
001:ef4b CC           bool hl                                  2
001:ef4c CA53EF       jp z, 0xEF53                             7
[STDIO.C(489:2)]: {
[STDIO.C(495:3)]: retval = EOF;
001:ef4f BF           clr hl                                   2
001:ef50 2B           dec hl                                   2
001:ef51 D402         ld (sp + 0x02), hl                       11
[STDIO.C(496:2)]: }
[STDIO.C(499:1)]: if (stream->close)
[STDIO.C(499:2)]: if (stream->close)
001:ef53 FDEE16       ld jkhl, (sp + 0x16)                     15
001:ef56 A33D         ld bcde, 61                              4
001:ef58 EDC6         add jkhl, bcde                           4
001:ef5a FD9D         ld px, jkhl                              4
001:ef5c 9500         ld hl, (px + 0)                          9
001:ef5e CC           bool hl                                  2
001:ef5f CA8CEF       jp z, 0xEF8C                             7
[STDIO.C(500:2)]: {
[STDIO.C(501:3)]: if ( (error = stream->close( stream->cookie)) )
001:ef62 ED1416       ld px, (sp + 0x16)                       15
001:ef65 6D5C3D       ld px, px + 61                           6
001:ef68 9500         ld hl, (px + 0)                          9
001:ef6a E5           push hl                                  10
001:ef6b FDEE18       ld jkhl, (sp + 0x18)                     15
001:ef6e A333         ld bcde, 51                              4
001:ef70 EDC6         add jkhl, bcde                           4
001:ef72 FD9D         ld px, jkhl                              4
001:ef74 6D5800       ld px, (px + 0)                          15
001:ef77 EDD5         push px                                  18
001:ef79 FDC404       ld iy, (sp + 0x04)                       11
001:ef7c C400         ld hl, (sp + 0x00)                       9
001:ef7e FDEA         call (iy)                                12
001:ef80 2706         add sp, 6                                4
001:ef82 D400         ld (sp + 0x00), hl                       11
001:ef84 CC           bool hl                                  2
001:ef85 CA8CEF       jp z, 0xEF8C                             7
[STDIO.C(502:3)]: {
[STDIO.C(508:4)]: retval = EOF;
001:ef88 BF           clr hl                                   2
001:ef89 2B           dec hl                                   2
001:ef8a D402         ld (sp + 0x02), hl                       11
[STDIO.C(509:3)]: }
[STDIO.C(510:1)]: }
[STDIO.C(510:2)]: }
[STDIO.C(513:1)]: if (*(stream->tmpnam))
[STDIO.C(513:2)]: if (*(stream->tmpnam))
001:ef8c FDEE16       ld jkhl, (sp + 0x16)                     15
001:ef8f A302         ld bcde, 2                               4
001:ef91 EDC6         add jkhl, bcde                           4
001:ef93 FD9D         ld px, jkhl                              4
001:ef95 9D00         ld a, (px + 0)                           7
001:ef97 BF           clr hl                                   2
001:ef98 6F           ld l, a                                  2
001:ef99 CC           bool hl                                  2
001:ef9a CAD1EF       jp z, 0xEFD1                             7
[STDIO.C(514:2)]: {
[STDIO.C(515:3)]: _f_memcpy( tmpnam_local, stream->tmpnam, sizeof tmpnam_local);
001:ef9d A30F         ld bcde, 15                              4
001:ef9f DDF5         push bcde                                18
001:efa1 FDEE1A       ld jkhl, (sp + 0x1A)                     15
001:efa4 A302         ld bcde, 2                               4
001:efa6 EDC6         add jkhl, bcde                           4
001:efa8 FD9D         ld px, jkhl                              4
001:efaa EDD5         push px                                  18
001:efac 210C00       ld hl, 0x000C                            6
001:efaf 39           add hl, sp                               2
001:efb0 FD9F         ldl px, hl                               4
001:efb2 DDDD         ld bcde, px                              4
001:efb4 EDD5         push px                                  18
001:efb6 CD9326       call _f_memmove                          12
001:efb9 00           nop                                      2
001:efba 270C         add sp, 12                               4
[STDIO.C(516:3)]: if ( (error = remove( tmpnam_local)) )
001:efbc 210400       ld hl, 0x0004                            6
001:efbf 39           add hl, sp                               2
001:efc0 E5           push hl                                  10
001:efc1 CFFAE203     lcall remove                             19
001:efc5 2702         add sp, 2                                4
001:efc7 D400         ld (sp + 0x00), hl                       11
001:efc9 CC           bool hl                                  2
001:efca CAD1EF       jp z, 0xEFD1                             7
[STDIO.C(517:3)]: {
[STDIO.C(523:4)]: retval = EOF;
001:efcd BF           clr hl                                   2
001:efce 2B           dec hl                                   2
001:efcf D402         ld (sp + 0x02), hl                       11
[STDIO.C(524:3)]: }
[STDIO.C(525:1)]: }
[STDIO.C(525:2)]: }
[STDIO.C(528:1)]: _stdio_FILE_free( stream);
[STDIO.C(528:2)]: _stdio_FILE_free( stream);
001:efd1 211600       ld hl, 0x0016                            6
001:efd4 39           add hl, sp                               2
001:efd5 DD1A         ld bcde, (hl)                            14
001:efd7 DD9D         ld px, bcde                              4
001:efd9 EDD5         push px                                  18
001:efdb CF87E002     lcall _stdio_FILE_free                   19
001:efdf 2704         add sp, 4                                4
[STDIO.C(531:2)]: _f_memset( stream, 0, sizeof *stream);
001:efe1 A33F         ld bcde, 63                              4
001:efe3 DDF5         push bcde                                18
001:efe5 EDA50000     push 0x0000                              15
001:efe9 211C00       ld hl, 0x001C                            6
001:efec 39           add hl, sp                               2
001:efed DD1A         ld bcde, (hl)                            14
001:efef DD9D         ld px, bcde                              4
001:eff1 EDD5         push px                                  18
001:eff3 CDBB23       call _f_memset                           12
001:eff6 270A         add sp, 10                               4
[STDIO.C(533:2)]: return retval;
001:eff8 C402         ld hl, (sp + 0x02)                       9
[STDIO.C(533:1)]: return retval;
001:effa D9           exx                                      2
001:effb 2713         add sp, 19                               4
001:effd D9           exx                                      2
001:effe ED45         lret                                     13
[STDIO.C(324:1)]: FILE __far *_stdio_FILE_alloc()
002:e000 27FA         add sp, -6                               4
[STDIO.C(329:2)]: for (f = _stdio_files; f < &_stdio_files[FOPEN_MAX]; ++f)
002:e002 ED1C087D1000 ld px, 0x00107D08                        12
002:e008 ED1500       ld (sp + 0x00), px                       19
002:e00b DDEE00       ld bcde, (sp + 0x00)                     15
002:e00e DDF5         push bcde                                18
002:e010 ED1C087D1000 ld px, 0x00107D08                        12
002:e016 FDDD         ld jkhl, px                              4
002:e018 11F801       ld de, 0x01F8                            6
002:e01b 010000       ld bc, 0x0000                            6
002:e01e EDC6         add jkhl, bcde                           4
002:e020 B4           ex jkhl, bcde                            2
002:e021 FDF1         pop jkhl                                 13
002:e023 ED58         cp jkhl, bcde                            4
002:e025 EDDC         flag c, hl                               4
002:e027 CC           bool hl                                  2
002:e028 CA7FE0       jp z, 0xE07F                             7
[STDIO.C(329:1)]: for (f = _stdio_files; f < &_stdio_files[FOPEN_MAX]; ++f)
[STDIO.C(330:2)]: {
[STDIO.C(331:3)]: if (! (f->flags & _FILE_FLAG_USED))
002:e02b DDEE00       ld bcde, (sp + 0x00)                     15
002:e02e DD9D         ld px, bcde                              4
002:e030 9500         ld hl, (px + 0)                          9
002:e032 110040       ld de, 0x4000                            6
002:e035 DC           and hl, de                               2
002:e036 CC           bool hl                                  2
002:e037 2B           dec hl                                   2
002:e038 CC           bool hl                                  2
002:e039 CA50E0       jp z, 0xE050                             7
[STDIO.C(332:3)]: {
[STDIO.C(333:4)]: f->flags = _FILE_FLAG_USED;
002:e03c ED1400       ld px, (sp + 0x00)                       15
002:e03f 210040       ld hl, 0x4000                            6
002:e042 9600         ld (px + 0), hl                          11
[STDIO.C(334:4)]: return f;
002:e044 BF           clr hl                                   2
002:e045 39           add hl, sp                               2
002:e046 DD1A         ld bcde, (hl)                            14
002:e048 DD9D         ld px, bcde                              4
[STDIO.C(334:1)]: return f;
002:e04a D9           exx                                      2
002:e04b 2706         add sp, 6                                4
002:e04d D9           exx                                      2
002:e04e ED45         lret                                     13
[STDIO.C(335:3)]: }
[STDIO.C(336:1)]: }
[STDIO.C(336:2)]: }
[STDIO.C(336:1)]: }
002:e050 ED1400       ld px, (sp + 0x00)                       15
002:e053 6D5C3F       ld px, px + 63                           6
002:e056 ED1500       ld (sp + 0x00), px                       19
002:e059 DDDD         ld bcde, px                              4
002:e05b DDF5         push bcde                                18
002:e05d 2704         add sp, 4                                4
002:e05f DDEE00       ld bcde, (sp + 0x00)                     15
002:e062 DDF5         push bcde                                18
002:e064 ED1C087D1000 ld px, 0x00107D08                        12
002:e06a FDDD         ld jkhl, px                              4
002:e06c 11F801       ld de, 0x01F8                            6
002:e06f 010000       ld bc, 0x0000                            6
002:e072 EDC6         add jkhl, bcde                           4
002:e074 B4           ex jkhl, bcde                            2
002:e075 FDF1         pop jkhl                                 13
002:e077 ED58         cp jkhl, bcde                            4
002:e079 EDDC         flag c, hl                               4
002:e07b CC           bool hl                                  2
002:e07c C22BE0       jp nz, 0xE02B                            7
[STDIO.C(336:1)]: }
[STDIO.C(338:2)]: return NULL;
002:e07f BF           clr hl                                   2
002:e080 A300         ld bcde, 0                               4
002:e082 DD9D         ld px, bcde                              4
002:e084 C34AE0       jp 0xE04A                                7
[STDIO.C(358:1)]: int _stdio_FILE_free( FILE __far *f)
[STDIO.C(370:2)]: f->flags &= ~_FILE_FLAG_USED;
002:e087 ED1403       ld px, (sp + 0x03)                       15
002:e08a 9500         ld hl, (px + 0)                          9
002:e08c 11FFBF       ld de, 0xBFFF                            6
002:e08f DC           and hl, de                               2
002:e090 9600         ld (px + 0), hl                          11
[STDIO.C(371:2)]: if (f->buffer_alloc)
002:e092 FDEE03       ld jkhl, (sp + 0x03)                     15
002:e095 A317         ld bcde, 23                              4
002:e097 EDC6         add jkhl, bcde                           4
002:e099 FD9D         ld px, jkhl                              4
002:e09b 6D5800       ld px, (px + 0)                          15
002:e09e DDDD         ld bcde, px                              4
002:e0a0 81           ld hl, bc                                2
002:e0a1 EC           or hl, de                                2
002:e0a2 CC           bool hl                                  2
002:e0a3 CAD4E0       jp z, 0xE0D4                             7
[STDIO.C(372:2)]: {
[STDIO.C(373:3)]: free( f->buffer_alloc);
002:e0a6 FDEE03       ld jkhl, (sp + 0x03)                     15
002:e0a9 A317         ld bcde, 23                              4
002:e0ab EDC6         add jkhl, bcde                           4
002:e0ad FD9D         ld px, jkhl                              4
002:e0af 6D5800       ld px, (px + 0)                          15
002:e0b2 EDD5         push px                                  18
002:e0b4 CFF2E202     lcall free                               19
002:e0b8 2704         add sp, 4                                4
[STDIO.C(374:3)]: f->buffer_alloc = 0;
002:e0ba FDEE03       ld jkhl, (sp + 0x03)                     15
002:e0bd A317         ld bcde, 23                              4
002:e0bf EDC6         add jkhl, bcde                           4
002:e0c1 FD9D         ld px, jkhl                              4
002:e0c3 EDD5         push px                                  18
002:e0c5 ED1C00000000 ld px, 0x00000000                        12
002:e0cb 6D97         ld py, px                                4
002:e0cd EDD1         pop px                                   13
002:e0cf 6D9900       ld (px + 0), py                          19
002:e0d2 6D67         ld px, py                                4
[STDIO.C(375:2)]: }
[STDIO.C(377:1)]: return 0;
[STDIO.C(377:2)]: return 0;
002:e0d4 BF           clr hl                                   2
[STDIO.C(377:1)]: return 0;
002:e0d5 ED45         lret                                     13
[STDIO.C(399:1)]: int fflush( FILE __far *stream)
002:e0d7 27F2         add sp, -14                              4
[STDIO.C(407:2)]: if (! stream)
002:e0d9 DDEE11       ld bcde, (sp + 0x11)                     15
002:e0dc DD9D         ld px, bcde                              4
002:e0de DD5C         test bcde                                4
002:e0e0 EDCC         flag z, hl                               4
002:e0e2 CC           bool hl                                  2
002:e0e3 CA4EE1       jp z, 0xE14E                             7
[STDIO.C(408:2)]: {
[STDIO.C(409:3)]: stream = _stdio_files;
002:e0e6 ED1C087D1000 ld px, 0x00107D08                        12
002:e0ec ED1511       ld (sp + 0x11), px                       19
002:e0ef DDDD         ld bcde, px                              4
[STDIO.C(410:1)]: while (stream < &_stdio_files[FOPEN_MAX])
[STDIO.C(410:3)]: while (stream < &_stdio_files[FOPEN_MAX])
002:e0f1 DDEE11       ld bcde, (sp + 0x11)                     15
002:e0f4 DDF5         push bcde                                18
002:e0f6 ED1C087D1000 ld px, 0x00107D08                        12
002:e0fc FDDD         ld jkhl, px                              4
002:e0fe 11F801       ld de, 0x01F8                            6
002:e101 010000       ld bc, 0x0000                            6
002:e104 EDC6         add jkhl, bcde                           4
002:e106 B4           ex jkhl, bcde                            2
002:e107 FDF1         pop jkhl                                 13
002:e109 ED58         cp jkhl, bcde                            4
002:e10b EDDC         flag c, hl                               4
002:e10d CC           bool hl                                  2
002:e10e CA47E1       jp z, 0xE147                             7
[STDIO.C(411:3)]: {
[STDIO.C(412:4)]: if ((stream->flags & (_FILE_FLAG_USED | _FILE_FLAG_CAN_WRITE))
002:e111 DDEE11       ld bcde, (sp + 0x11)                     15
002:e114 DD9D         ld px, bcde                              4
002:e116 9500         ld hl, (px + 0)                          9
002:e118 112040       ld de, 0x4020                            6
002:e11b DC           and hl, de                               2
002:e11c 112040       ld de, 0x4020                            6
002:e11f ED48         cp hl, de                                4
002:e121 EDCC         flag z, hl                               4
002:e123 CC           bool hl                                  2
002:e124 CA37E1       jp z, 0xE137                             7
[STDIO.C(414:4)]: {
[STDIO.C(415:5)]: fflush( stream);
002:e127 211100       ld hl, 0x0011                            6
002:e12a 39           add hl, sp                               2
002:e12b DD1A         ld bcde, (hl)                            14
002:e12d DD9D         ld px, bcde                              4
002:e12f EDD5         push px                                  18
002:e131 CFD7E002     lcall fflush                             19
002:e135 2704         add sp, 4                                4
[STDIO.C(416:4)]: }
[STDIO.C(417:1)]: ++stream;
[STDIO.C(417:4)]: ++stream;
002:e137 ED1411       ld px, (sp + 0x11)                       15
002:e13a 6D5C3F       ld px, px + 63                           6
002:e13d ED1511       ld (sp + 0x11), px                       19
002:e140 FDDD         ld jkhl, px                              4
002:e142 DDDD         ld bcde, px                              4
[STDIO.C(418:3)]: }
002:e144 C3F1E0       jp 0xE0F1                                7
[STDIO.C(418:1)]: }
[STDIO.C(420:3)]: return 0;
002:e147 BF           clr hl                                   2
[STDIO.C(420:1)]: return 0;
002:e148 D9           exx                                      2
002:e149 270E         add sp, 14                               4
002:e14b D9           exx                                      2
002:e14c ED45         lret                                     13
[STDIO.C(421:2)]: }
[STDIO.C(423:1)]: if (stream->write_cur)
[STDIO.C(423:2)]: if (stream->write_cur)
002:e14e FDEE11       ld jkhl, (sp + 0x11)                     15
002:e151 A31F         ld bcde, 31                              4
002:e153 EDC6         add jkhl, bcde                           4
002:e155 FD9D         ld px, jkhl                              4
002:e157 6D5800       ld px, (px + 0)                          15
002:e15a DDDD         ld bcde, px                              4
002:e15c 81           ld hl, bc                                2
002:e15d EC           or hl, de                                2
002:e15e CC           bool hl                                  2
002:e15f CA27E2       jp z, 0xE227                             7
[STDIO.C(424:2)]: {
[STDIO.C(426:3)]: p = stream->buffer_base;
002:e162 ED1411       ld px, (sp + 0x11)                       15
002:e165 6D5C1B       ld px, px + 27                           6
002:e168 6D5800       ld px, (px + 0)                          15
002:e16b ED1504       ld (sp + 0x04), px                       19
[STDIO.C(427:3)]: end = stream->write_cur;
002:e16e ED1411       ld px, (sp + 0x11)                       15
002:e171 6D5C1F       ld px, px + 31                           6
002:e174 6D5800       ld px, (px + 0)                          15
002:e177 ED1500       ld (sp + 0x00), px                       19
[STDIO.C(428:3)]: send = (size_t) (end - p);
002:e17a FDEE00       ld jkhl, (sp + 0x00)                     15
002:e17d DDEE04       ld bcde, (sp + 0x04)                     15
002:e180 EDD6         sub jkhl, bcde                           4
002:e182 FD9D         ld px, jkhl                              4
002:e184 DDDD         ld bcde, px                              4
002:e186 A1           ld hl, de                                2
002:e187 D40C         ld (sp + 0x0C), hl                       11
[STDIO.C(429:3)]: if (send)
002:e189 CC           bool hl                                  2
002:e18a CA27E2       jp z, 0xE227                             7
[STDIO.C(430:3)]: {
[STDIO.C(436:4)]: sent = _stream_wrapped_write( stream, p, send);
002:e18d C40C         ld hl, (sp + 0x0C)                       9
002:e18f E5           push hl                                  10
002:e190 DDEE06       ld bcde, (sp + 0x06)                     15
002:e193 DDF5         push bcde                                18
002:e195 211700       ld hl, 0x0017                            6
002:e198 39           add hl, sp                               2
002:e199 DD1A         ld bcde, (hl)                            14
002:e19b DD9D         ld px, bcde                              4
002:e19d EDD5         push px                                  18
002:e19f CF49E202     lcall _stream_wrapped_write              19
002:e1a3 270A         add sp, 10                               4
002:e1a5 D40A         ld (sp + 0x0A), hl                       11
[STDIO.C(439:4)]: if (sent < send)
002:e1a7 C40C         ld hl, (sp + 0x0C)                       9
002:e1a9 B1           ld de, hl                                2
002:e1aa C40A         ld hl, (sp + 0x0A)                       9
002:e1ac ED48         cp hl, de                                4
002:e1ae EDDC         flag c, hl                               4
002:e1b0 CC           bool hl                                  2
002:e1b1 CA0BE2       jp z, 0xE20B                             7
[STDIO.C(440:4)]: {
[STDIO.C(442:5)]: _f_memcpy( p, p + sent, send - sent);
002:e1b4 C40A         ld hl, (sp + 0x0A)                       9
002:e1b6 B1           ld de, hl                                2
002:e1b7 C40C         ld hl, (sp + 0x0C)                       9
002:e1b9 55           sub hl, de                               2
002:e1ba A300         ld bcde, 0                               4
002:e1bc B1           ld de, hl                                2
002:e1bd DDF5         push bcde                                18
002:e1bf DDEE08       ld bcde, (sp + 0x08)                     15
002:e1c2 DDF5         push bcde                                18
002:e1c4 C412         ld hl, (sp + 0x12)                       9
002:e1c6 A300         ld bcde, 0                               4
002:e1c8 B1           ld de, hl                                2
002:e1c9 FDF1         pop jkhl                                 13
002:e1cb EDC6         add jkhl, bcde                           4
002:e1cd FD9D         ld px, jkhl                              4
002:e1cf EDD5         push px                                  18
002:e1d1 210C00       ld hl, 0x000C                            6
002:e1d4 39           add hl, sp                               2
002:e1d5 DD1A         ld bcde, (hl)                            14
002:e1d7 DD9D         ld px, bcde                              4
002:e1d9 EDD5         push px                                  18
002:e1db CD9326       call _f_memmove                          12
002:e1de 270C         add sp, 12                               4
[STDIO.C(443:5)]: stream->write_cur = p + send - sent;
002:e1e0 ED1411       ld px, (sp + 0x11)                       15
002:e1e3 6D5C1F       ld px, px + 31                           6
002:e1e6 DDEE04       ld bcde, (sp + 0x04)                     15
002:e1e9 DDF5         push bcde                                18
002:e1eb C410         ld hl, (sp + 0x10)                       9
002:e1ed A300         ld bcde, 0                               4
002:e1ef B1           ld de, hl                                2
002:e1f0 FDF1         pop jkhl                                 13
002:e1f2 EDC6         add jkhl, bcde                           4
002:e1f4 FDF5         push jkhl                                18
002:e1f6 C40E         ld hl, (sp + 0x0E)                       9
002:e1f8 A300         ld bcde, 0                               4
002:e1fa B1           ld de, hl                                2
002:e1fb FDF1         pop jkhl                                 13
002:e1fd EDD6         sub jkhl, bcde                           4
002:e1ff FDAD         ld py, jkhl                              4
002:e201 6D9900       ld (px + 0), py                          19
002:e204 6D67         ld px, py                                4
[STDIO.C(445:5)]: return EOF;
002:e206 BF           clr hl                                   2
002:e207 2B           dec hl                                   2
002:e208 C348E1       jp 0xE148                                7
[STDIO.C(446:4)]: }
[STDIO.C(449:1)]: stream->write_cur = stream->buffer_base;
[STDIO.C(449:4)]: stream->write_cur = stream->buffer_base;
002:e20b FDEE11       ld jkhl, (sp + 0x11)                     15
002:e20e A31F         ld bcde, 31                              4
002:e210 EDC6         add jkhl, bcde                           4
002:e212 FDF5         push jkhl                                18
002:e214 FDEE15       ld jkhl, (sp + 0x15)                     15
002:e217 A31B         ld bcde, 27                              4
002:e219 EDC6         add jkhl, bcde                           4
002:e21b FD9D         ld px, jkhl                              4
002:e21d 6D9800       ld py, (px + 0)                          15
002:e220 EDD1         pop px                                   13
002:e222 6D9900       ld (px + 0), py                          19
002:e225 6D67         ld px, py                                4
[STDIO.C(450:3)]: }
[STDIO.C(451:1)]: }
[STDIO.C(451:2)]: }
[STDIO.C(453:1)]: _STDIO_FILE_UPDATE_CAN_RW( stream);
[STDIO.C(453:2)]: _STDIO_FILE_UPDATE_CAN_RW( stream);
002:e227 ED1411       ld px, (sp + 0x11)                       15
002:e22a EDD5         push px                                  18
002:e22c 9500         ld hl, (px + 0)                          9
002:e22e E5           push hl                                  10
002:e22f DDEE17       ld bcde, (sp + 0x17)                     15
002:e232 DD9D         ld px, bcde                              4
002:e234 9500         ld hl, (px + 0)                          9
002:e236 110300       ld de, 0x0003                            6
002:e239 DC           and hl, de                               2
002:e23a 29           add hl, hl                               2
002:e23b 29           add hl, hl                               2
002:e23c 29           add hl, hl                               2
002:e23d 29           add hl, hl                               2
002:e23e B1           ld de, hl                                2
002:e23f E1           pop hl                                   7
002:e240 EC           or hl, de                                2
002:e241 EDD1         pop px                                   13
002:e243 9600         ld (px + 0), hl                          11
[STDIO.C(455:2)]: return 0;
002:e245 BF           clr hl                                   2
002:e246 C348E1       jp 0xE148                                7
[STDIO.C(1091:1)]: size_t _stream_wrapped_write( FILE __far *stream, const void __far *base,
002:e249 27F8         add sp, -8                               4
[STDIO.C(1093:9)]: total = 0;
002:e24b BF           clr hl                                   2
002:e24c D406         ld (sp + 0x06), hl                       11
[STDIO.C(1095:20)]: p = base;
002:e24e ED140F       ld px, (sp + 0x0F)                       15
002:e251 ED1500       ld (sp + 0x00), px                       19
[STDIO.C(1097:2)]: if (! stream->write)
002:e254 FDEE0B       ld jkhl, (sp + 0x0B)                     15
002:e257 A339         ld bcde, 57                              4
002:e259 EDC6         add jkhl, bcde                           4
002:e25b FD9D         ld px, jkhl                              4
002:e25d 9500         ld hl, (px + 0)                          9
002:e25f CC           bool hl                                  2
002:e260 2B           dec hl                                   2
002:e261 CC           bool hl                                  2
002:e262 CA6CE2       jp z, 0xE26C                             7
[STDIO.C(1098:2)]: {
[STDIO.C(1099:3)]: return 0;
002:e265 BF           clr hl                                   2
[STDIO.C(1099:1)]: return 0;
002:e266 D9           exx                                      2
002:e267 2708         add sp, 8                                4
002:e269 D9           exx                                      2
002:e26a ED45         lret                                     13
[STDIO.C(1100:2)]: }
[STDIO.C(1102:1)]: while (bytes)
[STDIO.C(1102:1)]: while (bytes)
[STDIO.C(1102:2)]: while (bytes)
002:e26c C413         ld hl, (sp + 0x13)                       9
002:e26e CC           bool hl                                  2
002:e26f CAD2E2       jp z, .idBlockOk                         7
[STDIO.C(1103:2)]: {
[STDIO.C(1104:3)]: wrote = stream->write( stream->cookie, p, bytes);
002:e272 ED140B       ld px, (sp + 0x0B)                       15
002:e275 6D5C39       ld px, px + 57                           6
002:e278 9500         ld hl, (px + 0)                          9
002:e27a E5           push hl                                  10
002:e27b C415         ld hl, (sp + 0x15)                       9
002:e27d E5           push hl                                  10
002:e27e DDEE04       ld bcde, (sp + 0x04)                     15
002:e281 DDF5         push bcde                                18
002:e283 FDEE13       ld jkhl, (sp + 0x13)                     15
002:e286 A333         ld bcde, 51                              4
002:e288 EDC6         add jkhl, bcde                           4
002:e28a FD9D         ld px, jkhl                              4
002:e28c 6D5800       ld px, (px + 0)                          15
002:e28f EDD5         push px                                  18
002:e291 FDC40A       ld iy, (sp + 0x0A)                       11
002:e294 C400         ld hl, (sp + 0x00)                       9
002:e296 FDEA         call (iy)                                12
002:e298 270C         add sp, 12                               4
002:e29a D404         ld (sp + 0x04), hl                       11
[STDIO.C(1105:3)]: if (wrote < 0)
002:e29c 4800         cp hl, 0                                 4
002:e29e EDB4         flag lt, hl                              4
002:e2a0 CC           bool hl                                  2
002:e2a1 CAA8E2       jp z, 0xE2A8                             7
[STDIO.C(1106:3)]: {
[STDIO.C(1109:4)]: break;
002:e2a4 182C         jr .idBlockOk                            5
002:e2a6 00           nop                                      2
002:e2a7 00           nop                                      2
[STDIO.C(1110:3)]: }
[STDIO.C(1111:1)]: p += wrote;
[STDIO.C(1111:3)]: p += wrote;
002:e2a8 DDEE00       ld bcde, (sp + 0x00)                     15
002:e2ab DDF5         push bcde                                18
002:e2ad C408         ld hl, (sp + 0x08)                       9
002:e2af B1           ld de, hl                                2
002:e2b0 42           rl hl                                    2
002:e2b1 ED62         sbc hl, hl                               4
002:e2b3 91           ld bc, hl                                2
002:e2b4 FDF1         pop jkhl                                 13
002:e2b6 EDC6         add jkhl, bcde                           4
002:e2b8 FD9D         ld px, jkhl                              4
002:e2ba ED1500       ld (sp + 0x00), px                       19
002:e2bd DDDD         ld bcde, px                              4
[STDIO.C(1112:3)]: bytes -= wrote;
002:e2bf C404         ld hl, (sp + 0x04)                       9
002:e2c1 B1           ld de, hl                                2
002:e2c2 C413         ld hl, (sp + 0x13)                       9
002:e2c4 55           sub hl, de                               2
002:e2c5 D413         ld (sp + 0x13), hl                       11
[STDIO.C(1113:3)]: total += wrote;
002:e2c7 C404         ld hl, (sp + 0x04)                       9
002:e2c9 B1           ld de, hl                                2
002:e2ca C406         ld hl, (sp + 0x06)                       9
002:e2cc 19           add hl, de                               2
002:e2cd D406         ld (sp + 0x06), hl                       11
[STDIO.C(1114:2)]: }
002:e2cf C36CE2       jp 0xE26C                                7
[STDIO.C(1114:1)]: }
[STDIO.C(1116:2)]: stream->offset += total;
002:e2d2 ED140B       ld px, (sp + 0x0B)                       15
002:e2d5 6D5C11       ld px, px + 17                           6
002:e2d8 DD1E00       ld bcde, (px + 0)                        15
002:e2db DDF5         push bcde                                18
002:e2dd C40A         ld hl, (sp + 0x0A)                       9
002:e2df A300         ld bcde, 0                               4
002:e2e1 B1           ld de, hl                                2
002:e2e2 FDF1         pop jkhl                                 13
002:e2e4 EDC6         add jkhl, bcde                           4
002:e2e6 B1           ld de, hl                                2
002:e2e7 B9           ex jk, hl                                2
002:e2e8 91           ld bc, hl                                2
002:e2e9 B9           ex jk, hl                                2
002:e2ea DD1F00       ld (px + 0), bcde                        19
[STDIO.C(1117:2)]: return total;
002:e2ed C406         ld hl, (sp + 0x06)                       9
002:e2ef C366E2       jp 0xE266                                7
[MALLOC.LIB(4361:1)]: void free(m_voidptr ptr)
[MALLOC.LIB(4363:2)]: mspace_free(_app_mem_space, ptr);
002:e2f2 210300       ld hl, 0x0003                            6
002:e2f5 39           add hl, sp                               2
002:e2f6 DD1A         ld bcde, (hl)                            14
002:e2f8 DD9D         ld px, bcde                              4
002:e2fa EDD5         push px                                  18
002:e2fc 2187B0       ld hl, 0xB087                            6
002:e2ff DD1A         ld bcde, (hl)                            14
002:e301 DD9D         ld px, bcde                              4
002:e303 EDD5         push px                                  18
002:e305 CFB9E902     lcall mspace_free                        19
002:e309 2708         add sp, 8                                4
[MALLOC.LIB(4364:1)]: }
[MALLOC.LIB(4364:1)]: }
002:e30b ED45         lret                                     13
[MALLOC.LIB(3852:1)]: void _init_app_mem_space(void)
[MALLOC.LIB(3858:16)]: _app_mem_space = (mspace)0; }
[MALLOC.LIB(3858:17)]: _app_mem_space = (mspace)0; }
002:e30d A300         ld bcde, 0                               4
002:e30f 8387B0       ld (0xB087), bcde                        19
002:e312 DD9D         ld px, bcde                              4
[MALLOC.LIB(3858:45)]: }
002:e314 ED45         lret                                     13
002:e316 27F2         add sp, -14                              4
[MALLOC.LIB(3860:2)]: if (!_app_mem_space) {
002:e318 9387B0       ld bcde, (0xB087)                        15
002:e31b DD9D         ld px, bcde                              4
002:e31d DD5C         test bcde                                4
002:e31f EDCC         flag z, hl                               4
002:e321 CC           bool hl                                  2
002:e322 CAA8E3       jp z, 0xE3A8                             7
[MALLOC.LIB(3860:23)]: {
[MALLOC.LIB(3875:3)]: _init_sys_mem_space();
002:e325 CFC4E302     lcall _init_sys_mem_space                19
[MALLOC.LIB(3877:3)]: xsize = _xavail((long *)&xbase, 3, _MALLOC_APP_MEM_TYPE);
002:e329 EDA50200     push 0x0002                              15
002:e32d EDA50300     push 0x0003                              15
002:e331 210E00       ld hl, 0x000E                            6
002:e334 39           add hl, sp                               2
002:e335 E5           push hl                                  10
002:e336 CF8EE402     lcall 02:e48e                            19
002:e33a 2706         add sp, 6                                4
002:e33c DDEF06       ld (sp + 0x06), bcde                     19
[MALLOC.LIB(3878:3)]: if (!xsize)
002:e33f DD5C         test bcde                                4
002:e341 EDCC         flag z, hl                               4
002:e343 CC           bool hl                                  2
002:e344 CA60E3       jp z, 0xE360                             7
[MALLOC.LIB(3879:4)]: xsize = _xavail((long *)&xbase, 3, XALLOC_ANY);
002:e347 EDA50000     push 0x0000                              15
002:e34b EDA50300     push 0x0003                              15
002:e34f 210E00       ld hl, 0x000E                            6
002:e352 39           add hl, sp                               2
002:e353 E5           push hl                                  10
002:e354 CF8EE402     lcall 02:e48e                            19
002:e358 2706         add sp, 6                                4
002:e35a 210600       ld hl, 0x0006                            6
002:e35d 39           add hl, sp                               2
002:e35e DD1B         ld (hl), bcde                            18
[MALLOC.LIB(3880:1)]: if (!xsize)
[MALLOC.LIB(3880:3)]: if (!xsize)
002:e360 DDEE06       ld bcde, (sp + 0x06)                     15
002:e363 DD5C         test bcde                                4
002:e365 EDCC         flag z, hl                               4
002:e367 CC           bool hl                                  2
002:e368 CA7DE3       jp z, 0xE37D                             7
[MALLOC.LIB(3881:4)]: exception(-ERR_APP_HEAP_NULL), exit(-ERR_APP_HEAP_NULL);
002:e36b 21F1FC       ld hl, 0xFCF1                            6
002:e36e E5           push hl                                  10
002:e36f CD7321       call exception                           12
002:e372 2702         add sp, 2                                4
002:e374 21F1FC       ld hl, 0xFCF1                            6
002:e377 E5           push hl                                  10
002:e378 CD8125       call exit                                12
002:e37b 2702         add sp, 2                                4
[MALLOC.LIB(3886:1)]: _app_mem_space = create_mspace_with_base(xbase, xsize & 0xFFFFF8uL, 0);
[MALLOC.LIB(3886:3)]: _app_mem_space = create_mspace_with_base(xbase, xsize & 0xFFFFF8uL, 0);
002:e37d EDA50000     push 0x0000                              15
002:e381 FDEE08       ld jkhl, (sp + 0x08)                     15
002:e384 A3F8         ld bcde, -8                              4
002:e386 01FF00       ld bc, 0x00FF                            6
002:e389 EDE6         and jkhl, bcde                           4
002:e38b B1           ld de, hl                                2
002:e38c B9           ex jk, hl                                2
002:e38d 91           ld bc, hl                                2
002:e38e B9           ex jk, hl                                2
002:e38f DDF5         push bcde                                18
002:e391 211000       ld hl, 0x0010                            6
002:e394 39           add hl, sp                               2
002:e395 DD1A         ld bcde, (hl)                            14
002:e397 DD9D         ld px, bcde                              4
002:e399 EDD5         push px                                  18
002:e39b CFCDE502     lcall create_mspace_with_base            19
002:e39f 270A         add sp, 10                               4
002:e3a1 DDDD         ld bcde, px                              4
002:e3a3 8387B0       ld (0xB087), bcde                        19
002:e3a6 DD9D         ld px, bcde                              4
[MALLOC.LIB(3887:2)]: }
[MALLOC.LIB(3888:1)]: }
[MALLOC.LIB(3888:1)]: }
[MALLOC.LIB(3888:1)]: }
002:e3a8 270E         add sp, 14                               4
002:e3aa ED45         lret                                     13
[MALLOC.LIB(3794:1)]: void _init_sys_mem_space(void)
[MALLOC.LIB(3800:15)]: {
[MALLOC.LIB(3801:3)]: memset(&mparams, 0, sizeof(mparams));
002:e3ac EDA50C00     push 0x000C                              15
002:e3b0 BF           clr hl                                   2
002:e3b1 E5           push hl                                  10
002:e3b2 2177B0       ld hl, 0xB077                            6
002:e3b5 E5           push hl                                  10
002:e3b6 CDE824       call _n_memset                           12
002:e3b9 2706         add sp, 6                                4
[MALLOC.LIB(3802:3)]: _sys_mem_space = (mspace)0;
002:e3bb A300         ld bcde, 0                               4
002:e3bd 8383B0       ld (0xB083), bcde                        19
002:e3c0 DD9D         ld px, bcde                              4
[MALLOC.LIB(3809:2)]: }
002:e3c2 ED45         lret                                     13
002:e3c4 27F2         add sp, -14                              4
[MALLOC.LIB(3811:2)]: if (!_sys_mem_space) {
002:e3c6 9383B0       ld bcde, (0xB083)                        15
002:e3c9 DD9D         ld px, bcde                              4
002:e3cb DD5C         test bcde                                4
002:e3cd EDCC         flag z, hl                               4
002:e3cf CC           bool hl                                  2
002:e3d0 CA8AE4       jp z, 0xE48A                             7
[MALLOC.LIB(3811:23)]: {
[MALLOC.LIB(3817:3)]: xsize = _SYS_MALLOC_BLOCKS*4096uL;
002:e3d3 A300         ld bcde, 0                               4
002:e3d5 010200       ld bc, 0x0002                            6
002:e3d8 DDEF06       ld (sp + 0x06), bcde                     19
[MALLOC.LIB(3818:3)]: xsize_a = _xavail(NULL, 3, mt = _MALLOC_SYS_MEM_TYPE);
002:e3db 210200       ld hl, 0x0002                            6
002:e3de D400         ld (sp + 0x00), hl                       11
002:e3e0 E5           push hl                                  10
002:e3e1 EDA50300     push 0x0003                              15
002:e3e5 BF           clr hl                                   2
002:e3e6 E5           push hl                                  10
002:e3e7 CF8EE402     lcall 02:e48e                            19
002:e3eb 2706         add sp, 6                                4
002:e3ed DDEF02       ld (sp + 0x02), bcde                     19
[MALLOC.LIB(3819:3)]: if (xsize_a < xsize)
002:e3f0 FDEE02       ld jkhl, (sp + 0x02)                     15
002:e3f3 DDEE06       ld bcde, (sp + 0x06)                     15
002:e3f6 ED58         cp jkhl, bcde                            4
002:e3f8 EDDC         flag c, hl                               4
002:e3fa CC           bool hl                                  2
002:e3fb CA14E4       jp z, 0xE414                             7
[MALLOC.LIB(3820:4)]: xsize_a = _xavail(NULL, 3, mt = XALLOC_ANY);
002:e3fe BF           clr hl                                   2
002:e3ff D400         ld (sp + 0x00), hl                       11
002:e401 E5           push hl                                  10
002:e402 EDA50300     push 0x0003                              15
002:e406 BF           clr hl                                   2
002:e407 E5           push hl                                  10
002:e408 CF8EE402     lcall 02:e48e                            19
002:e40c 2706         add sp, 6                                4
002:e40e 210200       ld hl, 0x0002                            6
002:e411 39           add hl, sp                               2
002:e412 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(3821:1)]: if (xsize > xsize_a)
[MALLOC.LIB(3821:3)]: if (xsize > xsize_a)
002:e414 FDEE06       ld jkhl, (sp + 0x06)                     15
002:e417 DDEE02       ld bcde, (sp + 0x02)                     15
002:e41a ED58         cp jkhl, bcde                            4
002:e41c EDAC         flag gtu, hl                             4
002:e41e CC           bool hl                                  2
002:e41f CA2BE4       jp z, 0xE42B                             7
[MALLOC.LIB(3822:4)]: xsize = xsize_a;
002:e422 DDEE02       ld bcde, (sp + 0x02)                     15
002:e425 210600       ld hl, 0x0006                            6
002:e428 39           add hl, sp                               2
002:e429 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(3823:1)]: xbase = (m_voidptr)_xalloc((long *)&xsize, 3, mt);
[MALLOC.LIB(3823:3)]: xbase = (m_voidptr)_xalloc((long *)&xsize, 3, mt);
002:e42b C400         ld hl, (sp + 0x00)                       9
002:e42d E5           push hl                                  10
002:e42e EDA50300     push 0x0003                              15
002:e432 210A00       ld hl, 0x000A                            6
002:e435 39           add hl, sp                               2
002:e436 E5           push hl                                  10
002:e437 CF2EEC01     lcall 01:ec2e                            19
002:e43b 2706         add sp, 6                                4
002:e43d DD9D         ld px, bcde                              4
002:e43f ED150A       ld (sp + 0x0A), px                       19
[MALLOC.LIB(3824:3)]: if (!xsize)
002:e442 DDEE06       ld bcde, (sp + 0x06)                     15
002:e445 DD5C         test bcde                                4
002:e447 EDCC         flag z, hl                               4
002:e449 CC           bool hl                                  2
002:e44a CA5FE4       jp z, 0xE45F                             7
[MALLOC.LIB(3825:4)]: exception(-ERR_SYS_HEAP_NULL), exit(-ERR_SYS_HEAP_NULL);
002:e44d 21F2FC       ld hl, 0xFCF2                            6
002:e450 E5           push hl                                  10
002:e451 CD7321       call exception                           12
002:e454 2702         add sp, 2                                4
002:e456 21F2FC       ld hl, 0xFCF2                            6
002:e459 E5           push hl                                  10
002:e45a CD8125       call exit                                12
002:e45d 2702         add sp, 2                                4
[MALLOC.LIB(3841:1)]: _sys_mem_space = create_mspace_with_base(xbase, xsize & 0xFFFFF8uL, 0);
[MALLOC.LIB(3841:3)]: _sys_mem_space = create_mspace_with_base(xbase, xsize & 0xFFFFF8uL, 0);
002:e45f EDA50000     push 0x0000                              15
002:e463 FDEE08       ld jkhl, (sp + 0x08)                     15
002:e466 A3F8         ld bcde, -8                              4
002:e468 01FF00       ld bc, 0x00FF                            6
002:e46b EDE6         and jkhl, bcde                           4
002:e46d B1           ld de, hl                                2
002:e46e B9           ex jk, hl                                2
002:e46f 91           ld bc, hl                                2
002:e470 B9           ex jk, hl                                2
002:e471 DDF5         push bcde                                18
002:e473 211000       ld hl, 0x0010                            6
002:e476 39           add hl, sp                               2
002:e477 DD1A         ld bcde, (hl)                            14
002:e479 DD9D         ld px, bcde                              4
002:e47b EDD5         push px                                  18
002:e47d CFCDE502     lcall create_mspace_with_base            19
002:e481 270A         add sp, 10                               4
002:e483 DDDD         ld bcde, px                              4
002:e485 8383B0       ld (0xB083), bcde                        19
002:e488 DD9D         ld px, bcde                              4
[MALLOC.LIB(3842:2)]: }
[MALLOC.LIB(3843:1)]: }
[MALLOC.LIB(3843:1)]: }
[MALLOC.LIB(3843:1)]: }
002:e48a 270E         add sp, 14                               4
002:e48c ED45         lret                                     13
[MEM.LIB(494:1)]: long _xavail(long * addr_ptr, word alignm, word type)
002:e48e 27E4         add sp, -28                              4
[MEM.LIB(501:4)]: sz = maxsz = 0;
002:e490 A300         ld bcde, 0                               4
002:e492 DDEF0E       ld (sp + 0x0E), bcde                     19
002:e495 DDEF12       ld (sp + 0x12), bcde                     19
[MEM.LIB(503:4)]: if (!alignm) {
002:e498 C421         ld hl, (sp + 0x21)                       9
002:e49a CC           bool hl                                  2
002:e49b 2B           dec hl                                   2
002:e49c CC           bool hl                                  2
002:e49d CAA4E4       jp z, 0xE4A4                             7
[MEM.LIB(503:17)]: {
[MEM.LIB(504:5)]: alignm = 1;
002:e4a0 BF           clr hl                                   2
002:e4a1 23           inc hl                                   2
002:e4a2 D421         ld (sp + 0x21), hl                       11
[MEM.LIB(505:4)]: }
[MEM.LIB(506:1)]: mask = ~0L << alignm;
[MEM.LIB(506:4)]: mask = ~0L << alignm;
002:e4a4 C421         ld hl, (sp + 0x21)                       9
002:e4a6 A300         ld bcde, 0                               4
002:e4a8 B1           ld de, hl                                2
002:e4a9 DDF5         push bcde                                18
002:e4ab A3FF         ld bcde, -1                              4
002:e4ad 01FFFF       ld bc, 0xFFFF                            6
002:e4b0 CD4C27       call swap4_                              12
002:e4b3 00           nop                                      2
002:e4b4 CD9016       call L_asl                               12
002:e4b7 DDEF16       ld (sp + 0x16), bcde                     19
[MEM.LIB(508:4)]: if(!type) type = XALLOC_MAYBBB;
002:e4ba C423         ld hl, (sp + 0x23)                       9
002:e4bc CC           bool hl                                  2
002:e4bd 2B           dec hl                                   2
002:e4be CC           bool hl                                  2
002:e4bf CAC7E4       jp z, 0xE4C7                             7
[MEM.LIB(508:14)]: type = XALLOC_MAYBBB;
002:e4c2 210300       ld hl, 0x0003                            6
002:e4c5 D423         ld (sp + 0x23), hl                       11
[MEM.LIB(510:1)]: i = XALLOC_NOTBB;
[MEM.LIB(510:4)]: i = XALLOC_NOTBB;
002:e4c7 210200       ld hl, 0x0002                            6
002:e4ca D41A         ld (sp + 0x1A), hl                       11
[MEM.LIB(511:1)]: do {
[MEM.LIB(511:5)]: {
[MEM.LIB(511:2)]: do {
002:e4cc 93AAB0       ld bcde, (0xB0AA)                        15
002:e4cf 210800       ld hl, 0x0008                            6
002:e4d2 39           add hl, sp                               2
002:e4d3 DD1B         ld (hl), bcde                            18
[MEM.LIB(513:1)]: do {
[MEM.LIB(513:8)]: {
[MEM.LIB(513:5)]: do {
002:e4d5 EDA50E00     push 0x000E                              15
002:e4d9 DDEE0A       ld bcde, (sp + 0x0A)                     15
002:e4dc DDF5         push bcde                                18
002:e4de 210600       ld hl, 0x0006                            6
002:e4e1 39           add hl, sp                               2
002:e4e2 E5           push hl                                  10
002:e4e3 CFD8E203     lcall paddr                              19
002:e4e7 2702         add sp, 2                                4
002:e4e9 DDF5         push bcde                                18
002:e4eb CF5FEA03     lcall xmem2xmem                          19
002:e4ef 270A         add sp, 10                               4
[MEM.LIB(516:8)]: if(xsbreak.chksum != alloc_calc_chksum(&xsbreak, sizeof(xbreak_t)))
002:e4f1 C40D         ld hl, (sp + 0x0D)                       9
002:e4f3 2600         ld h, 0x00                               4
002:e4f5 7D           ld a, l                                  2
002:e4f6 E5           push hl                                  10
002:e4f7 EDA50E00     push 0x000E                              15
002:e4fb 210400       ld hl, 0x0004                            6
002:e4fe 39           add hl, sp                               2
002:e4ff FD9F         ldl px, hl                               4
002:e501 DDDD         ld bcde, px                              4
002:e503 EDD5         push px                                  18
002:e505 CFA7ED01     lcall alloc_calc_chksum                  19
002:e509 7D           ld a, l                                  2
002:e50a 2706         add sp, 6                                4
002:e50c 2600         ld h, 0x00                               4
002:e50e B1           ld de, hl                                2
002:e50f E1           pop hl                                   7
002:e510 ED48         cp hl, de                                4
002:e512 EDC4         flag nz, hl                              4
002:e514 CC           bool hl                                  2
002:e515 CA1BE5       jp z, 0xE51B                             7
[MEM.LIB(517:11)]: goto _fail;
002:e518 C3B8E5       jp 0xE5B8                                7
[MEM.LIB(519:1)]: sz = xsbreak.sbreak - (xsbreak.limit + ~mask & mask);
[MEM.LIB(519:8)]: sz = xsbreak.sbreak - (xsbreak.limit + ~mask & mask);
002:e51b DDEE00       ld bcde, (sp + 0x00)                     15
002:e51e DDF5         push bcde                                18
002:e520 DDEE08       ld bcde, (sp + 0x08)                     15
002:e523 DDF5         push bcde                                18
002:e525 DDEE1E       ld bcde, (sp + 0x1E)                     15
002:e528 A4FF         ld jkhl, -1                              4
002:e52a EDD6         sub jkhl, bcde                           4
002:e52c B4           ex jkhl, bcde                            2
002:e52d FDF1         pop jkhl                                 13
002:e52f EDC6         add jkhl, bcde                           4
002:e531 DDEE1A       ld bcde, (sp + 0x1A)                     15
002:e534 EDE6         and jkhl, bcde                           4
002:e536 B4           ex jkhl, bcde                            2
002:e537 FDF1         pop jkhl                                 13
002:e539 EDD6         sub jkhl, bcde                           4
002:e53b B1           ld de, hl                                2
002:e53c B9           ex jk, hl                                2
002:e53d 91           ld bc, hl                                2
002:e53e B9           ex jk, hl                                2
002:e53f DDEF12       ld (sp + 0x12), bcde                     19
[MEM.LIB(520:4)]: if(xsbreak.flags & i & type && sz > maxsz) {
002:e542 C40C         ld hl, (sp + 0x0C)                       9
002:e544 2600         ld h, 0x00                               4
002:e546 7D           ld a, l                                  2
002:e547 E5           push hl                                  10
002:e548 C41C         ld hl, (sp + 0x1C)                       9
002:e54a B1           ld de, hl                                2
002:e54b E1           pop hl                                   7
002:e54c DC           and hl, de                               2
002:e54d E5           push hl                                  10
002:e54e C425         ld hl, (sp + 0x25)                       9
002:e550 B1           ld de, hl                                2
002:e551 E1           pop hl                                   7
002:e552 DC           and hl, de                               2
002:e553 CC           bool hl                                  2
002:e554 CA62E5       jp z, 0xE562                             7
002:e557 FDEE12       ld jkhl, (sp + 0x12)                     15
002:e55a DDEE0E       ld bcde, (sp + 0x0E)                     15
002:e55d ED58         cp jkhl, bcde                            4
002:e55f EDA4         flag gt, hl                              4
002:e561 CC           bool hl                                  2
[MEM.LIB(520:1)]: if(xsbreak.flags & i & type && sz > maxsz) {
002:e562 CC           bool hl                                  2
002:e563 CA6FE5       jp z, 0xE56F                             7
[MEM.LIB(520:47)]: {
[MEM.LIB(521:11)]: maxsz = sz;
002:e566 DDEE12       ld bcde, (sp + 0x12)                     15
002:e569 210E00       ld hl, 0x000E                            6
002:e56c 39           add hl, sp                               2
002:e56d DD1B         ld (hl), bcde                            18
[MEM.LIB(522:10)]: }
[MEM.LIB(523:1)]: } while(xsbreak.next);
[MEM.LIB(523:6)]: while(xsbreak.next);
[MEM.LIB(523:1)]: } while(xsbreak.next);
[MEM.LIB(523:13)]: xsbreak.next);
002:e56f DDEE08       ld bcde, (sp + 0x08)                     15
002:e572 81           ld hl, bc                                2
002:e573 EC           or hl, de                                2
002:e574 CC           bool hl                                  2
002:e575 C2D5E4       jp nz, 0xE4D5                            7
[MEM.LIB(523:1)]: } while(xsbreak.next);
[MEM.LIB(524:3)]: while(--i);
[MEM.LIB(524:1)]: } while(--i);
[MEM.LIB(524:10)]: --i);
002:e578 C41A         ld hl, (sp + 0x1A)                       9
002:e57a 2B           dec hl                                   2
002:e57b D41A         ld (sp + 0x1A), hl                       11
002:e57d CC           bool hl                                  2
002:e57e C2CCE4       jp nz, 0xE4CC                            7
[MEM.LIB(524:1)]: } while(--i);
[MEM.LIB(526:2)]: if (addr_ptr && maxsz > 0)
002:e581 C41F         ld hl, (sp + 0x1F)                       9
002:e583 CC           bool hl                                  2
002:e584 CA91E5       jp z, 0xE591                             7
002:e587 FDEE0E       ld jkhl, (sp + 0x0E)                     15
002:e58a A300         ld bcde, 0                               4
002:e58c ED58         cp jkhl, bcde                            4
002:e58e EDA4         flag gt, hl                              4
002:e590 CC           bool hl                                  2
[MEM.LIB(526:1)]: if (addr_ptr && maxsz > 0)
002:e591 CC           bool hl                                  2
002:e592 CAACE5       jp z, 0xE5AC                             7
[MEM.LIB(527:3)]: *addr_ptr = _xalloc(&maxsz, alignm, type);
002:e595 C41F         ld hl, (sp + 0x1F)                       9
002:e597 E5           push hl                                  10
002:e598 C425         ld hl, (sp + 0x25)                       9
002:e59a E5           push hl                                  10
002:e59b C425         ld hl, (sp + 0x25)                       9
002:e59d E5           push hl                                  10
002:e59e 211400       ld hl, 0x0014                            6
002:e5a1 39           add hl, sp                               2
002:e5a2 E5           push hl                                  10
002:e5a3 CF2EEC01     lcall 01:ec2e                            19
002:e5a7 2706         add sp, 6                                4
002:e5a9 E1           pop hl                                   7
002:e5aa DD1B         ld (hl), bcde                            18
[MEM.LIB(528:1)]: return maxsz;
[MEM.LIB(528:2)]: return maxsz;
002:e5ac 210E00       ld hl, 0x000E                            6
002:e5af 39           add hl, sp                               2
002:e5b0 DD1A         ld bcde, (hl)                            14
[MEM.LIB(528:1)]: return maxsz;
002:e5b2 D9           exx                                      2
002:e5b3 271C         add sp, 28                               4
002:e5b5 D9           exx                                      2
002:e5b6 ED45         lret                                     13
[MEM.LIB(529:1)]: _fail:
[MEM.LIB(529:6)]: :
002:e5b8 2130FD       ld hl, 0xFD30                            6
002:e5bb E5           push hl                                  10
002:e5bc CD7321       call exception                           12
002:e5bf 2702         add sp, 2                                4
[MEM.LIB(531:2)]: exit(-ERR_BADXALLOC);
002:e5c1 2130FD       ld hl, 0xFD30                            6
002:e5c4 E5           push hl                                  10
002:e5c5 CD8125       call exit                                12
002:e5c8 2702         add sp, 2                                4
[MEM.LIB(532:1)]: }
002:e5ca C3B2E5       jp 0xE5B2                                7
[MALLOC.LIB(3022:1)]: mspace create_mspace_with_base(m_voidptr base, m_size_t capacity, int locked) {
002:e5cd 27F8         add sp, -8                               4
[MALLOC.LIB(3027:3)]: m = 0;
002:e5cf ED1C00000000 ld px, 0x00000000                        12
002:e5d5 ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(3028:3)]: msize = pad_request(sizeof(struct malloc_state));
002:e5d8 11D001       ld de, 0x01D0                            6
002:e5db 010000       ld bc, 0x0000                            6
002:e5de BF           clr hl                                   2
002:e5df 39           add hl, sp                               2
002:e5e0 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(3029:3)]: init_mparams(); /* Ensure pagesize etc initialized */
002:e5e2 CFACE602     lcall init_mparams                       19
[MALLOC.LIB(3031:3)]: if (capacity > msize + TOP_FOOT_SIZE &&
002:e5e6 DDEE0F       ld bcde, (sp + 0x0F)                     15
002:e5e9 DDF5         push bcde                                18
002:e5eb FDEE04       ld jkhl, (sp + 0x04)                     15
002:e5ee A328         ld bcde, 40                              4
002:e5f0 EDC6         add jkhl, bcde                           4
002:e5f2 B4           ex jkhl, bcde                            2
002:e5f3 FDF1         pop jkhl                                 13
002:e5f5 ED58         cp jkhl, bcde                            4
002:e5f7 EDAC         flag gtu, hl                             4
002:e5f9 CC           bool hl                                  2
002:e5fa CA1EE6       jp z, 0xE61E                             7
002:e5fd DDEE0F       ld bcde, (sp + 0x0F)                     15
002:e600 DDF5         push bcde                                18
002:e602 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e605 A328         ld bcde, 40                              4
002:e607 EDC6         add jkhl, bcde                           4
002:e609 FDF5         push jkhl                                18
002:e60b 217BB0       ld hl, 0xB07B                            6
002:e60e DD1A         ld bcde, (hl)                            14
002:e610 FDF1         pop jkhl                                 13
002:e612 EDC6         add jkhl, bcde                           4
002:e614 B4           ex jkhl, bcde                            2
002:e615 DD4D         neg bcde                                 4
002:e617 FDF1         pop jkhl                                 13
002:e619 ED58         cp jkhl, bcde                            4
002:e61b EDDC         flag c, hl                               4
002:e61d CC           bool hl                                  2
[MALLOC.LIB(3032:1)]: capacity < (m_size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
002:e61e CC           bool hl                                  2
002:e61f CA9EE6       jp z, 0xE69E                             7
[MALLOC.LIB(3032:75)]: {
[MALLOC.LIB(3033:5)]: m = init_user_mstate((m_charptr)base, capacity);
002:e622 DDEE0F       ld bcde, (sp + 0x0F)                     15
002:e625 DDF5         push bcde                                18
002:e627 210F00       ld hl, 0x000F                            6
002:e62a 39           add hl, sp                               2
002:e62b DD1A         ld bcde, (hl)                            14
002:e62d DD9D         ld px, bcde                              4
002:e62f EDD5         push px                                  18
002:e631 CF2EE702     lcall init_user_mstate                   19
002:e635 2708         add sp, 8                                4
002:e637 ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(3034:5)]: m->seg.sflags = MALLOC_EXTERN_BIT;
002:e63a FDEE04       ld jkhl, (sp + 0x04)                     15
002:e63d 11B401       ld de, 0x01B4                            6
002:e640 010000       ld bc, 0x0000                            6
002:e643 EDC6         add jkhl, bcde                           4
002:e645 A30C         ld bcde, 12                              4
002:e647 EDC6         add jkhl, bcde                           4
002:e649 FD9D         ld px, jkhl                              4
002:e64b A308         ld bcde, 8                               4
002:e64d DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3035:5)]: set_lock(m, locked);
002:e650 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e653 11B001       ld de, 0x01B0                            6
002:e656 010000       ld bc, 0x0000                            6
002:e659 EDC6         add jkhl, bcde                           4
002:e65b FDF5         push jkhl                                18
002:e65d C417         ld hl, (sp + 0x17)                       9
002:e65f CC           bool hl                                  2
002:e660 CA7EE6       jp z, 0xE67E                             7
002:e663 FDEE08       ld jkhl, (sp + 0x08)                     15
002:e666 11B001       ld de, 0x01B0                            6
002:e669 010000       ld bc, 0x0000                            6
002:e66c EDC6         add jkhl, bcde                           4
002:e66e FD9D         ld px, jkhl                              4
002:e670 FD1E00       ld jkhl, (px + 0)                        15
002:e673 A300         ld bcde, 0                               4
002:e675 EDF6         or jkhl, bcde                            4
002:e677 B1           ld de, hl                                2
002:e678 B9           ex jk, hl                                2
002:e679 91           ld bc, hl                                2
002:e67a B9           ex jk, hl                                2
002:e67b C399E6       jp 0xE699                                7
[MALLOC.LIB(3035:1)]: set_lock(m, locked);
002:e67e FDEE08       ld jkhl, (sp + 0x08)                     15
002:e681 11B001       ld de, 0x01B0                            6
002:e684 010000       ld bc, 0x0000                            6
002:e687 EDC6         add jkhl, bcde                           4
002:e689 FD9D         ld px, jkhl                              4
002:e68b FD1E00       ld jkhl, (px + 0)                        15
002:e68e A3FF         ld bcde, -1                              4
002:e690 010000       ld bc, 0x0000                            6
002:e693 EDE6         and jkhl, bcde                           4
002:e695 B1           ld de, hl                                2
002:e696 B9           ex jk, hl                                2
002:e697 91           ld bc, hl                                2
002:e698 B9           ex jk, hl                                2
[MALLOC.LIB(3035:1)]: set_lock(m, locked);
002:e699 EDD1         pop px                                   13
002:e69b DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3036:3)]: }
[MALLOC.LIB(3037:1)]: return (mspace)m;
[MALLOC.LIB(3037:3)]: return (mspace)m;
002:e69e 210400       ld hl, 0x0004                            6
002:e6a1 39           add hl, sp                               2
002:e6a2 DD1A         ld bcde, (hl)                            14
002:e6a4 DD9D         ld px, bcde                              4
[MALLOC.LIB(3037:1)]: return (mspace)m;
002:e6a6 D9           exx                                      2
002:e6a7 2708         add sp, 8                                4
002:e6a9 D9           exx                                      2
002:e6aa ED45         lret                                     13
[MALLOC.LIB(1626:1)]: __static m_int init_mparams(void) {
002:e6ac 27FC         add sp, -4                               4
[MALLOC.LIB(1630:3)]: if (mparams.page_size == 0) {
002:e6ae 217BB0       ld hl, 0xB07B                            6
002:e6b1 FD1A         ld jkhl, (hl)                            14
002:e6b3 A300         ld bcde, 0                               4
002:e6b5 ED58         cp jkhl, bcde                            4
002:e6b7 EDCC         flag z, hl                               4
002:e6b9 CC           bool hl                                  2
002:e6ba CA25E7       jp z, 0xE725                             7
[MALLOC.LIB(1630:31)]: {
[MALLOC.LIB(1631:5)]: mparams.default_mflags = USE_LOCK_BIT|USE_NONCONTIGUOUS_BIT;
002:e6bd A304         ld bcde, 4                               4
002:e6bf DDF5         push bcde                                18
002:e6c1 217FB0       ld hl, 0xB07F                            6
002:e6c4 DDF1         pop bcde                                 13
002:e6c6 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(1642:5)]: s = (m_size_t)0x58585858UL;
002:e6c8 115858       ld de, 0x5858                            6
002:e6cb 015858       ld bc, 0x5858                            6
002:e6ce BF           clr hl                                   2
002:e6cf 39           add hl, sp                               2
002:e6d0 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(1644:30)]: ;
002:e6d2 2177B0       ld hl, 0xB077                            6
002:e6d5 FD1A         ld jkhl, (hl)                            14
002:e6d7 A300         ld bcde, 0                               4
002:e6d9 ED58         cp jkhl, bcde                            4
002:e6db EDCC         flag z, hl                               4
002:e6dd CC           bool hl                                  2
002:e6de CAEEE6       jp z, 0xE6EE                             7
[MALLOC.LIB(1645:29)]: {
[MALLOC.LIB(1646:7)]: mparams.magic = s;
002:e6e1 BF           clr hl                                   2
002:e6e2 39           add hl, sp                               2
002:e6e3 DD1A         ld bcde, (hl)                            14
002:e6e5 DDF5         push bcde                                18
002:e6e7 2177B0       ld hl, 0xB077                            6
002:e6ea DDF1         pop bcde                                 13
002:e6ec DD1B         ld (hl), bcde                            18
[MALLOC.LIB(1647:5)]: }
[MALLOC.LIB(1648:1)]: RELEASE_MAGIC_INIT_LOCK();
[MALLOC.LIB(1648:30)]: ;
002:e6ee 110010       ld de, 0x1000                            6
002:e6f1 010000       ld bc, 0x0000                            6
002:e6f4 DDF5         push bcde                                18
002:e6f6 217BB0       ld hl, 0xB07B                            6
002:e6f9 DDF1         pop bcde                                 13
002:e6fb DD1B         ld (hl), bcde                            18
[MALLOC.LIB(1661:5)]: if ((sizeof(m_size_t) != sizeof(m_charptr)) ||
002:e6fd 217BB0       ld hl, 0xB07B                            6
002:e700 DD1A         ld bcde, (hl)                            14
002:e702 DDF5         push bcde                                18
002:e704 217BB0       ld hl, 0xB07B                            6
002:e707 FD1A         ld jkhl, (hl)                            14
002:e709 A301         ld bcde, 1                               4
002:e70b EDD6         sub jkhl, bcde                           4
002:e70d B4           ex jkhl, bcde                            2
002:e70e FDF1         pop jkhl                                 13
002:e710 EDE6         and jkhl, bcde                           4
002:e712 A300         ld bcde, 0                               4
002:e714 ED58         cp jkhl, bcde                            4
002:e716 EDC4         flag nz, hl                              4
002:e718 CC           bool hl                                  2
002:e719 CA25E7       jp z, 0xE725                             7
[MALLOC.LIB(1669:7)]: MALLOC_ABORT;
002:e71c 21F4FF       ld hl, 0xFFF4                            6
002:e71f E5           push hl                                  10
002:e720 CD8125       call exit                                12
002:e723 2702         add sp, 2                                4
[MALLOC.LIB(1670:1)]: }
[MALLOC.LIB(1670:3)]: }
[MALLOC.LIB(1671:1)]: return 0;
[MALLOC.LIB(1671:3)]: return 0;
002:e725 BF           clr hl                                   2
002:e726 A300         ld bcde, 0                               4
[MALLOC.LIB(1671:1)]: return 0;
002:e728 D9           exx                                      2
002:e729 2704         add sp, 4                                4
002:e72b D9           exx                                      2
002:e72c ED45         lret                                     13
[MALLOC.LIB(2979:1)]: __static mstate init_user_mstate(m_charptr tbase, m_size_t tsize) {
002:e72e 27F0         add sp, -16                              4
[MALLOC.LIB(2986:3)]: msize = pad_request(sizeof(struct malloc_state));
002:e730 11D001       ld de, 0x01D0                            6
002:e733 010000       ld bc, 0x0000                            6
002:e736 DDEF0C       ld (sp + 0x0C), bcde                     19
[MALLOC.LIB(2987:3)]: msp = align_as_chunk(tbase);
002:e739 DDEE13       ld bcde, (sp + 0x13)                     15
002:e73c DDF5         push bcde                                18
002:e73e FDEE17       ld jkhl, (sp + 0x17)                     15
002:e741 A308         ld bcde, 8                               4
002:e743 EDC6         add jkhl, bcde                           4
002:e745 B4           ex jkhl, bcde                            2
002:e746 A408         ld jkhl, 8                               4
002:e748 55           sub hl, de                               2
002:e749 A307         ld bcde, 7                               4
002:e74b DC           and hl, de                               2
002:e74c A300         ld bcde, 0                               4
002:e74e B1           ld de, hl                                2
002:e74f FDF1         pop jkhl                                 13
002:e751 EDC6         add jkhl, bcde                           4
002:e753 FD9D         ld px, jkhl                              4
002:e755 ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(2988:3)]: m = (mstate)(chunk2mem(msp));
002:e758 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e75b A308         ld bcde, 8                               4
002:e75d EDC6         add jkhl, bcde                           4
002:e75f FD9D         ld px, jkhl                              4
002:e761 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2989:3)]: _f_memset(m, 0, msize);
002:e764 DDEE0C       ld bcde, (sp + 0x0C)                     15
002:e767 DDF5         push bcde                                18
002:e769 EDA50000     push 0x0000                              15
002:e76d 210600       ld hl, 0x0006                            6
002:e770 39           add hl, sp                               2
002:e771 DD1A         ld bcde, (hl)                            14
002:e773 DD9D         ld px, bcde                              4
002:e775 EDD5         push px                                  18
002:e777 CDBB23       call _f_memset                           12
002:e77a 270A         add sp, 10                               4
[MALLOC.LIB(2990:26)]: ;
002:e77c ED1404       ld px, (sp + 0x04)                       15
002:e77f 6D5C04       ld px, px + 4                            6
002:e782 FDEE0C       ld jkhl, (sp + 0x0C)                     15
002:e785 A301         ld bcde, 1                               4
002:e787 EDF6         or jkhl, bcde                            4
002:e789 A302         ld bcde, 2                               4
002:e78b EDF6         or jkhl, bcde                            4
002:e78d B4           ex jkhl, bcde                            2
002:e78e DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2992:3)]: m->seg.base = m->least_addr = tbase;
002:e791 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e794 11B401       ld de, 0x01B4                            6
002:e797 010000       ld bc, 0x0000                            6
002:e79a EDC6         add jkhl, bcde                           4
002:e79c FDF5         push jkhl                                18
002:e79e ED1404       ld px, (sp + 0x04)                       15
002:e7a1 6D5C10       ld px, px + 16                           6
002:e7a4 DDEE17       ld bcde, (sp + 0x17)                     15
002:e7a7 DDAD         ld py, bcde                              4
002:e7a9 6D9900       ld (px + 0), py                          19
002:e7ac 6D67         ld px, py                                4
002:e7ae 6D97         ld py, px                                4
002:e7b0 EDD1         pop px                                   13
002:e7b2 6D9900       ld (px + 0), py                          19
002:e7b5 6D67         ld px, py                                4
[MALLOC.LIB(2993:3)]: m->seg.Size = m->footprint = m->max_footprint = tsize;
002:e7b7 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e7ba 11B401       ld de, 0x01B4                            6
002:e7bd 010000       ld bc, 0x0000                            6
002:e7c0 EDC6         add jkhl, bcde                           4
002:e7c2 A304         ld bcde, 4                               4
002:e7c4 EDC6         add jkhl, bcde                           4
002:e7c6 FDF5         push jkhl                                18
002:e7c8 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e7cb 11A801       ld de, 0x01A8                            6
002:e7ce 010000       ld bc, 0x0000                            6
002:e7d1 EDC6         add jkhl, bcde                           4
002:e7d3 FDF5         push jkhl                                18
002:e7d5 FDEE08       ld jkhl, (sp + 0x08)                     15
002:e7d8 11AC01       ld de, 0x01AC                            6
002:e7db 010000       ld bc, 0x0000                            6
002:e7de EDC6         add jkhl, bcde                           4
002:e7e0 FD9D         ld px, jkhl                              4
002:e7e2 DDEE1F       ld bcde, (sp + 0x1F)                     15
002:e7e5 DD1F00       ld (px + 0), bcde                        19
002:e7e8 EDD1         pop px                                   13
002:e7ea DD1F00       ld (px + 0), bcde                        19
002:e7ed EDD1         pop px                                   13
002:e7ef DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2994:3)]: m->magic = mparams.magic;
002:e7f2 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e7f5 A31C         ld bcde, 28                              4
002:e7f7 EDC6         add jkhl, bcde                           4
002:e7f9 FDF5         push jkhl                                18
002:e7fb 2177B0       ld hl, 0xB077                            6
002:e7fe DD1A         ld bcde, (hl)                            14
002:e800 EDD1         pop px                                   13
002:e802 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2995:3)]: m->mflags = mparams.default_mflags;
002:e805 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e808 11B001       ld de, 0x01B0                            6
002:e80b 010000       ld bc, 0x0000                            6
002:e80e EDC6         add jkhl, bcde                           4
002:e810 FDF5         push jkhl                                18
002:e812 217FB0       ld hl, 0xB07F                            6
002:e815 DD1A         ld bcde, (hl)                            14
002:e817 EDD1         pop px                                   13
002:e819 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2996:3)]: m->extp = 0;
002:e81c FDEE00       ld jkhl, (sp + 0x00)                     15
002:e81f 11C401       ld de, 0x01C4                            6
002:e822 010000       ld bc, 0x0000                            6
002:e825 EDC6         add jkhl, bcde                           4
002:e827 FD9D         ld px, jkhl                              4
002:e829 EDD5         push px                                  18
002:e82b ED1C00000000 ld px, 0x00000000                        12
002:e831 6D97         ld py, px                                4
002:e833 EDD1         pop px                                   13
002:e835 6D9900       ld (px + 0), py                          19
002:e838 6D67         ld px, py                                4
[MALLOC.LIB(2997:3)]: m->exts = 0;
002:e83a FDEE00       ld jkhl, (sp + 0x00)                     15
002:e83d 11C801       ld de, 0x01C8                            6
002:e840 010000       ld bc, 0x0000                            6
002:e843 EDC6         add jkhl, bcde                           4
002:e845 FD9D         ld px, jkhl                              4
002:e847 A300         ld bcde, 0                               4
002:e849 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2998:3)]: disable_contiguous(m);
002:e84c FDEE00       ld jkhl, (sp + 0x00)                     15
002:e84f 11B001       ld de, 0x01B0                            6
002:e852 010000       ld bc, 0x0000                            6
002:e855 EDC6         add jkhl, bcde                           4
002:e857 FD9D         ld px, jkhl                              4
002:e859 FD1E00       ld jkhl, (px + 0)                        15
002:e85c A304         ld bcde, 4                               4
002:e85e EDF6         or jkhl, bcde                            4
002:e860 B1           ld de, hl                                2
002:e861 B9           ex jk, hl                                2
002:e862 91           ld bc, hl                                2
002:e863 B9           ex jk, hl                                2
002:e864 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2999:3)]: init_bins(m);
002:e867 BF           clr hl                                   2
002:e868 39           add hl, sp                               2
002:e869 DD1A         ld bcde, (hl)                            14
002:e86b DD9D         ld px, bcde                              4
002:e86d EDD5         push px                                  18
002:e86f CFDEE802     lcall init_bins                          19
002:e873 2704         add sp, 4                                4
[MALLOC.LIB(3000:3)]: mn = next_chunk(mem2chunk(m));
002:e875 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e878 A308         ld bcde, 8                               4
002:e87a EDD6         sub jkhl, bcde                           4
002:e87c FD9D         ld px, jkhl                              4
002:e87e EDD5         push px                                  18
002:e880 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e883 A308         ld bcde, 8                               4
002:e885 EDD6         sub jkhl, bcde                           4
002:e887 A304         ld bcde, 4                               4
002:e889 EDC6         add jkhl, bcde                           4
002:e88b FD9D         ld px, jkhl                              4
002:e88d FD1E00       ld jkhl, (px + 0)                        15
002:e890 A3F8         ld bcde, -8                              4
002:e892 01FFFF       ld bc, 0xFFFF                            6
002:e895 EDE6         and jkhl, bcde                           4
002:e897 B4           ex jkhl, bcde                            2
002:e898 FDF1         pop jkhl                                 13
002:e89a EDC6         add jkhl, bcde                           4
002:e89c FD9D         ld px, jkhl                              4
002:e89e ED1508       ld (sp + 0x08), px                       19
[MALLOC.LIB(3001:3)]: init_top(m, mn, (m_size_t)((tbase + tsize) - (m_charptr)mn) - TOP_FOOT_SIZE);
002:e8a1 FDEE13       ld jkhl, (sp + 0x13)                     15
002:e8a4 DDEE17       ld bcde, (sp + 0x17)                     15
002:e8a7 EDC6         add jkhl, bcde                           4
002:e8a9 DDEE08       ld bcde, (sp + 0x08)                     15
002:e8ac EDD6         sub jkhl, bcde                           4
002:e8ae FD9D         ld px, jkhl                              4
002:e8b0 DDDD         ld bcde, px                              4
002:e8b2 B4           ex jkhl, bcde                            2
002:e8b3 A328         ld bcde, 40                              4
002:e8b5 EDD6         sub jkhl, bcde                           4
002:e8b7 B1           ld de, hl                                2
002:e8b8 B9           ex jk, hl                                2
002:e8b9 91           ld bc, hl                                2
002:e8ba B9           ex jk, hl                                2
002:e8bb DDF5         push bcde                                18
002:e8bd DDEE0C       ld bcde, (sp + 0x0C)                     15
002:e8c0 DDF5         push bcde                                18
002:e8c2 210800       ld hl, 0x0008                            6
002:e8c5 39           add hl, sp                               2
002:e8c6 DD1A         ld bcde, (hl)                            14
002:e8c8 DD9D         ld px, bcde                              4
002:e8ca EDD5         push px                                  18
002:e8cc CF47E902     lcall init_top                           19
002:e8d0 270C         add sp, 12                               4
[MALLOC.LIB(3002:29)]: ;
002:e8d2 BF           clr hl                                   2
002:e8d3 39           add hl, sp                               2
002:e8d4 DD1A         ld bcde, (hl)                            14
002:e8d6 DD9D         ld px, bcde                              4
[MALLOC.LIB(3003:1)]: return m;
002:e8d8 D9           exx                                      2
002:e8d9 2710         add sp, 16                               4
002:e8db D9           exx                                      2
002:e8dc ED45         lret                                     13
[MALLOC.LIB(2369:1)]: __static void init_bins(mstate m) {
002:e8de 27F8         add sp, -8                               4
[MALLOC.LIB(2374:3)]: for (i = 0; i < NSMALLBINS; ++i) {
002:e8e0 A300         ld bcde, 0                               4
002:e8e2 DDEF04       ld (sp + 0x04), bcde                     19
002:e8e5 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e8e8 A320         ld bcde, 32                              4
002:e8ea ED58         cp jkhl, bcde                            4
002:e8ec EDDC         flag c, hl                               4
002:e8ee CC           bool hl                                  2
002:e8ef CA43E9       jp z, 0xE943                             7
[MALLOC.LIB(2374:1)]: for (i = 0; i < NSMALLBINS; ++i) {
[MALLOC.LIB(2374:36)]: {
[MALLOC.LIB(2375:5)]: bin = smallbin_at(m,i);
002:e8f2 FDEE0B       ld jkhl, (sp + 0x0B)                     15
002:e8f5 A320         ld bcde, 32                              4
002:e8f7 EDC6         add jkhl, bcde                           4
002:e8f9 DDEE04       ld bcde, (sp + 0x04)                     15
002:e8fc DDA8         sll 1, bcde                              4
002:e8fe DDA9         sll 2, bcde                              4
002:e900 EDC6         add jkhl, bcde                           4
002:e902 FD9D         ld px, jkhl                              4
002:e904 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2376:5)]: bin->fd = bin->bk = bin;
002:e907 FDEE00       ld jkhl, (sp + 0x00)                     15
002:e90a A308         ld bcde, 8                               4
002:e90c EDC6         add jkhl, bcde                           4
002:e90e FDF5         push jkhl                                18
002:e910 FDEE04       ld jkhl, (sp + 0x04)                     15
002:e913 A30C         ld bcde, 12                              4
002:e915 EDC6         add jkhl, bcde                           4
002:e917 FD9D         ld px, jkhl                              4
002:e919 210400       ld hl, 0x0004                            6
002:e91c 39           add hl, sp                               2
002:e91d DD1A         ld bcde, (hl)                            14
002:e91f DDAD         ld py, bcde                              4
002:e921 6D9900       ld (px + 0), py                          19
002:e924 6D67         ld px, py                                4
002:e926 6D97         ld py, px                                4
002:e928 EDD1         pop px                                   13
002:e92a 6D9900       ld (px + 0), py                          19
002:e92d 6D67         ld px, py                                4
[MALLOC.LIB(2377:3)]: }
[MALLOC.LIB(2377:1)]: }
002:e92f FDEE04       ld jkhl, (sp + 0x04)                     15
002:e932 A301         ld bcde, 1                               4
002:e934 EDC6         add jkhl, bcde                           4
002:e936 FDEF04       ld (sp + 0x04), jkhl                     19
002:e939 A320         ld bcde, 32                              4
002:e93b ED58         cp jkhl, bcde                            4
002:e93d EDDC         flag c, hl                               4
002:e93f CC           bool hl                                  2
002:e940 C2F2E8       jp nz, 0xE8F2                            7
[MALLOC.LIB(2377:1)]: }
[MALLOC.LIB(2378:1)]: }
[MALLOC.LIB(2378:1)]: }
002:e943 2708         add sp, 8                                4
002:e945 ED45         lret                                     13
[MALLOC.LIB(2350:1)]: __static void init_top(mstate m, mchunkptr p, m_size_t psize) {
002:e947 27FC         add sp, -4                               4
[MALLOC.LIB(2354:3)]: offset = align_offset(chunk2mem(p));
002:e949 FDEE0B       ld jkhl, (sp + 0x0B)                     15
002:e94c A308         ld bcde, 8                               4
002:e94e EDC6         add jkhl, bcde                           4
002:e950 B4           ex jkhl, bcde                            2
002:e951 A408         ld jkhl, 8                               4
002:e953 55           sub hl, de                               2
002:e954 A307         ld bcde, 7                               4
002:e956 DC           and hl, de                               2
002:e957 A300         ld bcde, 0                               4
002:e959 B1           ld de, hl                                2
002:e95a DDEF00       ld (sp + 0x00), bcde                     19
[MALLOC.LIB(2355:3)]: p = (mchunkptr)((m_charptr)p + (m_ptrnum)offset);
002:e95d FDEE0B       ld jkhl, (sp + 0x0B)                     15
002:e960 DDEE00       ld bcde, (sp + 0x00)                     15
002:e963 EDC6         add jkhl, bcde                           4
002:e965 FD9D         ld px, jkhl                              4
002:e967 ED150B       ld (sp + 0x0B), px                       19
[MALLOC.LIB(2356:3)]: psize -= offset;
002:e96a FDEE0F       ld jkhl, (sp + 0x0F)                     15
002:e96d DDEE00       ld bcde, (sp + 0x00)                     15
002:e970 EDD6         sub jkhl, bcde                           4
002:e972 FDEF0F       ld (sp + 0x0F), jkhl                     19
[MALLOC.LIB(2358:3)]: m->top = p;
002:e975 ED1407       ld px, (sp + 0x07)                       15
002:e978 6D5C18       ld px, px + 24                           6
002:e97b DDEE0B       ld bcde, (sp + 0x0B)                     15
002:e97e DDAD         ld py, bcde                              4
002:e980 6D9900       ld (px + 0), py                          19
002:e983 6D67         ld px, py                                4
[MALLOC.LIB(2359:3)]: m->topsize = psize;
002:e985 ED1407       ld px, (sp + 0x07)                       15
002:e988 6D5C0C       ld px, px + 12                           6
002:e98b DDEE0F       ld bcde, (sp + 0x0F)                     15
002:e98e DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2360:3)]: p->head = psize | PINUSE_BIT;
002:e991 ED140B       ld px, (sp + 0x0B)                       15
002:e994 6D5C04       ld px, px + 4                            6
002:e997 FDEE0F       ld jkhl, (sp + 0x0F)                     15
002:e99a A301         ld bcde, 1                               4
002:e99c EDF6         or jkhl, bcde                            4
002:e99e B4           ex jkhl, bcde                            2
002:e99f DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2362:3)]: chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
002:e9a2 FDEE0B       ld jkhl, (sp + 0x0B)                     15
002:e9a5 DDEE0F       ld bcde, (sp + 0x0F)                     15
002:e9a8 EDC6         add jkhl, bcde                           4
002:e9aa A304         ld bcde, 4                               4
002:e9ac EDC6         add jkhl, bcde                           4
002:e9ae FD9D         ld px, jkhl                              4
002:e9b0 A328         ld bcde, 40                              4
002:e9b2 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2363:1)]: }
[MALLOC.LIB(2363:1)]: }
002:e9b5 2704         add sp, 4                                4
002:e9b7 ED45         lret                                     13
[MALLOC.LIB(3220:1)]: void mspace_free(mspace msp, m_voidptr mem) {
002:e9b9 27D8         add sp, -40                              4
[MALLOC.LIB(3229:3)]: if (mem != 0) {
002:e9bb FDEE2F       ld jkhl, (sp + 0x2F)                     15
002:e9be A300         ld bcde, 0                               4
002:e9c0 ED58         cp jkhl, bcde                            4
002:e9c2 EDC4         flag nz, hl                              4
002:e9c4 CC           bool hl                                  2
002:e9c5 CAB2ED       jp z, 0xEDB2                             7
[MALLOC.LIB(3229:17)]: {
[MALLOC.LIB(3230:5)]: p  = mem2chunk(mem);
002:e9c8 FDEE2F       ld jkhl, (sp + 0x2F)                     15
002:e9cb A308         ld bcde, 8                               4
002:e9cd EDD6         sub jkhl, bcde                           4
002:e9cf FD9D         ld px, jkhl                              4
002:e9d1 ED1524       ld (sp + 0x24), px                       19
[MALLOC.LIB(3234:5)]: fm = (mstate)msp;
002:e9d4 ED142B       ld px, (sp + 0x2B)                       15
002:e9d7 ED1520       ld (sp + 0x20), px                       19
002:e9da DDDD         ld bcde, px                              4
[MALLOC.LIB(3236:5)]: if (!ok_magic(fm)) {
002:e9dc BF           clr hl                                   2
002:e9dd CC           bool hl                                  2
002:e9de CAF7E9       jp z, 0xE9F7                             7
[MALLOC.LIB(3236:24)]: {
[MALLOC.LIB(3237:7)]: USAGE_ERROR_ACTION(fm, p);
002:e9e1 21F3FC       ld hl, 0xFCF3                            6
002:e9e4 E5           push hl                                  10
002:e9e5 CD7321       call exception                           12
002:e9e8 2702         add sp, 2                                4
002:e9ea 21F3FC       ld hl, 0xFCF3                            6
002:e9ed E5           push hl                                  10
002:e9ee CD8125       call exit                                12
002:e9f1 2702         add sp, 2                                4
[MALLOC.LIB(3238:1)]: return;
[MALLOC.LIB(3238:7)]: return;
002:e9f3 2728         add sp, 40                               4
002:e9f5 ED45         lret                                     13
[MALLOC.LIB(3239:5)]: }
[MALLOC.LIB(3240:1)]: if (!MALLOC_PRE_ACTION(fm)) {
[MALLOC.LIB(3240:5)]: if (!MALLOC_PRE_ACTION(fm)) {
002:e9f7 BF           clr hl                                   2
002:e9f8 23           inc hl                                   2
002:e9f9 CC           bool hl                                  2
002:e9fa CAB2ED       jp z, 0xEDB2                             7
[MALLOC.LIB(3240:33)]: {
[MALLOC.LIB(3241:41)]: ;
002:e9fd DDEE24       ld bcde, (sp + 0x24)                     15
002:ea00 DDF5         push bcde                                18
002:ea02 ED1424       ld px, (sp + 0x24)                       15
002:ea05 6D5C10       ld px, px + 16                           6
002:ea08 6D5800       ld px, (px + 0)                          15
002:ea0b DDDD         ld bcde, px                              4
002:ea0d FDF1         pop jkhl                                 13
002:ea0f ED58         cp jkhl, bcde                            4
002:ea11 EDD4         flag nc, hl                              4
002:ea13 CC           bool hl                                  2
002:ea14 CA2BEA       jp z, 0xEA2B                             7
002:ea17 ED1424       ld px, (sp + 0x24)                       15
002:ea1a 6D5C04       ld px, px + 4                            6
002:ea1d FD1E00       ld jkhl, (px + 0)                        15
002:ea20 A302         ld bcde, 2                               4
002:ea22 EDE6         and jkhl, bcde                           4
002:ea24 B1           ld de, hl                                2
002:ea25 B9           ex jk, hl                                2
002:ea26 91           ld bc, hl                                2
002:ea27 B9           ex jk, hl                                2
002:ea28 81           ld hl, bc                                2
002:ea29 EC           or hl, de                                2
002:ea2a CC           bool hl                                  2
[MALLOC.LIB(3243:1)]: if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
002:ea2b CC           bool hl                                  2
002:ea2c CAA0ED       jp z, 0xEDA0                             7
[MALLOC.LIB(3243:55)]: {
[MALLOC.LIB(3244:9)]: psize = chunksize(p);
002:ea2f ED1424       ld px, (sp + 0x24)                       15
002:ea32 6D5C04       ld px, px + 4                            6
002:ea35 FD1E00       ld jkhl, (px + 0)                        15
002:ea38 A3F8         ld bcde, -8                              4
002:ea3a 01FFFF       ld bc, 0xFFFF                            6
002:ea3d EDE6         and jkhl, bcde                           4
002:ea3f FDEF1C       ld (sp + 0x1C), jkhl                     19
[MALLOC.LIB(3245:9)]: next = chunk_plus_offset(p, psize);
002:ea42 FDEE24       ld jkhl, (sp + 0x24)                     15
002:ea45 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ea48 EDC6         add jkhl, bcde                           4
002:ea4a FD9D         ld px, jkhl                              4
002:ea4c ED150C       ld (sp + 0x0C), px                       19
[MALLOC.LIB(3246:9)]: if (!pinuse(p)) {
002:ea4f ED1424       ld px, (sp + 0x24)                       15
002:ea52 6D5C04       ld px, px + 4                            6
002:ea55 FD1E00       ld jkhl, (px + 0)                        15
002:ea58 A301         ld bcde, 1                               4
002:ea5a EDE6         and jkhl, bcde                           4
002:ea5c B1           ld de, hl                                2
002:ea5d B9           ex jk, hl                                2
002:ea5e 91           ld bc, hl                                2
002:ea5f B9           ex jk, hl                                2
002:ea60 DD5C         test bcde                                4
002:ea62 EDCC         flag z, hl                               4
002:ea64 CC           bool hl                                  2
002:ea65 CA47EB       jp z, 0xEB47                             7
[MALLOC.LIB(3246:25)]: {
[MALLOC.LIB(3247:11)]: prevsize = p->prev_foot;
002:ea68 ED1424       ld px, (sp + 0x24)                       15
002:ea6b DD1E00       ld bcde, (px + 0)                        15
002:ea6e 210400       ld hl, 0x0004                            6
002:ea71 39           add hl, sp                               2
002:ea72 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(3248:11)]: {
[MALLOC.LIB(3249:13)]: prev = chunk_minus_offset(p, prevsize);
002:ea74 FDEE24       ld jkhl, (sp + 0x24)                     15
002:ea77 DDEE04       ld bcde, (sp + 0x04)                     15
002:ea7a EDD6         sub jkhl, bcde                           4
002:ea7c FD9D         ld px, jkhl                              4
002:ea7e ED1508       ld (sp + 0x08), px                       19
[MALLOC.LIB(3250:13)]: psize += prevsize;
002:ea81 FDEE1C       ld jkhl, (sp + 0x1C)                     15
002:ea84 DDEE04       ld bcde, (sp + 0x04)                     15
002:ea87 EDC6         add jkhl, bcde                           4
002:ea89 FDEF1C       ld (sp + 0x1C), jkhl                     19
[MALLOC.LIB(3251:13)]: p = prev;
002:ea8c ED1408       ld px, (sp + 0x08)                       15
002:ea8f ED1524       ld (sp + 0x24), px                       19
[MALLOC.LIB(3252:13)]: if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
002:ea92 DDEE08       ld bcde, (sp + 0x08)                     15
002:ea95 DDF5         push bcde                                18
002:ea97 ED1424       ld px, (sp + 0x24)                       15
002:ea9a 6D5C10       ld px, px + 16                           6
002:ea9d 6D5800       ld px, (px + 0)                          15
002:eaa0 DDDD         ld bcde, px                              4
002:eaa2 FDF1         pop jkhl                                 13
002:eaa4 ED58         cp jkhl, bcde                            4
002:eaa6 EDD4         flag nc, hl                              4
002:eaa8 CC           bool hl                                  2
002:eaa9 CA44EB       jp z, 0xEB44                             7
[MALLOC.LIB(3252:48)]: { /* consolidate backward */
[MALLOC.LIB(3253:15)]: if (p != fm->dv) {
002:eaac DDEE24       ld bcde, (sp + 0x24)                     15
002:eaaf DDF5         push bcde                                18
002:eab1 ED1424       ld px, (sp + 0x24)                       15
002:eab4 6D5C14       ld px, px + 20                           6
002:eab7 6D5800       ld px, (px + 0)                          15
002:eaba DDDD         ld bcde, px                              4
002:eabc FDF1         pop jkhl                                 13
002:eabe ED58         cp jkhl, bcde                            4
002:eac0 EDC4         flag nz, hl                              4
002:eac2 CC           bool hl                                  2
002:eac3 CAE3EA       jp z, 0xEAE3                             7
[MALLOC.LIB(3253:32)]: {
[MALLOC.LIB(3254:17)]: unlink_chunk(fm, p, prevsize);
002:eac6 DDEE04       ld bcde, (sp + 0x04)                     15
002:eac9 DDF5         push bcde                                18
002:eacb DDEE28       ld bcde, (sp + 0x28)                     15
002:eace DDF5         push bcde                                18
002:ead0 212800       ld hl, 0x0028                            6
002:ead3 39           add hl, sp                               2
002:ead4 DD1A         ld bcde, (hl)                            14
002:ead6 DD9D         ld px, bcde                              4
002:ead8 EDD5         push px                                  18
002:eada CF57E303     lcall unlink_chunk                       19
002:eade 270C         add sp, 12                               4
[MALLOC.LIB(3255:15)]: }
002:eae0 C341EB       jp 0xEB41                                7
[MALLOC.LIB(3256:1)]: else if ((next->head & INUSE_BITS) == INUSE_BITS) {
[MALLOC.LIB(3256:20)]: if ((next->head & INUSE_BITS) == INUSE_BITS) {
002:eae3 ED140C       ld px, (sp + 0x0C)                       15
002:eae6 6D5C04       ld px, px + 4                            6
002:eae9 FD1E00       ld jkhl, (px + 0)                        15
002:eaec A303         ld bcde, 3                               4
002:eaee EDE6         and jkhl, bcde                           4
002:eaf0 A303         ld bcde, 3                               4
002:eaf2 ED58         cp jkhl, bcde                            4
002:eaf4 EDCC         flag z, hl                               4
002:eaf6 CC           bool hl                                  2
002:eaf7 CA41EB       jp z, 0xEB41                             7
[MALLOC.LIB(3256:65)]: {
[MALLOC.LIB(3257:17)]: fm->dvsize = psize;
002:eafa ED1420       ld px, (sp + 0x20)                       15
002:eafd 6D5C08       ld px, px + 8                            6
002:eb00 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:eb03 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3258:17)]: set_free_with_pinuse(p, psize, next);
002:eb06 ED140C       ld px, (sp + 0x0C)                       15
002:eb09 6D5C04       ld px, px + 4                            6
002:eb0c FD1E00       ld jkhl, (px + 0)                        15
002:eb0f A3FE         ld bcde, -2                              4
002:eb11 01FFFF       ld bc, 0xFFFF                            6
002:eb14 EDE6         and jkhl, bcde                           4
002:eb16 B4           ex jkhl, bcde                            2
002:eb17 DD1F00       ld (px + 0), bcde                        19
002:eb1a ED1424       ld px, (sp + 0x24)                       15
002:eb1d 6D5C04       ld px, px + 4                            6
002:eb20 FDEE1C       ld jkhl, (sp + 0x1C)                     15
002:eb23 A301         ld bcde, 1                               4
002:eb25 EDF6         or jkhl, bcde                            4
002:eb27 B4           ex jkhl, bcde                            2
002:eb28 DD1F00       ld (px + 0), bcde                        19
002:eb2b FDEE24       ld jkhl, (sp + 0x24)                     15
002:eb2e DDEE1C       ld bcde, (sp + 0x1C)                     15
002:eb31 EDC6         add jkhl, bcde                           4
002:eb33 FD9D         ld px, jkhl                              4
002:eb35 211C00       ld hl, 0x001C                            6
002:eb38 39           add hl, sp                               2
002:eb39 DD1A         ld bcde, (hl)                            14
002:eb3b DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3259:17)]: goto postaction;
002:eb3e C3B2ED       jp 0xEDB2                                7
[MALLOC.LIB(3260:15)]: }
[MALLOC.LIB(3261:1)]: }
[MALLOC.LIB(3261:1)]: }
[MALLOC.LIB(3261:13)]: }
002:eb41 C347EB       jp 0xEB47                                7
[MALLOC.LIB(3262:1)]: else
[MALLOC.LIB(3263:15)]: goto erroraction;
002:eb44 C3A0ED       jp 0xEDA0                                7
[MALLOC.LIB(3263:1)]: goto erroraction;
[MALLOC.LIB(3264:11)]: }
[MALLOC.LIB(3265:9)]: }
[MALLOC.LIB(3267:1)]: if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
[MALLOC.LIB(3267:9)]: if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
002:eb47 DDEE24       ld bcde, (sp + 0x24)                     15
002:eb4a DDF5         push bcde                                18
002:eb4c DDEE10       ld bcde, (sp + 0x10)                     15
002:eb4f DD9D         ld px, bcde                              4
002:eb51 FDF1         pop jkhl                                 13
002:eb53 ED58         cp jkhl, bcde                            4
002:eb55 EDDC         flag c, hl                               4
002:eb57 CC           bool hl                                  2
002:eb58 CA6FEB       jp z, 0xEB6F                             7
002:eb5b ED140C       ld px, (sp + 0x0C)                       15
002:eb5e 6D5C04       ld px, px + 4                            6
002:eb61 FD1E00       ld jkhl, (px + 0)                        15
002:eb64 A301         ld bcde, 1                               4
002:eb66 EDE6         and jkhl, bcde                           4
002:eb68 B1           ld de, hl                                2
002:eb69 B9           ex jk, hl                                2
002:eb6a 91           ld bc, hl                                2
002:eb6b B9           ex jk, hl                                2
002:eb6c 81           ld hl, bc                                2
002:eb6d EC           or hl, de                                2
002:eb6e CC           bool hl                                  2
[MALLOC.LIB(3267:1)]: if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
002:eb6f CC           bool hl                                  2
002:eb70 CAA0ED       jp z, 0xEDA0                             7
[MALLOC.LIB(3267:59)]: {
[MALLOC.LIB(3268:11)]: if (!cinuse(next)) {  /* consolidate forward */
002:eb73 ED140C       ld px, (sp + 0x0C)                       15
002:eb76 6D5C04       ld px, px + 4                            6
002:eb79 FD1E00       ld jkhl, (px + 0)                        15
002:eb7c A302         ld bcde, 2                               4
002:eb7e EDE6         and jkhl, bcde                           4
002:eb80 B1           ld de, hl                                2
002:eb81 B9           ex jk, hl                                2
002:eb82 91           ld bc, hl                                2
002:eb83 B9           ex jk, hl                                2
002:eb84 DD5C         test bcde                                4
002:eb86 EDCC         flag z, hl                               4
002:eb88 CC           bool hl                                  2
002:eb89 CA13ED       jp z, 0xED13                             7
[MALLOC.LIB(3268:30)]: {  /* consolidate forward */
[MALLOC.LIB(3269:13)]: if (next == fm->top) {
002:eb8c DDEE0C       ld bcde, (sp + 0x0C)                     15
002:eb8f DDF5         push bcde                                18
002:eb91 ED1424       ld px, (sp + 0x24)                       15
002:eb94 6D5C18       ld px, px + 24                           6
002:eb97 6D5800       ld px, (px + 0)                          15
002:eb9a DDDD         ld bcde, px                              4
002:eb9c FDF1         pop jkhl                                 13
002:eb9e ED58         cp jkhl, bcde                            4
002:eba0 EDCC         flag z, hl                               4
002:eba2 CC           bool hl                                  2
002:eba3 CA1EEC       jp z, 0xEC1E                             7
[MALLOC.LIB(3269:34)]: {
[MALLOC.LIB(3270:15)]: tsize = fm->topsize += psize;
002:eba6 ED1420       ld px, (sp + 0x20)                       15
002:eba9 6D5C0C       ld px, px + 12                           6
002:ebac FD1E00       ld jkhl, (px + 0)                        15
002:ebaf DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ebb2 EDC6         add jkhl, bcde                           4
002:ebb4 B4           ex jkhl, bcde                            2
002:ebb5 DD1F00       ld (px + 0), bcde                        19
002:ebb8 DDEF18       ld (sp + 0x18), bcde                     19
[MALLOC.LIB(3271:15)]: fm->top = p;
002:ebbb ED1420       ld px, (sp + 0x20)                       15
002:ebbe 6D5C18       ld px, px + 24                           6
002:ebc1 DDEE24       ld bcde, (sp + 0x24)                     15
002:ebc4 DDAD         ld py, bcde                              4
002:ebc6 6D9900       ld (px + 0), py                          19
002:ebc9 6D67         ld px, py                                4
[MALLOC.LIB(3272:15)]: p->head = tsize | PINUSE_BIT;
002:ebcb ED1424       ld px, (sp + 0x24)                       15
002:ebce 6D5C04       ld px, px + 4                            6
002:ebd1 FDEE18       ld jkhl, (sp + 0x18)                     15
002:ebd4 A301         ld bcde, 1                               4
002:ebd6 EDF6         or jkhl, bcde                            4
002:ebd8 B4           ex jkhl, bcde                            2
002:ebd9 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3273:15)]: if (p == fm->dv) {
002:ebdc DDEE24       ld bcde, (sp + 0x24)                     15
002:ebdf DDF5         push bcde                                18
002:ebe1 ED1424       ld px, (sp + 0x24)                       15
002:ebe4 6D5C14       ld px, px + 20                           6
002:ebe7 6D5800       ld px, (px + 0)                          15
002:ebea DDDD         ld bcde, px                              4
002:ebec FDF1         pop jkhl                                 13
002:ebee ED58         cp jkhl, bcde                            4
002:ebf0 EDCC         flag z, hl                               4
002:ebf2 CC           bool hl                                  2
002:ebf3 CA1BEC       jp z, 0xEC1B                             7
[MALLOC.LIB(3273:32)]: {
[MALLOC.LIB(3274:17)]: fm->dv = 0;
002:ebf6 ED1420       ld px, (sp + 0x20)                       15
002:ebf9 6D5C14       ld px, px + 20                           6
002:ebfc EDD5         push px                                  18
002:ebfe ED1C00000000 ld px, 0x00000000                        12
002:ec04 6D97         ld py, px                                4
002:ec06 EDD1         pop px                                   13
002:ec08 6D9900       ld (px + 0), py                          19
002:ec0b 6D67         ld px, py                                4
[MALLOC.LIB(3275:17)]: fm->dvsize = 0;
002:ec0d FDEE20       ld jkhl, (sp + 0x20)                     15
002:ec10 A308         ld bcde, 8                               4
002:ec12 EDC6         add jkhl, bcde                           4
002:ec14 FD9D         ld px, jkhl                              4
002:ec16 A300         ld bcde, 0                               4
002:ec18 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3276:15)]: }
[MALLOC.LIB(3279:1)]: goto postaction;
[MALLOC.LIB(3279:15)]: goto postaction;
002:ec1b C3B2ED       jp 0xEDB2                                7
[MALLOC.LIB(3280:13)]: }
[MALLOC.LIB(3281:1)]: else if (next == fm->dv) {
[MALLOC.LIB(3281:18)]: if (next == fm->dv) {
002:ec1e DDEE0C       ld bcde, (sp + 0x0C)                     15
002:ec21 DDF5         push bcde                                18
002:ec23 ED1424       ld px, (sp + 0x24)                       15
002:ec26 6D5C14       ld px, px + 20                           6
002:ec29 6D5800       ld px, (px + 0)                          15
002:ec2c DDDD         ld bcde, px                              4
002:ec2e FDF1         pop jkhl                                 13
002:ec30 ED58         cp jkhl, bcde                            4
002:ec32 EDCC         flag z, hl                               4
002:ec34 CC           bool hl                                  2
002:ec35 CA84EC       jp z, 0xEC84                             7
[MALLOC.LIB(3281:38)]: {
[MALLOC.LIB(3282:15)]: dsize = fm->dvsize += psize;
002:ec38 ED1420       ld px, (sp + 0x20)                       15
002:ec3b 6D5C08       ld px, px + 8                            6
002:ec3e FD1E00       ld jkhl, (px + 0)                        15
002:ec41 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ec44 EDC6         add jkhl, bcde                           4
002:ec46 B4           ex jkhl, bcde                            2
002:ec47 DD1F00       ld (px + 0), bcde                        19
002:ec4a DDEF14       ld (sp + 0x14), bcde                     19
[MALLOC.LIB(3283:15)]: fm->dv = p;
002:ec4d ED1420       ld px, (sp + 0x20)                       15
002:ec50 6D5C14       ld px, px + 20                           6
002:ec53 DDEE24       ld bcde, (sp + 0x24)                     15
002:ec56 DDAD         ld py, bcde                              4
002:ec58 6D9900       ld (px + 0), py                          19
002:ec5b 6D67         ld px, py                                4
[MALLOC.LIB(3284:15)]: set_size_and_pinuse_of_free_chunk(p, dsize);
002:ec5d ED1424       ld px, (sp + 0x24)                       15
002:ec60 6D5C04       ld px, px + 4                            6
002:ec63 FDEE14       ld jkhl, (sp + 0x14)                     15
002:ec66 A301         ld bcde, 1                               4
002:ec68 EDF6         or jkhl, bcde                            4
002:ec6a B4           ex jkhl, bcde                            2
002:ec6b DD1F00       ld (px + 0), bcde                        19
002:ec6e FDEE24       ld jkhl, (sp + 0x24)                     15
002:ec71 DDEE14       ld bcde, (sp + 0x14)                     15
002:ec74 EDC6         add jkhl, bcde                           4
002:ec76 FD9D         ld px, jkhl                              4
002:ec78 211400       ld hl, 0x0014                            6
002:ec7b 39           add hl, sp                               2
002:ec7c DD1A         ld bcde, (hl)                            14
002:ec7e DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3285:15)]: goto postaction;
002:ec81 C3B2ED       jp 0xEDB2                                7
[MALLOC.LIB(3286:13)]: }
[MALLOC.LIB(3287:1)]: else {
[MALLOC.LIB(3287:18)]: {
[MALLOC.LIB(3288:15)]: nsize = chunksize(next);
002:ec84 ED140C       ld px, (sp + 0x0C)                       15
002:ec87 6D5C04       ld px, px + 4                            6
002:ec8a FD1E00       ld jkhl, (px + 0)                        15
002:ec8d A3F8         ld bcde, -8                              4
002:ec8f 01FFFF       ld bc, 0xFFFF                            6
002:ec92 EDE6         and jkhl, bcde                           4
002:ec94 FDEF10       ld (sp + 0x10), jkhl                     19
[MALLOC.LIB(3289:15)]: psize += nsize;
002:ec97 FDEE1C       ld jkhl, (sp + 0x1C)                     15
002:ec9a DDEE10       ld bcde, (sp + 0x10)                     15
002:ec9d EDC6         add jkhl, bcde                           4
002:ec9f B1           ld de, hl                                2
002:eca0 B9           ex jk, hl                                2
002:eca1 91           ld bc, hl                                2
002:eca2 B9           ex jk, hl                                2
002:eca3 DDEF1C       ld (sp + 0x1C), bcde                     19
[MALLOC.LIB(3290:15)]: unlink_chunk(fm, next, nsize);
002:eca6 DDEE10       ld bcde, (sp + 0x10)                     15
002:eca9 DDF5         push bcde                                18
002:ecab DDEE10       ld bcde, (sp + 0x10)                     15
002:ecae DDF5         push bcde                                18
002:ecb0 212800       ld hl, 0x0028                            6
002:ecb3 39           add hl, sp                               2
002:ecb4 DD1A         ld bcde, (hl)                            14
002:ecb6 DD9D         ld px, bcde                              4
002:ecb8 EDD5         push px                                  18
002:ecba CF57E303     lcall unlink_chunk                       19
002:ecbe 270C         add sp, 12                               4
[MALLOC.LIB(3291:15)]: set_size_and_pinuse_of_free_chunk(p, psize);
002:ecc0 ED1424       ld px, (sp + 0x24)                       15
002:ecc3 6D5C04       ld px, px + 4                            6
002:ecc6 FDEE1C       ld jkhl, (sp + 0x1C)                     15
002:ecc9 A301         ld bcde, 1                               4
002:eccb EDF6         or jkhl, bcde                            4
002:eccd B4           ex jkhl, bcde                            2
002:ecce DD1F00       ld (px + 0), bcde                        19
002:ecd1 FDEE24       ld jkhl, (sp + 0x24)                     15
002:ecd4 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ecd7 EDC6         add jkhl, bcde                           4
002:ecd9 FD9D         ld px, jkhl                              4
002:ecdb DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ecde DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3292:15)]: if (p == fm->dv) {
002:ece1 DDEE24       ld bcde, (sp + 0x24)                     15
002:ece4 DDF5         push bcde                                18
002:ece6 ED1424       ld px, (sp + 0x24)                       15
002:ece9 6D5C14       ld px, px + 20                           6
002:ecec 6D5800       ld px, (px + 0)                          15
002:ecef DDDD         ld bcde, px                              4
002:ecf1 FDF1         pop jkhl                                 13
002:ecf3 ED58         cp jkhl, bcde                            4
002:ecf5 EDCC         flag z, hl                               4
002:ecf7 CC           bool hl                                  2
002:ecf8 CA10ED       jp z, 0xED10                             7
[MALLOC.LIB(3292:32)]: {
[MALLOC.LIB(3293:17)]: fm->dvsize = psize;
002:ecfb FDEE20       ld jkhl, (sp + 0x20)                     15
002:ecfe A308         ld bcde, 8                               4
002:ed00 EDC6         add jkhl, bcde                           4
002:ed02 FD9D         ld px, jkhl                              4
002:ed04 211C00       ld hl, 0x001C                            6
002:ed07 39           add hl, sp                               2
002:ed08 DD1A         ld bcde, (hl)                            14
002:ed0a DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3294:17)]: goto postaction;
002:ed0d C3B2ED       jp 0xEDB2                                7
[MALLOC.LIB(3295:15)]: }
[MALLOC.LIB(3296:1)]: }
[MALLOC.LIB(3296:13)]: }
[MALLOC.LIB(3297:11)]: }
002:ed10 C34BED       jp 0xED4B                                7
[MALLOC.LIB(3298:1)]: else
[MALLOC.LIB(3299:13)]: set_free_with_pinuse(p, psize, next);
002:ed13 ED140C       ld px, (sp + 0x0C)                       15
002:ed16 6D5C04       ld px, px + 4                            6
002:ed19 FD1E00       ld jkhl, (px + 0)                        15
002:ed1c A3FE         ld bcde, -2                              4
002:ed1e 01FFFF       ld bc, 0xFFFF                            6
002:ed21 EDE6         and jkhl, bcde                           4
002:ed23 B4           ex jkhl, bcde                            2
002:ed24 DD1F00       ld (px + 0), bcde                        19
002:ed27 ED1424       ld px, (sp + 0x24)                       15
002:ed2a 6D5C04       ld px, px + 4                            6
002:ed2d FDEE1C       ld jkhl, (sp + 0x1C)                     15
002:ed30 A301         ld bcde, 1                               4
002:ed32 EDF6         or jkhl, bcde                            4
002:ed34 B4           ex jkhl, bcde                            2
002:ed35 DD1F00       ld (px + 0), bcde                        19
002:ed38 FDEE24       ld jkhl, (sp + 0x24)                     15
002:ed3b DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ed3e EDC6         add jkhl, bcde                           4
002:ed40 FD9D         ld px, jkhl                              4
002:ed42 211C00       ld hl, 0x001C                            6
002:ed45 39           add hl, sp                               2
002:ed46 DD1A         ld bcde, (hl)                            14
002:ed48 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(3299:1)]: set_free_with_pinuse(p, psize, next);
[MALLOC.LIB(3301:11)]: if (is_small(psize)) {
002:ed4b 211C00       ld hl, 0x001C                            6
002:ed4e 39           add hl, sp                               2
002:ed4f DD1A         ld bcde, (hl)                            14
002:ed51 DDB9         srl 2, bcde                              4
002:ed53 DDB8         srl 1, bcde                              4
002:ed55 B4           ex jkhl, bcde                            2
002:ed56 A320         ld bcde, 32                              4
002:ed58 ED58         cp jkhl, bcde                            4
002:ed5a EDDC         flag c, hl                               4
002:ed5c CC           bool hl                                  2
002:ed5d CA7DED       jp z, 0xED7D                             7
[MALLOC.LIB(3301:32)]: {
[MALLOC.LIB(3302:13)]: insert_small_chunk(fm, p, psize);
002:ed60 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ed63 DDF5         push bcde                                18
002:ed65 DDEE28       ld bcde, (sp + 0x28)                     15
002:ed68 DDF5         push bcde                                18
002:ed6a 212800       ld hl, 0x0028                            6
002:ed6d 39           add hl, sp                               2
002:ed6e DD1A         ld bcde, (hl)                            14
002:ed70 DD9D         ld px, bcde                              4
002:ed72 EDD5         push px                                  18
002:ed74 CFCFE103     lcall insert_small_chunk                 19
002:ed78 270C         add sp, 12                               4
[MALLOC.LIB(3304:11)]: }
[MALLOC.LIB(3303:36)]: ;
002:ed7a C39DED       jp 0xED9D                                7
[MALLOC.LIB(3305:1)]: else {
[MALLOC.LIB(3305:16)]: {
[MALLOC.LIB(3306:13)]: tp = (tchunkptr)p;
002:ed7d ED1424       ld px, (sp + 0x24)                       15
002:ed80 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(3307:13)]: insert_large_chunk(fm, tp, psize);
002:ed83 DDEE1C       ld bcde, (sp + 0x1C)                     15
002:ed86 DDF5         push bcde                                18
002:ed88 DDEE04       ld bcde, (sp + 0x04)                     15
002:ed8b DDF5         push bcde                                18
002:ed8d 212800       ld hl, 0x0028                            6
002:ed90 39           add hl, sp                               2
002:ed91 DD1A         ld bcde, (hl)                            14
002:ed93 DD9D         ld px, bcde                              4
002:ed95 EDD5         push px                                  18
002:ed97 CFB5ED02     lcall insert_large_chunk                 19
002:ed9b 270C         add sp, 12                               4
[MALLOC.LIB(3309:11)]: }
[MALLOC.LIB(3309:1)]: }
[MALLOC.LIB(3308:36)]: ;
002:ed9d C3B2ED       jp 0xEDB2                                7
[MALLOC.LIB(3311:9)]: }
[MALLOC.LIB(3312:1)]: }
[MALLOC.LIB(3312:7)]: }
[MALLOC.LIB(3313:1)]: erroraction:
[MALLOC.LIB(3313:1)]: erroraction:
[MALLOC.LIB(3313:16)]: :
002:eda0 21F3FC       ld hl, 0xFCF3                            6
002:eda3 E5           push hl                                  10
002:eda4 CD7321       call exception                           12
002:eda7 2702         add sp, 2                                4
002:eda9 21F3FC       ld hl, 0xFCF3                            6
002:edac E5           push hl                                  10
002:edad CD8125       call exit                                12
002:edb0 2702         add sp, 2                                4
[MALLOC.LIB(3315:1)]: postaction:
[MALLOC.LIB(3317:5)]: }
[MALLOC.LIB(3318:1)]: }
[MALLOC.LIB(3318:3)]: }
[MALLOC.LIB(3319:1)]: }
[MALLOC.LIB(3315:15)]: :
002:edb2 C3F3E9       jp 0xE9F3                                7
[MALLOC.LIB(2162:1)]: __static void insert_large_chunk(mstate m, tchunkptr x, m_size_t s) {
002:edb5 27E8         add sp, -24                              4
[MALLOC.LIB(2171:3)]: i = compute_tree_index(s);
002:edb7 212300       ld hl, 0x0023                            6
002:edba 39           add hl, sp                               2
002:edbb DD1A         ld bcde, (hl)                            14
002:edbd DDF5         push bcde                                18
002:edbf CFAEE003     lcall compute_tree_index                 19
002:edc3 2704         add sp, 4                                4
002:edc5 DDEF10       ld (sp + 0x10), bcde                     19
[MALLOC.LIB(2172:3)]: h = treebin_at(m, i);
002:edc8 FDEE1B       ld jkhl, (sp + 0x1B)                     15
002:edcb 112801       ld de, 0x0128                            6
002:edce 010000       ld bc, 0x0000                            6
002:edd1 EDC6         add jkhl, bcde                           4
002:edd3 DDEE10       ld bcde, (sp + 0x10)                     15
002:edd6 DDA9         sll 2, bcde                              4
002:edd8 EDC6         add jkhl, bcde                           4
002:edda FD9D         ld px, jkhl                              4
002:eddc ED1514       ld (sp + 0x14), px                       19
[MALLOC.LIB(2173:3)]: x->index = i;
002:eddf ED141F       ld px, (sp + 0x1F)                       15
002:ede2 6D5C1C       ld px, px + 28                           6
002:ede5 DDEE10       ld bcde, (sp + 0x10)                     15
002:ede8 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2174:3)]: x->child[0] = x->child[1] = 0;
002:edeb FDEE1F       ld jkhl, (sp + 0x1F)                     15
002:edee A310         ld bcde, 16                              4
002:edf0 EDC6         add jkhl, bcde                           4
002:edf2 FDF5         push jkhl                                18
002:edf4 FDEE23       ld jkhl, (sp + 0x23)                     15
002:edf7 A310         ld bcde, 16                              4
002:edf9 EDC6         add jkhl, bcde                           4
002:edfb A304         ld bcde, 4                               4
002:edfd EDC6         add jkhl, bcde                           4
002:edff FD9D         ld px, jkhl                              4
002:ee01 EDD5         push px                                  18
002:ee03 ED1C00000000 ld px, 0x00000000                        12
002:ee09 6D97         ld py, px                                4
002:ee0b EDD1         pop px                                   13
002:ee0d 6D9900       ld (px + 0), py                          19
002:ee10 6D67         ld px, py                                4
002:ee12 6D97         ld py, px                                4
002:ee14 EDD1         pop px                                   13
002:ee16 6D9900       ld (px + 0), py                          19
002:ee19 6D67         ld px, py                                4
[MALLOC.LIB(2175:3)]: if (!treemap_is_marked(m, i)) {
002:ee1b FDEE1B       ld jkhl, (sp + 0x1B)                     15
002:ee1e A304         ld bcde, 4                               4
002:ee20 EDC6         add jkhl, bcde                           4
002:ee22 FD9D         ld px, jkhl                              4
002:ee24 DD1E00       ld bcde, (px + 0)                        15
002:ee27 DDF5         push bcde                                18
002:ee29 211400       ld hl, 0x0014                            6
002:ee2c 39           add hl, sp                               2
002:ee2d DD1A         ld bcde, (hl)                            14
002:ee2f DDF5         push bcde                                18
002:ee31 A301         ld bcde, 1                               4
002:ee33 CD4C27       call swap4_                              12
002:ee36 00           nop                                      2
002:ee37 CD9016       call L_asl                               12
002:ee3a FDF1         pop jkhl                                 13
002:ee3c EDE6         and jkhl, bcde                           4
002:ee3e B1           ld de, hl                                2
002:ee3f B9           ex jk, hl                                2
002:ee40 91           ld bc, hl                                2
002:ee41 B9           ex jk, hl                                2
002:ee42 DD5C         test bcde                                4
002:ee44 EDCC         flag z, hl                               4
002:ee46 CC           bool hl                                  2
002:ee47 CABDEE       jp z, 0xEEBD                             7
[MALLOC.LIB(2175:33)]: {
[MALLOC.LIB(2176:5)]: mark_treemap(m, i);
002:ee4a FDEE1B       ld jkhl, (sp + 0x1B)                     15
002:ee4d A304         ld bcde, 4                               4
002:ee4f EDC6         add jkhl, bcde                           4
002:ee51 FD9D         ld px, jkhl                              4
002:ee53 EDD5         push px                                  18
002:ee55 DD1E00       ld bcde, (px + 0)                        15
002:ee58 DDF5         push bcde                                18
002:ee5a 211800       ld hl, 0x0018                            6
002:ee5d 39           add hl, sp                               2
002:ee5e DD1A         ld bcde, (hl)                            14
002:ee60 DDF5         push bcde                                18
002:ee62 A301         ld bcde, 1                               4
002:ee64 CD4C27       call swap4_                              12
002:ee67 00           nop                                      2
002:ee68 CD9016       call L_asl                               12
002:ee6b FDF1         pop jkhl                                 13
002:ee6d EDF6         or jkhl, bcde                            4
002:ee6f B4           ex jkhl, bcde                            2
002:ee70 EDD1         pop px                                   13
002:ee72 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2177:5)]: *h = x;
002:ee75 ED1414       ld px, (sp + 0x14)                       15
002:ee78 DDEE1F       ld bcde, (sp + 0x1F)                     15
002:ee7b DDAD         ld py, bcde                              4
002:ee7d 6D9900       ld (px + 0), py                          19
002:ee80 6D67         ld px, py                                4
[MALLOC.LIB(2178:5)]: x->parent = (tchunkptr)h;
002:ee82 ED141F       ld px, (sp + 0x1F)                       15
002:ee85 6D5C18       ld px, px + 24                           6
002:ee88 DDEE14       ld bcde, (sp + 0x14)                     15
002:ee8b DDAD         ld py, bcde                              4
002:ee8d 6D9900       ld (px + 0), py                          19
002:ee90 6D67         ld px, py                                4
[MALLOC.LIB(2179:5)]: x->fd = x->bk = x;
002:ee92 FDEE1F       ld jkhl, (sp + 0x1F)                     15
002:ee95 A308         ld bcde, 8                               4
002:ee97 EDC6         add jkhl, bcde                           4
002:ee99 FDF5         push jkhl                                18
002:ee9b FDEE23       ld jkhl, (sp + 0x23)                     15
002:ee9e A30C         ld bcde, 12                              4
002:eea0 EDC6         add jkhl, bcde                           4
002:eea2 FD9D         ld px, jkhl                              4
002:eea4 212300       ld hl, 0x0023                            6
002:eea7 39           add hl, sp                               2
002:eea8 DD1A         ld bcde, (hl)                            14
002:eeaa DDAD         ld py, bcde                              4
002:eeac 6D9900       ld (px + 0), py                          19
002:eeaf 6D67         ld px, py                                4
002:eeb1 6D97         ld py, px                                4
002:eeb3 EDD1         pop px                                   13
002:eeb5 6D9900       ld (px + 0), py                          19
002:eeb8 6D67         ld px, py                                4
[MALLOC.LIB(2180:3)]: }
002:eeba C3EC26       jp 0x26EC                                7
[MALLOC.LIB(2181:1)]: else {
[MALLOC.LIB(2181:8)]: {
[MALLOC.LIB(2182:5)]: t = *h;
002:eebd ED1414       ld px, (sp + 0x14)                       15
002:eec0 6D5800       ld px, (px + 0)                          15
002:eec3 ED150C       ld (sp + 0x0C), px                       19
[MALLOC.LIB(2183:5)]: k = s << leftshift_for_tree_index(i);
002:eec6 DDEE23       ld bcde, (sp + 0x23)                     15
002:eec9 DDF5         push bcde                                18
002:eecb FDEE14       ld jkhl, (sp + 0x14)                     15
002:eece A31F         ld bcde, 31                              4
002:eed0 ED58         cp jkhl, bcde                            4
002:eed2 EDCC         flag z, hl                               4
002:eed4 CC           bool hl                                  2
002:eed5 CADEEE       jp z, 0xEEDE                             7
002:eed8 BF           clr hl                                   2
002:eed9 A300         ld bcde, 0                               4
002:eedb C3FBEE       jp 0xEEFB                                7
[MALLOC.LIB(2183:1)]: k = s << leftshift_for_tree_index(i);
002:eede 211400       ld hl, 0x0014                            6
002:eee1 39           add hl, sp                               2
002:eee2 DD1A         ld bcde, (hl)                            14
002:eee4 DDB8         srl 1, bcde                              4
002:eee6 B4           ex jkhl, bcde                            2
002:eee7 A308         ld bcde, 8                               4
002:eee9 EDC6         add jkhl, bcde                           4
002:eeeb A302         ld bcde, 2                               4
002:eeed EDD6         sub jkhl, bcde                           4
002:eeef FDF5         push jkhl                                18
002:eef1 A41F         ld jkhl, 31                              4
002:eef3 DDF1         pop bcde                                 13
002:eef5 EDD6         sub jkhl, bcde                           4
002:eef7 B1           ld de, hl                                2
002:eef8 B9           ex jk, hl                                2
002:eef9 91           ld bc, hl                                2
002:eefa B9           ex jk, hl                                2
[MALLOC.LIB(2183:1)]: k = s << leftshift_for_tree_index(i);
002:eefb CD9016       call L_asl                               12
002:eefe 210800       ld hl, 0x0008                            6
002:ef01 39           add hl, sp                               2
002:ef02 DD1B         ld (hl), bcde                            18
[MALLOC.LIB(2184:1)]: for (;;) {
[MALLOC.LIB(2184:14)]: {
[MALLOC.LIB(2184:5)]: for (;;) {
002:ef04 ED140C       ld px, (sp + 0x0C)                       15
002:ef07 6D5C04       ld px, px + 4                            6
002:ef0a FD1E00       ld jkhl, (px + 0)                        15
002:ef0d A3F8         ld bcde, -8                              4
002:ef0f 01FFFF       ld bc, 0xFFFF                            6
002:ef12 EDE6         and jkhl, bcde                           4
002:ef14 DDEE23       ld bcde, (sp + 0x23)                     15
002:ef17 ED58         cp jkhl, bcde                            4
002:ef19 EDC4         flag nz, hl                              4
002:ef1b CC           bool hl                                  2
002:ef1c CAECEF       jp z, 0xEFEC                             7
[MALLOC.LIB(2185:30)]: {
[MALLOC.LIB(2186:9)]: c = t->child + ((m_ptrnum)((k >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1));
002:ef1f FDEE0C       ld jkhl, (sp + 0x0C)                     15
002:ef22 A310         ld bcde, 16                              4
002:ef24 EDC6         add jkhl, bcde                           4
002:ef26 FDF5         push jkhl                                18
002:ef28 210C00       ld hl, 0x000C                            6
002:ef2b 39           add hl, sp                               2
002:ef2c DD1A         ld bcde, (hl)                            14
002:ef2e 62           rl bc                                    2
002:ef2f A300         ld bcde, 0                               4
002:ef31 F3           rl de                                    2
002:ef32 B4           ex jkhl, bcde                            2
002:ef33 A301         ld bcde, 1                               4
002:ef35 EDE6         and jkhl, bcde                           4
002:ef37 B4           ex jkhl, bcde                            2
002:ef38 DDA9         sll 2, bcde                              4
002:ef3a FDF1         pop jkhl                                 13
002:ef3c EDC6         add jkhl, bcde                           4
002:ef3e FD9D         ld px, jkhl                              4
002:ef40 ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(2187:9)]: k <<= 1;
002:ef43 DDEE08       ld bcde, (sp + 0x08)                     15
002:ef46 DDA8         sll 1, bcde                              4
002:ef48 DDEF08       ld (sp + 0x08), bcde                     19
[MALLOC.LIB(2188:9)]: if (*c != 0)
002:ef4b ED1404       ld px, (sp + 0x04)                       15
002:ef4e 6D5800       ld px, (px + 0)                          15
002:ef51 FDDD         ld jkhl, px                              4
002:ef53 A300         ld bcde, 0                               4
002:ef55 ED58         cp jkhl, bcde                            4
002:ef57 EDC4         flag nz, hl                              4
002:ef59 CC           bool hl                                  2
002:ef5a CA70EF       jp z, 0xEF70                             7
[MALLOC.LIB(2189:11)]: t = *c;
002:ef5d 210400       ld hl, 0x0004                            6
002:ef60 39           add hl, sp                               2
002:ef61 DD1A         ld bcde, (hl)                            14
002:ef63 DD9D         ld px, bcde                              4
002:ef65 6D5800       ld px, (px + 0)                          15
002:ef68 ED150C       ld (sp + 0x0C), px                       19
002:ef6b DDDD         ld bcde, px                              4
002:ef6d C3E9EF       jp 0xEFE9                                7
[MALLOC.LIB(2190:1)]: else if (RTCHECK(ok_address(m, c))) {
[MALLOC.LIB(2190:14)]: if (RTCHECK(ok_address(m, c))) {
002:ef70 DDEE04       ld bcde, (sp + 0x04)                     15
002:ef73 DDF5         push bcde                                18
002:ef75 ED141F       ld px, (sp + 0x1F)                       15
002:ef78 6D5C10       ld px, px + 16                           6
002:ef7b 6D5800       ld px, (px + 0)                          15
002:ef7e DDDD         ld bcde, px                              4
002:ef80 FDF1         pop jkhl                                 13
002:ef82 ED58         cp jkhl, bcde                            4
002:ef84 EDD4         flag nc, hl                              4
002:ef86 CC           bool hl                                  2
002:ef87 CAD3EF       jp z, 0xEFD3                             7
[MALLOC.LIB(2190:45)]: {
[MALLOC.LIB(2191:11)]: *c = x;
002:ef8a ED1404       ld px, (sp + 0x04)                       15
002:ef8d DDEE1F       ld bcde, (sp + 0x1F)                     15
002:ef90 DDAD         ld py, bcde                              4
002:ef92 6D9900       ld (px + 0), py                          19
002:ef95 6D67         ld px, py                                4
[MALLOC.LIB(2192:11)]: x->parent = t;
002:ef97 ED141F       ld px, (sp + 0x1F)                       15
002:ef9a 6D5C18       ld px, px + 24                           6
002:ef9d DDEE0C       ld bcde, (sp + 0x0C)                     15
002:efa0 DDAD         ld py, bcde                              4
002:efa2 6D9900       ld (px + 0), py                          19
002:efa5 6D67         ld px, py                                4
[MALLOC.LIB(2193:11)]: x->fd = x->bk = x;
002:efa7 FDEE1F       ld jkhl, (sp + 0x1F)                     15
002:efaa A308         ld bcde, 8                               4
002:efac EDC6         add jkhl, bcde                           4
002:efae FDF5         push jkhl                                18
002:efb0 FDEE23       ld jkhl, (sp + 0x23)                     15
002:efb3 A30C         ld bcde, 12                              4
002:efb5 EDC6         add jkhl, bcde                           4
002:efb7 FD9D         ld px, jkhl                              4
002:efb9 212300       ld hl, 0x0023                            6
002:efbc 39           add hl, sp                               2
002:efbd DD1A         ld bcde, (hl)                            14
002:efbf DDAD         ld py, bcde                              4
002:efc1 6D9900       ld (px + 0), py                          19
002:efc4 6D67         ld px, py                                4
002:efc6 6D97         ld py, px                                4
002:efc8 EDD1         pop px                                   13
002:efca 6D9900       ld (px + 0), py                          19
002:efcd 6D67         ld px, py                                4
[MALLOC.LIB(2194:11)]: break;
002:efcf C7AAE003     ljp 03:e0aa                              10
[MALLOC.LIB(2195:9)]: }
[MALLOC.LIB(2196:1)]: else {
[MALLOC.LIB(2196:14)]: {
[MALLOC.LIB(2197:11)]: CORRUPTION_ERROR_ACTION(m);
002:efd3 21F4FC       ld hl, 0xFCF4                            6
002:efd6 E5           push hl                                  10
002:efd7 CD7321       call exception                           12
002:efda 2702         add sp, 2                                4
002:efdc 21F4FC       ld hl, 0xFCF4                            6
002:efdf E5           push hl                                  10
002:efe0 CD8125       call exit                                12
002:efe3 2702         add sp, 2                                4
[MALLOC.LIB(2198:11)]: break;
002:efe5 C7AAE003     ljp 03:e0aa                              10
[MALLOC.LIB(2199:9)]: }
[MALLOC.LIB(2199:1)]: }
[MALLOC.LIB(2200:7)]: }
002:efe9 C3E426       jp 0x26E4                                7
[MALLOC.LIB(2201:1)]: else {
[MALLOC.LIB(2201:12)]: {
[MALLOC.LIB(2202:9)]: f = t->fd;
002:efec ED140C       ld px, (sp + 0x0C)                       15
002:efef 6D5C08       ld px, px + 8                            6
002:eff2 6D5800       ld px, (px + 0)                          15
002:eff5 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2203:9)]: if (RTCHECK(ok_address(m, t) && ok_address(m, f))) {
002:eff8 DDEE0C       ld bcde, (sp + 0x0C)                     15
002:effb DDF5         push bcde                                18
002:effd ED141F       ld px, (sp + 0x1F)                       15
003:e000 6D5C10       ld px, px + 16                           6
003:e003 6D5800       ld px, (px + 0)                          15
003:e006 DDDD         ld bcde, px                              4
003:e008 FDF1         pop jkhl                                 13
003:e00a ED58         cp jkhl, bcde                            4
003:e00c EDD4         flag nc, hl                              4
003:e00e CC           bool hl                                  2
003:e00f C713E003     ljp 03:e013                              10
003:e013 CA2DE0       jp z, 0xE02D                             7
003:e016 DDEE00       ld bcde, (sp + 0x00)                     15
003:e019 DDF5         push bcde                                18
003:e01b ED141F       ld px, (sp + 0x1F)                       15
003:e01e 6D5C10       ld px, px + 16                           6
003:e021 6D5800       ld px, (px + 0)                          15
003:e024 DDDD         ld bcde, px                              4
003:e026 FDF1         pop jkhl                                 13
003:e028 ED58         cp jkhl, bcde                            4
003:e02a EDD4         flag nc, hl                              4
003:e02c CC           bool hl                                  2
[MALLOC.LIB(2203:1)]: if (RTCHECK(ok_address(m, t) && ok_address(m, f))) {
003:e02d CC           bool hl                                  2
003:e02e CA91E0       jp z, 0xE091                             7
[MALLOC.LIB(2203:60)]: {
[MALLOC.LIB(2204:11)]: t->fd = f->bk = x;
003:e031 FDEE0C       ld jkhl, (sp + 0x0C)                     15
003:e034 A308         ld bcde, 8                               4
003:e036 EDC6         add jkhl, bcde                           4
003:e038 FDF5         push jkhl                                18
003:e03a ED1404       ld px, (sp + 0x04)                       15
003:e03d 6D5C0C       ld px, px + 12                           6
003:e040 DDEE23       ld bcde, (sp + 0x23)                     15
003:e043 DDAD         ld py, bcde                              4
003:e045 6D9900       ld (px + 0), py                          19
003:e048 6D67         ld px, py                                4
003:e04a 6D97         ld py, px                                4
003:e04c EDD1         pop px                                   13
003:e04e 6D9900       ld (px + 0), py                          19
003:e051 6D67         ld px, py                                4
[MALLOC.LIB(2205:11)]: x->fd = f;
003:e053 ED141F       ld px, (sp + 0x1F)                       15
003:e056 6D5C08       ld px, px + 8                            6
003:e059 DDEE00       ld bcde, (sp + 0x00)                     15
003:e05c DDAD         ld py, bcde                              4
003:e05e 6D9900       ld (px + 0), py                          19
003:e061 6D67         ld px, py                                4
[MALLOC.LIB(2206:11)]: x->bk = t;
003:e063 ED141F       ld px, (sp + 0x1F)                       15
003:e066 6D5C0C       ld px, px + 12                           6
003:e069 DDEE0C       ld bcde, (sp + 0x0C)                     15
003:e06c DDAD         ld py, bcde                              4
003:e06e 6D9900       ld (px + 0), py                          19
003:e071 6D67         ld px, py                                4
[MALLOC.LIB(2207:11)]: x->parent = 0;
003:e073 FDEE1F       ld jkhl, (sp + 0x1F)                     15
003:e076 A318         ld bcde, 24                              4
003:e078 EDC6         add jkhl, bcde                           4
003:e07a FD9D         ld px, jkhl                              4
003:e07c EDD5         push px                                  18
003:e07e ED1C00000000 ld px, 0x00000000                        12
003:e084 6D97         ld py, px                                4
003:e086 EDD1         pop px                                   13
003:e088 6D9900       ld (px + 0), py                          19
003:e08b 6D67         ld px, py                                4
[MALLOC.LIB(2208:11)]: break;
003:e08d 181B         jr 0xE0AA                                5
003:e08f 00           nop                                      2
003:e090 00           nop                                      2
[MALLOC.LIB(2209:9)]: }
[MALLOC.LIB(2210:1)]: else {
[MALLOC.LIB(2210:14)]: {
[MALLOC.LIB(2211:11)]: CORRUPTION_ERROR_ACTION(m);
003:e091 21F4FC       ld hl, 0xFCF4                            6
003:e094 E5           push hl                                  10
003:e095 CD7321       call exception                           12
003:e098 2702         add sp, 2                                4
003:e09a 21F4FC       ld hl, 0xFCF4                            6
003:e09d E5           push hl                                  10
003:e09e CD8125       call exit                                12
003:e0a1 2702         add sp, 2                                4
[MALLOC.LIB(2212:11)]: break;
003:e0a3 1805         jr 0xE0AA                                5
003:e0a5 00           nop                                      2
003:e0a6 00           nop                                      2
[MALLOC.LIB(2213:9)]: }
[MALLOC.LIB(2214:7)]: }
[MALLOC.LIB(2214:1)]: }
[MALLOC.LIB(2215:5)]: }
[MALLOC.LIB(2215:1)]: }
003:e0a7 C3E826       jp 0x26E8                                7
[MALLOC.LIB(2215:1)]: }
[MALLOC.LIB(2216:3)]: }
[MALLOC.LIB(2216:1)]: }
[MALLOC.LIB(2217:1)]: }
[MALLOC.LIB(2217:1)]: }
003:e0aa 2718         add sp, 24                               4
003:e0ac ED45         lret                                     13
[MALLOC.LIB(1426:1)]: __static m_size_t compute_tree_index(m_size_t s)
003:e0ae 27F0         add sp, -16                              4
[MALLOC.LIB(1430:3)]: x = s >> TREEBIN_SHIFT;
003:e0b0 DDEE13       ld bcde, (sp + 0x13)                     15
003:e0b3 AF           xor a                                    2
003:e0b4 DD7F         rrb a, bcde                              4
003:e0b6 DDEF0C       ld (sp + 0x0C), bcde                     19
[MALLOC.LIB(1431:3)]: if (!x)
003:e0b9 DD5C         test bcde                                4
003:e0bb EDCC         flag z, hl                               4
003:e0bd CC           bool hl                                  2
003:e0be CACAE0       jp z, 0xE0CA                             7
[MALLOC.LIB(1432:5)]: return 0;
003:e0c1 BF           clr hl                                   2
003:e0c2 A300         ld bcde, 0                               4
[MALLOC.LIB(1432:1)]: return 0;
003:e0c4 D9           exx                                      2
003:e0c5 2710         add sp, 16                               4
003:e0c7 D9           exx                                      2
003:e0c8 ED45         lret                                     13
[MALLOC.LIB(1433:1)]: else if (x > 0xFFFFuL)
[MALLOC.LIB(1433:8)]: if (x > 0xFFFFuL)
003:e0ca FDEE0C       ld jkhl, (sp + 0x0C)                     15
003:e0cd A3FF         ld bcde, -1                              4
003:e0cf 010000       ld bc, 0x0000                            6
003:e0d2 ED58         cp jkhl, bcde                            4
003:e0d4 EDAC         flag gtu, hl                             4
003:e0d6 CC           bool hl                                  2
003:e0d7 CAE3E0       jp z, 0xE0E3                             7
[MALLOC.LIB(1434:5)]: return NTREEBINS-1;
003:e0da 211F00       ld hl, 0x001F                            6
003:e0dd A300         ld bcde, 0                               4
003:e0df B1           ld de, hl                                2
003:e0e0 C3C4E0       jp 0xE0C4                                7
[MALLOC.LIB(1435:1)]: else {
[MALLOC.LIB(1435:8)]: {
[MALLOC.LIB(1436:5)]: y = (m_uint)x;
003:e0e3 DDEE0C       ld bcde, (sp + 0x0C)                     15
003:e0e6 DDEF08       ld (sp + 0x08), bcde                     19
[MALLOC.LIB(1437:5)]: n = ((y - 0x100) >> 16) & 8;
003:e0e9 FDEE08       ld jkhl, (sp + 0x08)                     15
003:e0ec 110001       ld de, 0x0100                            6
003:e0ef 010000       ld bc, 0x0000                            6
003:e0f2 EDD6         sub jkhl, bcde                           4
003:e0f4 B1           ld de, hl                                2
003:e0f5 B9           ex jk, hl                                2
003:e0f6 91           ld bc, hl                                2
003:e0f7 B9           ex jk, hl                                2
003:e0f8 81           ld hl, bc                                2
003:e0f9 A300         ld bcde, 0                               4
003:e0fb B1           ld de, hl                                2
003:e0fc B4           ex jkhl, bcde                            2
003:e0fd A308         ld bcde, 8                               4
003:e0ff EDE6         and jkhl, bcde                           4
003:e101 B1           ld de, hl                                2
003:e102 B9           ex jk, hl                                2
003:e103 91           ld bc, hl                                2
003:e104 B9           ex jk, hl                                2
003:e105 DDEF04       ld (sp + 0x04), bcde                     19
[MALLOC.LIB(1438:5)]: k = (((y <<= n) - 0x1000) >> 16) & 4;
003:e108 DDEE08       ld bcde, (sp + 0x08)                     15
003:e10b DDF5         push bcde                                18
003:e10d 210800       ld hl, 0x0008                            6
003:e110 39           add hl, sp                               2
003:e111 DD1A         ld bcde, (hl)                            14
003:e113 CD9016       call L_asl                               12
003:e116 210800       ld hl, 0x0008                            6
003:e119 39           add hl, sp                               2
003:e11a DD1B         ld (hl), bcde                            18
003:e11c B4           ex jkhl, bcde                            2
003:e11d 110010       ld de, 0x1000                            6
003:e120 010000       ld bc, 0x0000                            6
003:e123 EDD6         sub jkhl, bcde                           4
003:e125 B1           ld de, hl                                2
003:e126 B9           ex jk, hl                                2
003:e127 91           ld bc, hl                                2
003:e128 B9           ex jk, hl                                2
003:e129 81           ld hl, bc                                2
003:e12a A300         ld bcde, 0                               4
003:e12c B1           ld de, hl                                2
003:e12d B4           ex jkhl, bcde                            2
003:e12e A304         ld bcde, 4                               4
003:e130 EDE6         and jkhl, bcde                           4
003:e132 FDEF00       ld (sp + 0x00), jkhl                     19
[MALLOC.LIB(1439:5)]: n += k;
003:e135 FDEE04       ld jkhl, (sp + 0x04)                     15
003:e138 DDEE00       ld bcde, (sp + 0x00)                     15
003:e13b EDC6         add jkhl, bcde                           4
003:e13d B1           ld de, hl                                2
003:e13e B9           ex jk, hl                                2
003:e13f 91           ld bc, hl                                2
003:e140 B9           ex jk, hl                                2
003:e141 DDEF04       ld (sp + 0x04), bcde                     19
[MALLOC.LIB(1440:5)]: n += k = (((y <<= k) - 0x4000) >> 16) & 2;
003:e144 DDF5         push bcde                                18
003:e146 DDEE0C       ld bcde, (sp + 0x0C)                     15
003:e149 DDF5         push bcde                                18
003:e14b 210800       ld hl, 0x0008                            6
003:e14e 39           add hl, sp                               2
003:e14f DD1A         ld bcde, (hl)                            14
003:e151 CD9016       call L_asl                               12
003:e154 210C00       ld hl, 0x000C                            6
003:e157 39           add hl, sp                               2
003:e158 DD1B         ld (hl), bcde                            18
003:e15a B4           ex jkhl, bcde                            2
003:e15b 110040       ld de, 0x4000                            6
003:e15e 010000       ld bc, 0x0000                            6
003:e161 EDD6         sub jkhl, bcde                           4
003:e163 B1           ld de, hl                                2
003:e164 B9           ex jk, hl                                2
003:e165 91           ld bc, hl                                2
003:e166 B9           ex jk, hl                                2
003:e167 81           ld hl, bc                                2
003:e168 A300         ld bcde, 0                               4
003:e16a B1           ld de, hl                                2
003:e16b B4           ex jkhl, bcde                            2
003:e16c A302         ld bcde, 2                               4
003:e16e EDE6         and jkhl, bcde                           4
003:e170 B4           ex jkhl, bcde                            2
003:e171 DDEF04       ld (sp + 0x04), bcde                     19
003:e174 FDF1         pop jkhl                                 13
003:e176 EDC6         add jkhl, bcde                           4
003:e178 B4           ex jkhl, bcde                            2
003:e179 DDEF04       ld (sp + 0x04), bcde                     19
[MALLOC.LIB(1441:5)]: k = 14 - n + ((y <<= k) >> 15);
003:e17c A40E         ld jkhl, 14                              4
003:e17e EDD6         sub jkhl, bcde                           4
003:e180 FDF5         push jkhl                                18
003:e182 DDEE0C       ld bcde, (sp + 0x0C)                     15
003:e185 DDF5         push bcde                                18
003:e187 210800       ld hl, 0x0008                            6
003:e18a 39           add hl, sp                               2
003:e18b DD1A         ld bcde, (hl)                            14
003:e18d CD9016       call L_asl                               12
003:e190 DDEF0C       ld (sp + 0x0C), bcde                     19
003:e193 AF           xor a                                    2
003:e194 DD7F         rrb a, bcde                              4
003:e196 DDBB         srl 4, bcde                              4
003:e198 DDB9         srl 2, bcde                              4
003:e19a DDB8         srl 1, bcde                              4
003:e19c FDF1         pop jkhl                                 13
003:e19e EDC6         add jkhl, bcde                           4
003:e1a0 B4           ex jkhl, bcde                            2
003:e1a1 DDEF00       ld (sp + 0x00), bcde                     19
[MALLOC.LIB(1442:5)]: return (k << 1) + ((s >> (k + (TREEBIN_SHIFT-1)) & 1));
003:e1a4 DDA8         sll 1, bcde                              4
003:e1a6 DDF5         push bcde                                18
003:e1a8 DDEE17       ld bcde, (sp + 0x17)                     15
003:e1ab DDF5         push bcde                                18
003:e1ad FDEE08       ld jkhl, (sp + 0x08)                     15
003:e1b0 A307         ld bcde, 7                               4
003:e1b2 EDC6         add jkhl, bcde                           4
003:e1b4 B1           ld de, hl                                2
003:e1b5 B9           ex jk, hl                                2
003:e1b6 91           ld bc, hl                                2
003:e1b7 B9           ex jk, hl                                2
003:e1b8 CD1D16       call G_asr                               12
003:e1bb B4           ex jkhl, bcde                            2
003:e1bc A301         ld bcde, 1                               4
003:e1be EDE6         and jkhl, bcde                           4
003:e1c0 B4           ex jkhl, bcde                            2
003:e1c1 FDF1         pop jkhl                                 13
003:e1c3 EDC6         add jkhl, bcde                           4
003:e1c5 B1           ld de, hl                                2
003:e1c6 B9           ex jk, hl                                2
003:e1c7 91           ld bc, hl                                2
003:e1c8 B9           ex jk, hl                                2
003:e1c9 C3C4E0       jp 0xE0C4                                7
[MALLOC.LIB(1443:3)]: }
[MALLOC.LIB(1444:1)]: }
003:e1cc C3C4E0       jp 0xE0C4                                7
[MALLOC.LIB(2067:1)]: __static void insert_small_chunk(mstate m, mchunkptr p, m_size_t s) {
003:e1cf 27F4         add sp, -12                              4
[MALLOC.LIB(2073:3)]: i  = small_index(s);
003:e1d1 DDEE17       ld bcde, (sp + 0x17)                     15
003:e1d4 DDB9         srl 2, bcde                              4
003:e1d6 DDB8         srl 1, bcde                              4
003:e1d8 DDEF08       ld (sp + 0x08), bcde                     19
[MALLOC.LIB(2074:3)]: b = smallbin_at(m, i);
003:e1db FDEE0F       ld jkhl, (sp + 0x0F)                     15
003:e1de A320         ld bcde, 32                              4
003:e1e0 EDC6         add jkhl, bcde                           4
003:e1e2 DDEE08       ld bcde, (sp + 0x08)                     15
003:e1e5 DDA8         sll 1, bcde                              4
003:e1e7 DDA9         sll 2, bcde                              4
003:e1e9 EDC6         add jkhl, bcde                           4
003:e1eb FD9D         ld px, jkhl                              4
003:e1ed ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(2075:3)]: f = b;
003:e1f0 ED1404       ld px, (sp + 0x04)                       15
003:e1f3 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2076:40)]: ;
003:e1f6 ED140F       ld px, (sp + 0x0F)                       15
003:e1f9 DD1E00       ld bcde, (px + 0)                        15
003:e1fc DDF5         push bcde                                18
003:e1fe 210C00       ld hl, 0x000C                            6
003:e201 39           add hl, sp                               2
003:e202 DD1A         ld bcde, (hl)                            14
003:e204 DDF5         push bcde                                18
003:e206 A301         ld bcde, 1                               4
003:e208 CD4C27       call swap4_                              12
003:e20b 00           nop                                      2
003:e20c CD9016       call L_asl                               12
003:e20f FDF1         pop jkhl                                 13
003:e211 EDE6         and jkhl, bcde                           4
003:e213 B1           ld de, hl                                2
003:e214 B9           ex jk, hl                                2
003:e215 91           ld bc, hl                                2
003:e216 B9           ex jk, hl                                2
003:e217 DD5C         test bcde                                4
003:e219 EDCC         flag z, hl                               4
003:e21b CC           bool hl                                  2
003:e21c CA4AE2       jp z, 0xE24A                             7
[MALLOC.LIB(2078:5)]: mark_smallmap(m, i);
003:e21f ED140F       ld px, (sp + 0x0F)                       15
003:e222 EDD5         push px                                  18
003:e224 DD1E00       ld bcde, (px + 0)                        15
003:e227 DDF5         push bcde                                18
003:e229 211000       ld hl, 0x0010                            6
003:e22c 39           add hl, sp                               2
003:e22d DD1A         ld bcde, (hl)                            14
003:e22f DDF5         push bcde                                18
003:e231 A301         ld bcde, 1                               4
003:e233 CD4C27       call swap4_                              12
003:e236 00           nop                                      2
003:e237 CD9016       call L_asl                               12
003:e23a FDF1         pop jkhl                                 13
003:e23c EDF6         or jkhl, bcde                            4
003:e23e B1           ld de, hl                                2
003:e23f B9           ex jk, hl                                2
003:e240 91           ld bc, hl                                2
003:e241 B9           ex jk, hl                                2
003:e242 EDD1         pop px                                   13
003:e244 DD1F00       ld (px + 0), bcde                        19
003:e247 C38EE2       jp 0xE28E                                7
[MALLOC.LIB(2079:1)]: else if (RTCHECK(ok_address(m, b->fd)))
[MALLOC.LIB(2079:8)]: if (RTCHECK(ok_address(m, b->fd)))
003:e24a ED1404       ld px, (sp + 0x04)                       15
003:e24d 6D5C08       ld px, px + 8                            6
003:e250 6D5800       ld px, (px + 0)                          15
003:e253 FDDD         ld jkhl, px                              4
003:e255 ED140F       ld px, (sp + 0x0F)                       15
003:e258 6D5C10       ld px, px + 16                           6
003:e25b 6D5800       ld px, (px + 0)                          15
003:e25e DDDD         ld bcde, px                              4
003:e260 ED58         cp jkhl, bcde                            4
003:e262 EDD4         flag nc, hl                              4
003:e264 CC           bool hl                                  2
003:e265 CA7CE2       jp z, 0xE27C                             7
[MALLOC.LIB(2080:5)]: f = b->fd;
003:e268 FDEE04       ld jkhl, (sp + 0x04)                     15
003:e26b A308         ld bcde, 8                               4
003:e26d EDC6         add jkhl, bcde                           4
003:e26f FD9D         ld px, jkhl                              4
003:e271 6D5800       ld px, (px + 0)                          15
003:e274 ED1500       ld (sp + 0x00), px                       19
003:e277 DDDD         ld bcde, px                              4
003:e279 C38EE2       jp 0xE28E                                7
[MALLOC.LIB(2081:1)]: else {
[MALLOC.LIB(2081:8)]: {
[MALLOC.LIB(2082:5)]: CORRUPTION_ERROR_ACTION(m);
003:e27c 21F4FC       ld hl, 0xFCF4                            6
003:e27f E5           push hl                                  10
003:e280 CD7321       call exception                           12
003:e283 2702         add sp, 2                                4
003:e285 21F4FC       ld hl, 0xFCF4                            6
003:e288 E5           push hl                                  10
003:e289 CD8125       call exit                                12
003:e28c 2702         add sp, 2                                4
[MALLOC.LIB(2083:3)]: }
[MALLOC.LIB(2083:1)]: }
[MALLOC.LIB(2083:1)]: }
[MALLOC.LIB(2084:3)]: b->fd = p;
003:e28e ED1404       ld px, (sp + 0x04)                       15
003:e291 6D5C08       ld px, px + 8                            6
003:e294 DDEE13       ld bcde, (sp + 0x13)                     15
003:e297 DDAD         ld py, bcde                              4
003:e299 6D9900       ld (px + 0), py                          19
003:e29c 6D67         ld px, py                                4
[MALLOC.LIB(2085:3)]: f->bk = p;
003:e29e ED1400       ld px, (sp + 0x00)                       15
003:e2a1 6D5C0C       ld px, px + 12                           6
003:e2a4 DDEE13       ld bcde, (sp + 0x13)                     15
003:e2a7 DDAD         ld py, bcde                              4
003:e2a9 6D9900       ld (px + 0), py                          19
003:e2ac 6D67         ld px, py                                4
[MALLOC.LIB(2086:3)]: p->fd = f;
003:e2ae ED1413       ld px, (sp + 0x13)                       15
003:e2b1 6D5C08       ld px, px + 8                            6
003:e2b4 DDEE00       ld bcde, (sp + 0x00)                     15
003:e2b7 DDAD         ld py, bcde                              4
003:e2b9 6D9900       ld (px + 0), py                          19
003:e2bc 6D67         ld px, py                                4
[MALLOC.LIB(2087:3)]: p->bk = b;
003:e2be FDEE13       ld jkhl, (sp + 0x13)                     15
003:e2c1 A30C         ld bcde, 12                              4
003:e2c3 EDC6         add jkhl, bcde                           4
003:e2c5 FD9D         ld px, jkhl                              4
003:e2c7 210400       ld hl, 0x0004                            6
003:e2ca 39           add hl, sp                               2
003:e2cb DD1A         ld bcde, (hl)                            14
003:e2cd DDAD         ld py, bcde                              4
003:e2cf 6D9900       ld (px + 0), py                          19
003:e2d2 6D67         ld px, py                                4
[MALLOC.LIB(2088:1)]: }
[MALLOC.LIB(2088:1)]: }
003:e2d4 270C         add sp, 12                               4
003:e2d6 ED45         lret                                     13
[XMEM.LIB(499:1)]: unsigned long paddr(const void *pointer)
[XMEM.LIB(501:1)]: #asm __nodebug
003:e2d8 AF           xor a                                    2
003:e2d9 0E00         ld c, 0x00                               4
003:e2db C403         ld hl, (sp + 0x03)                       9
003:e2dd CDE30F       call dkcLogicalToPhysical                12
[XMEM.LIB(506:1)]: #endasm
[XMEM.LIB(507:1)]: }
[XMEM.LIB(507:1)]: }
003:e2e0 ED45         lret                                     13
[RTCLOCK.LIB(146:1)]: time_t read_rtc(void)
[RTCLOCK.LIB(148:1)]: #asm xmemok
003:e2e2 A3FF         ld bcde, -1                              4
[RTCLOCK.LIB(156:1)]: .read_rtc0:
003:e2e4 B4           ex jkhl, bcde                            2
003:e2e5 D3320200     ioi ld (0x0002), a                       11
003:e2e9 D33A0300     ioi ld a, (0x0003)                       11
003:e2ed D3930400     ioi ld bcde, (0x0004)                    17
003:e2f1 17           rla                                      2
003:e2f2 DD68         rl 1, bcde                               4
003:e2f4 ED58         cp jkhl, bcde                            4
003:e2f6 20EC         jr nz, 0xE2E4                            5
[RTCLOCK.LIB(169:1)]: #endasm
[RTCLOCK.LIB(170:1)]: }
[RTCLOCK.LIB(170:1)]: }
003:e2f8 ED45         lret                                     13
[STDIO_FAT.C(429:1)]: int remove( const char *filename)
[STDIO_FAT.C(432:3)]: return -ENOSYS;
003:e2fa 21DAFF       ld hl, 0xFFDA                            6
[STDIO_FAT.C(432:1)]: return -ENOSYS;
003:e2fd ED45         lret                                     13
[MALLOC.LIB(2319:1)]: __static void insert_chunk(mstate m, mchunkptr p, m_size_t s) {
003:e2ff 27FC         add sp, -4                               4
[MALLOC.LIB(2322:3)]: if (is_small(s)) insert_small_chunk(m, p, s);
003:e301 210F00       ld hl, 0x000F                            6
003:e304 39           add hl, sp                               2
003:e305 DD1A         ld bcde, (hl)                            14
003:e307 DDB9         srl 2, bcde                              4
003:e309 DDB8         srl 1, bcde                              4
003:e30b B4           ex jkhl, bcde                            2
003:e30c A320         ld bcde, 32                              4
003:e30e ED58         cp jkhl, bcde                            4
003:e310 EDDC         flag c, hl                               4
003:e312 CC           bool hl                                  2
003:e313 CA33E3       jp z, 0xE333                             7
[MALLOC.LIB(2322:20)]: insert_small_chunk(m, p, s);
003:e316 DDEE0F       ld bcde, (sp + 0x0F)                     15
003:e319 DDF5         push bcde                                18
003:e31b DDEE0F       ld bcde, (sp + 0x0F)                     15
003:e31e DDF5         push bcde                                18
003:e320 210F00       ld hl, 0x000F                            6
003:e323 39           add hl, sp                               2
003:e324 DD1A         ld bcde, (hl)                            14
003:e326 DD9D         ld px, bcde                              4
003:e328 EDD5         push px                                  18
003:e32a CFCFE103     lcall insert_small_chunk                 19
003:e32e 270C         add sp, 12                               4
003:e330 C353E3       jp 0xE353                                7
[MALLOC.LIB(2323:1)]: else { tp = (tchunkptr)(p); insert_large_chunk(m, tp, s); }
[MALLOC.LIB(2323:9)]: tp = (tchunkptr)(p); insert_large_chunk(m, tp, s); }
[MALLOC.LIB(2323:10)]: tp = (tchunkptr)(p); insert_large_chunk(m, tp, s); }
003:e333 ED140B       ld px, (sp + 0x0B)                       15
003:e336 ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2323:31)]: insert_large_chunk(m, tp, s); }
003:e339 DDEE0F       ld bcde, (sp + 0x0F)                     15
003:e33c DDF5         push bcde                                18
003:e33e DDEE04       ld bcde, (sp + 0x04)                     15
003:e341 DDF5         push bcde                                18
003:e343 210F00       ld hl, 0x000F                            6
003:e346 39           add hl, sp                               2
003:e347 DD1A         ld bcde, (hl)                            14
003:e349 DD9D         ld px, bcde                              4
003:e34b EDD5         push px                                  18
003:e34d CFB5ED02     lcall insert_large_chunk                 19
003:e351 270C         add sp, 12                               4
[MALLOC.LIB(2323:61)]: }
[MALLOC.LIB(2323:1)]: else { tp = (tchunkptr)(p); insert_large_chunk(m, tp, s); }
[MALLOC.LIB(2324:1)]: }
[MALLOC.LIB(2324:1)]: }
003:e353 2704         add sp, 4                                4
003:e355 ED45         lret                                     13
[MALLOC.LIB(2326:1)]: __static void  unlink_chunk(mstate m, mchunkptr p, m_size_t s) {
003:e357 27FC         add sp, -4                               4
[MALLOC.LIB(2329:3)]: if (is_small(s)) unlink_small_chunk(m, p, s);
003:e359 210F00       ld hl, 0x000F                            6
003:e35c 39           add hl, sp                               2
003:e35d DD1A         ld bcde, (hl)                            14
003:e35f DDB9         srl 2, bcde                              4
003:e361 DDB8         srl 1, bcde                              4
003:e363 B4           ex jkhl, bcde                            2
003:e364 A320         ld bcde, 32                              4
003:e366 ED58         cp jkhl, bcde                            4
003:e368 EDDC         flag c, hl                               4
003:e36a CC           bool hl                                  2
003:e36b CA8BE3       jp z, 0xE38B                             7
[MALLOC.LIB(2329:20)]: unlink_small_chunk(m, p, s);
003:e36e DDEE0F       ld bcde, (sp + 0x0F)                     15
003:e371 DDF5         push bcde                                18
003:e373 DDEE0F       ld bcde, (sp + 0x0F)                     15
003:e376 DDF5         push bcde                                18
003:e378 210F00       ld hl, 0x000F                            6
003:e37b 39           add hl, sp                               2
003:e37c DD1A         ld bcde, (hl)                            14
003:e37e DD9D         ld px, bcde                              4
003:e380 EDD5         push px                                  18
003:e382 CF5EE703     lcall unlink_small_chunk                 19
003:e386 270C         add sp, 12                               4
003:e388 C3A6E3       jp 0xE3A6                                7
[MALLOC.LIB(2330:1)]: else { tp = (tchunkptr)(p); unlink_large_chunk(m, tp); }
[MALLOC.LIB(2330:9)]: tp = (tchunkptr)(p); unlink_large_chunk(m, tp); }
[MALLOC.LIB(2330:10)]: tp = (tchunkptr)(p); unlink_large_chunk(m, tp); }
003:e38b ED140B       ld px, (sp + 0x0B)                       15
003:e38e ED1500       ld (sp + 0x00), px                       19
[MALLOC.LIB(2330:31)]: unlink_large_chunk(m, tp); }
003:e391 DDEE00       ld bcde, (sp + 0x00)                     15
003:e394 DDF5         push bcde                                18
003:e396 210B00       ld hl, 0x000B                            6
003:e399 39           add hl, sp                               2
003:e39a DD1A         ld bcde, (hl)                            14
003:e39c DD9D         ld px, bcde                              4
003:e39e EDD5         push px                                  18
003:e3a0 CFAAE303     lcall unlink_large_chunk                 19
003:e3a4 2708         add sp, 8                                4
[MALLOC.LIB(2330:58)]: }
[MALLOC.LIB(2330:1)]: else { tp = (tchunkptr)(p); unlink_large_chunk(m, tp); }
[MALLOC.LIB(2331:1)]: }
[MALLOC.LIB(2331:1)]: }
003:e3a6 2704         add sp, 4                                4
003:e3a8 ED45         lret                                     13
[MALLOC.LIB(2239:1)]: __static void unlink_large_chunk(mstate m, tchunkptr x) {
003:e3aa 27E0         add sp, -32                              4
[MALLOC.LIB(2247:3)]: xp = x->parent;
003:e3ac ED1427       ld px, (sp + 0x27)                       15
003:e3af 6D5C18       ld px, px + 24                           6
003:e3b2 6D5800       ld px, (px + 0)                          15
003:e3b5 ED151C       ld (sp + 0x1C), px                       19
[MALLOC.LIB(2248:3)]: if (x->bk != x) {
003:e3b8 ED1427       ld px, (sp + 0x27)                       15
003:e3bb 6D5C0C       ld px, px + 12                           6
003:e3be 6D5800       ld px, (px + 0)                          15
003:e3c1 FDDD         ld jkhl, px                              4
003:e3c3 DDEE27       ld bcde, (sp + 0x27)                     15
003:e3c6 DD9D         ld px, bcde                              4
003:e3c8 ED58         cp jkhl, bcde                            4
003:e3ca EDC4         flag nz, hl                              4
003:e3cc CC           bool hl                                  2
003:e3cd CA40E4       jp z, 0xE440                             7
[MALLOC.LIB(2248:19)]: {
[MALLOC.LIB(2249:5)]: f = x->fd;
003:e3d0 ED1427       ld px, (sp + 0x27)                       15
003:e3d3 6D5C08       ld px, px + 8                            6
003:e3d6 6D5800       ld px, (px + 0)                          15
003:e3d9 ED1514       ld (sp + 0x14), px                       19
[MALLOC.LIB(2250:5)]: r = x->bk;
003:e3dc ED1427       ld px, (sp + 0x27)                       15
003:e3df 6D5C0C       ld px, px + 12                           6
003:e3e2 6D5800       ld px, (px + 0)                          15
003:e3e5 ED1518       ld (sp + 0x18), px                       19
[MALLOC.LIB(2251:5)]: if (RTCHECK(ok_address(m, f))) {
003:e3e8 DDEE14       ld bcde, (sp + 0x14)                     15
003:e3eb DDF5         push bcde                                18
003:e3ed ED1427       ld px, (sp + 0x27)                       15
003:e3f0 6D5C10       ld px, px + 16                           6
003:e3f3 6D5800       ld px, (px + 0)                          15
003:e3f6 DDDD         ld bcde, px                              4
003:e3f8 FDF1         pop jkhl                                 13
003:e3fa ED58         cp jkhl, bcde                            4
003:e3fc EDD4         flag nc, hl                              4
003:e3fe CC           bool hl                                  2
003:e3ff CA2BE4       jp z, 0xE42B                             7
[MALLOC.LIB(2251:36)]: {
[MALLOC.LIB(2252:7)]: f->bk = r;
003:e402 ED1414       ld px, (sp + 0x14)                       15
003:e405 6D5C0C       ld px, px + 12                           6
003:e408 DDEE18       ld bcde, (sp + 0x18)                     15
003:e40b DDAD         ld py, bcde                              4
003:e40d 6D9900       ld (px + 0), py                          19
003:e410 6D67         ld px, py                                4
[MALLOC.LIB(2253:7)]: r->fd = f;
003:e412 FDEE18       ld jkhl, (sp + 0x18)                     15
003:e415 A308         ld bcde, 8                               4
003:e417 EDC6         add jkhl, bcde                           4
003:e419 FD9D         ld px, jkhl                              4
003:e41b 211400       ld hl, 0x0014                            6
003:e41e 39           add hl, sp                               2
003:e41f DD1A         ld bcde, (hl)                            14
003:e421 DDAD         ld py, bcde                              4
003:e423 6D9900       ld (px + 0), py                          19
003:e426 6D67         ld px, py                                4
[MALLOC.LIB(2254:5)]: }
003:e428 C33DE4       jp 0xE43D                                7
[MALLOC.LIB(2255:1)]: else {
[MALLOC.LIB(2255:10)]: {
[MALLOC.LIB(2256:7)]: CORRUPTION_ERROR_ACTION(m);
003:e42b 21F4FC       ld hl, 0xFCF4                            6
003:e42e E5           push hl                                  10
003:e42f CD7321       call exception                           12
003:e432 2702         add sp, 2                                4
003:e434 21F4FC       ld hl, 0xFCF4                            6
003:e437 E5           push hl                                  10
003:e438 CD8125       call exit                                12
003:e43b 2702         add sp, 2                                4
[MALLOC.LIB(2257:5)]: }
[MALLOC.LIB(2257:1)]: }
[MALLOC.LIB(2258:3)]: }
003:e43d C317E5       jp 0xE517                                7
[MALLOC.LIB(2259:1)]: else {
[MALLOC.LIB(2259:8)]: {
[MALLOC.LIB(2260:5)]: if (((r = *(rp = &(x->child[1]))) != 0) ||
003:e440 FDEE27       ld jkhl, (sp + 0x27)                     15
003:e443 A310         ld bcde, 16                              4
003:e445 EDC6         add jkhl, bcde                           4
003:e447 A304         ld bcde, 4                               4
003:e449 EDC6         add jkhl, bcde                           4
003:e44b FD9D         ld px, jkhl                              4
003:e44d ED1510       ld (sp + 0x10), px                       19
003:e450 6D5800       ld px, (px + 0)                          15
003:e453 ED1518       ld (sp + 0x18), px                       19
003:e456 DDDD         ld bcde, px                              4
003:e458 B4           ex jkhl, bcde                            2
003:e459 A300         ld bcde, 0                               4
003:e45b ED58         cp jkhl, bcde                            4
003:e45d EDC4         flag nz, hl                              4
003:e45f CC           bool hl                                  2
003:e460 C27FE4       jp nz, 0xE47F                            7
003:e463 FDEE27       ld jkhl, (sp + 0x27)                     15
003:e466 A310         ld bcde, 16                              4
003:e468 EDC6         add jkhl, bcde                           4
003:e46a FD9D         ld px, jkhl                              4
003:e46c ED1510       ld (sp + 0x10), px                       19
003:e46f 6D5800       ld px, (px + 0)                          15
003:e472 ED1518       ld (sp + 0x18), px                       19
003:e475 DDDD         ld bcde, px                              4
003:e477 B4           ex jkhl, bcde                            2
003:e478 A300         ld bcde, 0                               4
003:e47a ED58         cp jkhl, bcde                            4
003:e47c EDC4         flag nz, hl                              4
003:e47e CC           bool hl                                  2
[MALLOC.LIB(2261:1)]: ((r = *(rp = &(x->child[0]))) != 0)) {
003:e47f CC           bool hl                                  2
003:e480 CA17E5       jp z, 0xE517                             7
[MALLOC.LIB(2261:46)]: {
[MALLOC.LIB(2262:1)]: while ((*(cp = &(r->child[1])) != 0) ||
[MALLOC.LIB(2262:7)]: while ((*(cp = &(r->child[1])) != 0) ||
003:e483 FDEE18       ld jkhl, (sp + 0x18)                     15
003:e486 A310         ld bcde, 16                              4
003:e488 EDC6         add jkhl, bcde                           4
003:e48a A304         ld bcde, 4                               4
003:e48c EDC6         add jkhl, bcde                           4
003:e48e FD9D         ld px, jkhl                              4
003:e490 ED150C       ld (sp + 0x0C), px                       19
003:e493 6D5800       ld px, (px + 0)                          15
003:e496 FDDD         ld jkhl, px                              4
003:e498 A300         ld bcde, 0                               4
003:e49a ED58         cp jkhl, bcde                            4
003:e49c EDC4         flag nz, hl                              4
003:e49e CC           bool hl                                  2
003:e49f C2B7E4       jp nz, 0xE4B7                            7
003:e4a2 ED1418       ld px, (sp + 0x18)                       15
003:e4a5 6D5C10       ld px, px + 16                           6
003:e4a8 ED150C       ld (sp + 0x0C), px                       19
003:e4ab 6D5800       ld px, (px + 0)                          15
003:e4ae FDDD         ld jkhl, px                              4
003:e4b0 A300         ld bcde, 0                               4
003:e4b2 ED58         cp jkhl, bcde                            4
003:e4b4 EDC4         flag nz, hl                              4
003:e4b6 CC           bool hl                                  2
[MALLOC.LIB(2263:1)]: (*(cp = &(r->child[0])) != 0)) {
003:e4b7 CC           bool hl                                  2
003:e4b8 CAD1E4       jp z, 0xE4D1                             7
[MALLOC.LIB(2263:45)]: {
[MALLOC.LIB(2264:9)]: r = *(rp = cp);
003:e4bb 210C00       ld hl, 0x000C                            6
003:e4be 39           add hl, sp                               2
003:e4bf DD1A         ld bcde, (hl)                            14
003:e4c1 DD9D         ld px, bcde                              4
003:e4c3 ED1510       ld (sp + 0x10), px                       19
003:e4c6 6D5800       ld px, (px + 0)                          15
003:e4c9 ED1518       ld (sp + 0x18), px                       19
003:e4cc DDDD         ld bcde, px                              4
[MALLOC.LIB(2265:7)]: }
003:e4ce C383E4       jp 0xE483                                7
[MALLOC.LIB(2265:1)]: }
[MALLOC.LIB(2266:7)]: if (RTCHECK(ok_address(m, rp)))
003:e4d1 DDEE10       ld bcde, (sp + 0x10)                     15
003:e4d4 DDF5         push bcde                                18
003:e4d6 ED1427       ld px, (sp + 0x27)                       15
003:e4d9 6D5C10       ld px, px + 16                           6
003:e4dc 6D5800       ld px, (px + 0)                          15
003:e4df DDDD         ld bcde, px                              4
003:e4e1 FDF1         pop jkhl                                 13
003:e4e3 ED58         cp jkhl, bcde                            4
003:e4e5 EDD4         flag nc, hl                              4
003:e4e7 CC           bool hl                                  2
003:e4e8 CA05E5       jp z, 0xE505                             7
[MALLOC.LIB(2267:9)]: *rp = 0;
003:e4eb 211000       ld hl, 0x0010                            6
003:e4ee 39           add hl, sp                               2
003:e4ef DD1A         ld bcde, (hl)                            14
003:e4f1 DDF5         push bcde                                18
003:e4f3 ED1C00000000 ld px, 0x00000000                        12
003:e4f9 6D97         ld py, px                                4
003:e4fb EDD1         pop px                                   13
003:e4fd 6D9900       ld (px + 0), py                          19
003:e500 6D67         ld px, py                                4
003:e502 C317E5       jp 0xE517                                7
[MALLOC.LIB(2268:1)]: else {
[MALLOC.LIB(2268:12)]: {
[MALLOC.LIB(2269:9)]: CORRUPTION_ERROR_ACTION(m);
003:e505 21F4FC       ld hl, 0xFCF4                            6
003:e508 E5           push hl                                  10
003:e509 CD7321       call exception                           12
003:e50c 2702         add sp, 2                                4
003:e50e 21F4FC       ld hl, 0xFCF4                            6
003:e511 E5           push hl                                  10
003:e512 CD8125       call exit                                12
003:e515 2702         add sp, 2                                4
[MALLOC.LIB(2270:7)]: }
[MALLOC.LIB(2270:1)]: }
[MALLOC.LIB(2271:5)]: }
[MALLOC.LIB(2272:1)]: }
[MALLOC.LIB(2272:3)]: }
[MALLOC.LIB(2272:1)]: }
[MALLOC.LIB(2273:3)]: if (xp != 0) {
003:e517 FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e51a A300         ld bcde, 0                               4
003:e51c ED58         cp jkhl, bcde                            4
003:e51e EDC4         flag nz, hl                              4
003:e520 CC           bool hl                                  2
003:e521 CA5AE7       jp z, 0xE75A                             7
[MALLOC.LIB(2273:16)]: {
[MALLOC.LIB(2274:5)]: h = treebin_at(m, x->index);
003:e524 FDEE23       ld jkhl, (sp + 0x23)                     15
003:e527 112801       ld de, 0x0128                            6
003:e52a 010000       ld bc, 0x0000                            6
003:e52d EDC6         add jkhl, bcde                           4
003:e52f ED1427       ld px, (sp + 0x27)                       15
003:e532 6D5C1C       ld px, px + 28                           6
003:e535 DD1E00       ld bcde, (px + 0)                        15
003:e538 DDA9         sll 2, bcde                              4
003:e53a EDC6         add jkhl, bcde                           4
003:e53c FD9D         ld px, jkhl                              4
003:e53e ED1508       ld (sp + 0x08), px                       19
[MALLOC.LIB(2275:5)]: if (x == *h) {
003:e541 DDEE27       ld bcde, (sp + 0x27)                     15
003:e544 DDF5         push bcde                                18
003:e546 ED140C       ld px, (sp + 0x0C)                       15
003:e549 6D5800       ld px, (px + 0)                          15
003:e54c DDDD         ld bcde, px                              4
003:e54e FDF1         pop jkhl                                 13
003:e550 ED58         cp jkhl, bcde                            4
003:e552 EDCC         flag z, hl                               4
003:e554 CC           bool hl                                  2
003:e555 CAA7E5       jp z, 0xE5A7                             7
[MALLOC.LIB(2275:18)]: {
[MALLOC.LIB(2276:7)]: if ((*h = r) == 0)
003:e558 ED1408       ld px, (sp + 0x08)                       15
003:e55b DDEE18       ld bcde, (sp + 0x18)                     15
003:e55e DDAD         ld py, bcde                              4
003:e560 6D9900       ld (px + 0), py                          19
003:e563 FDED         ld jkhl, py                              4
003:e565 A300         ld bcde, 0                               4
003:e567 ED58         cp jkhl, bcde                            4
003:e569 EDCC         flag z, hl                               4
003:e56b CC           bool hl                                  2
003:e56c CAA4E5       jp z, .lt50MHz                           7
[MALLOC.LIB(2277:9)]: clear_treemap(m, x->index);
003:e56f ED1423       ld px, (sp + 0x23)                       15
003:e572 6D5C04       ld px, px + 4                            6
003:e575 EDD5         push px                                  18
003:e577 DD1E00       ld bcde, (px + 0)                        15
003:e57a DDF5         push bcde                                18
003:e57c FDEE2F       ld jkhl, (sp + 0x2F)                     15
003:e57f A31C         ld bcde, 28                              4
003:e581 EDC6         add jkhl, bcde                           4
003:e583 FD9D         ld px, jkhl                              4
003:e585 DD1E00       ld bcde, (px + 0)                        15
003:e588 DDF5         push bcde                                18
003:e58a A301         ld bcde, 1                               4
003:e58c CD4C27       call swap4_                              12
003:e58f CD9016       call L_asl                               12
003:e592 A4FF         ld jkhl, -1                              4
003:e594 EDD6         sub jkhl, bcde                           4
003:e596 B4           ex jkhl, bcde                            2
003:e597 FDF1         pop jkhl                                 13
003:e599 EDE6         and jkhl, bcde                           4
003:e59b B1           ld de, hl                                2
003:e59c B9           ex jk, hl                                2
003:e59d 91           ld bc, hl                                2
003:e59e B9           ex jk, hl                                2
003:e59f EDD1         pop px                                   13
003:e5a1 DD1F00       ld (px + 0), bcde                        19
[MALLOC.LIB(2278:1)]: }
[MALLOC.LIB(2278:5)]: }
003:e5a4 C321E6       jp 0xE621                                7
[MALLOC.LIB(2279:1)]: else if (RTCHECK(ok_address(m, xp))) {
[MALLOC.LIB(2279:10)]: if (RTCHECK(ok_address(m, xp))) {
003:e5a7 DDEE1C       ld bcde, (sp + 0x1C)                     15
003:e5aa DDF5         push bcde                                18
003:e5ac ED1427       ld px, (sp + 0x27)                       15
003:e5af 6D5C10       ld px, px + 16                           6
003:e5b2 6D5800       ld px, (px + 0)                          15
003:e5b5 DDDD         ld bcde, px                              4
003:e5b7 FDF1         pop jkhl                                 13
003:e5b9 ED58         cp jkhl, bcde                            4
003:e5bb EDD4         flag nc, hl                              4
003:e5bd CC           bool hl                                  2
003:e5be CA0FE6       jp z, 0xE60F                             7
[MALLOC.LIB(2279:42)]: {
[MALLOC.LIB(2280:7)]: if (xp->child[0] == x)
003:e5c1 ED141C       ld px, (sp + 0x1C)                       15
003:e5c4 6D5C10       ld px, px + 16                           6
003:e5c7 6D5800       ld px, (px + 0)                          15
003:e5ca FDDD         ld jkhl, px                              4
003:e5cc DDEE27       ld bcde, (sp + 0x27)                     15
003:e5cf DD9D         ld px, bcde                              4
003:e5d1 ED58         cp jkhl, bcde                            4
003:e5d3 EDCC         flag z, hl                               4
003:e5d5 CC           bool hl                                  2
003:e5d6 CAF2E5       jp z, dkInitDebugKernelComs              7
[MALLOC.LIB(2281:9)]: xp->child[0] = r;
003:e5d9 FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e5dc A310         ld bcde, 16                              4
003:e5de EDC6         add jkhl, bcde                           4
003:e5e0 FD9D         ld px, jkhl                              4
003:e5e2 211800       ld hl, 0x0018                            6
003:e5e5 39           add hl, sp                               2
003:e5e6 DD1A         ld bcde, (hl)                            14
003:e5e8 DDAD         ld py, bcde                              4
003:e5ea 6D9900       ld (px + 0), py                          19
003:e5ed 6D67         ld px, py                                4
003:e5ef C30CE6       jp 0xE60C                                7
[MALLOC.LIB(2282:1)]: else
[MALLOC.LIB(2283:9)]: xp->child[1] = r;
003:e5f2 FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e5f5 A310         ld bcde, 16                              4
003:e5f7 EDC6         add jkhl, bcde                           4
003:e5f9 A304         ld bcde, 4                               4
003:e5fb EDC6         add jkhl, bcde                           4
003:e5fd FD9D         ld px, jkhl                              4
003:e5ff 211800       ld hl, 0x0018                            6
003:e602 39           add hl, sp                               2
003:e603 DD1A         ld bcde, (hl)                            14
003:e605 DDAD         ld py, bcde                              4
003:e607 6D9900       ld (px + 0), py                          19
003:e60a 6D67         ld px, py                                4
[MALLOC.LIB(2283:1)]: xp->child[1] = r;
[MALLOC.LIB(2284:5)]: }
003:e60c C321E6       jp 0xE621                                7
[MALLOC.LIB(2285:1)]: else
[MALLOC.LIB(2286:7)]: CORRUPTION_ERROR_ACTION(m);
003:e60f 21F4FC       ld hl, 0xFCF4                            6
003:e612 E5           push hl                                  10
003:e613 CD7321       call exception                           12
003:e616 2702         add sp, 2                                4
003:e618 21F4FC       ld hl, 0xFCF4                            6
003:e61b E5           push hl                                  10
003:e61c CD8125       call exit                                12
003:e61f 2702         add sp, 2                                4
[MALLOC.LIB(2286:1)]: CORRUPTION_ERROR_ACTION(m);
[MALLOC.LIB(2286:1)]: CORRUPTION_ERROR_ACTION(m);
[MALLOC.LIB(2287:5)]: if (r != 0) {
003:e621 FDEE18       ld jkhl, (sp + 0x18)                     15
003:e624 A300         ld bcde, 0                               4
003:e626 ED58         cp jkhl, bcde                            4
003:e628 EDC4         flag nz, hl                              4
003:e62a CC           bool hl                                  2
003:e62b CA5AE7       jp z, 0xE75A                             7
[MALLOC.LIB(2287:17)]: {
[MALLOC.LIB(2288:7)]: if (RTCHECK(ok_address(m, r))) {
003:e62e DDEE18       ld bcde, (sp + 0x18)                     15
003:e631 DDF5         push bcde                                18
003:e633 ED1427       ld px, (sp + 0x27)                       15
003:e636 6D5C10       ld px, px + 16                           6
003:e639 6D5800       ld px, (px + 0)                          15
003:e63c DDDD         ld bcde, px                              4
003:e63e FDF1         pop jkhl                                 13
003:e640 ED58         cp jkhl, bcde                            4
003:e642 EDD4         flag nc, hl                              4
003:e644 CC           bool hl                                  2
003:e645 CA48E7       jp z, 0xE748                             7
[MALLOC.LIB(2288:38)]: {
[MALLOC.LIB(2289:9)]: r->parent = xp;
003:e648 ED1418       ld px, (sp + 0x18)                       15
003:e64b 6D5C18       ld px, px + 24                           6
003:e64e DDEE1C       ld bcde, (sp + 0x1C)                     15
003:e651 DDAD         ld py, bcde                              4
003:e653 6D9900       ld (px + 0), py                          19
003:e656 6D67         ld px, py                                4
[MALLOC.LIB(2290:9)]: if ((c0 = x->child[0]) != 0) {
003:e658 FDEE27       ld jkhl, (sp + 0x27)                     15
003:e65b A310         ld bcde, 16                              4
003:e65d EDC6         add jkhl, bcde                           4
003:e65f FD9D         ld px, jkhl                              4
003:e661 6D5800       ld px, (px + 0)                          15
003:e664 ED1504       ld (sp + 0x04), px                       19
003:e667 DDDD         ld bcde, px                              4
003:e669 B4           ex jkhl, bcde                            2
003:e66a A300         ld bcde, 0                               4
003:e66c ED58         cp jkhl, bcde                            4
003:e66e EDC4         flag nz, hl                              4
003:e670 CC           bool hl                                  2
003:e671 CAC9E6       jp z, 0xE6C9                             7
[MALLOC.LIB(2290:38)]: {
[MALLOC.LIB(2291:11)]: if (RTCHECK(ok_address(m, c0))) {
003:e674 DDEE04       ld bcde, (sp + 0x04)                     15
003:e677 DDF5         push bcde                                18
003:e679 ED1427       ld px, (sp + 0x27)                       15
003:e67c 6D5C10       ld px, px + 16                           6
003:e67f 6D5800       ld px, (px + 0)                          15
003:e682 DDDD         ld bcde, px                              4
003:e684 FDF1         pop jkhl                                 13
003:e686 ED58         cp jkhl, bcde                            4
003:e688 EDD4         flag nc, hl                              4
003:e68a CC           bool hl                                  2
003:e68b CAB7E6       jp z, 0xE6B7                             7
[MALLOC.LIB(2291:43)]: {
[MALLOC.LIB(2292:13)]: r->child[0] = c0;
003:e68e ED1418       ld px, (sp + 0x18)                       15
003:e691 6D5C10       ld px, px + 16                           6
003:e694 DDEE04       ld bcde, (sp + 0x04)                     15
003:e697 DDAD         ld py, bcde                              4
003:e699 6D9900       ld (px + 0), py                          19
003:e69c 6D67         ld px, py                                4
[MALLOC.LIB(2293:13)]: c0->parent = r;
003:e69e FDEE04       ld jkhl, (sp + 0x04)                     15
003:e6a1 A318         ld bcde, 24                              4
003:e6a3 EDC6         add jkhl, bcde                           4
003:e6a5 FD9D         ld px, jkhl                              4
003:e6a7 211800       ld hl, 0x0018                            6
003:e6aa 39           add hl, sp                               2
003:e6ab DD1A         ld bcde, (hl)                            14
003:e6ad DDAD         ld py, bcde                              4
003:e6af 6D9900       ld (px + 0), py                          19
003:e6b2 6D67         ld px, py                                4
[MALLOC.LIB(2294:11)]: }
003:e6b4 C3C9E6       jp 0xE6C9                                7
[MALLOC.LIB(2295:1)]: else
[MALLOC.LIB(2296:13)]: CORRUPTION_ERROR_ACTION(m);
003:e6b7 21F4FC       ld hl, 0xFCF4                            6
003:e6ba E5           push hl                                  10
003:e6bb CD7321       call exception                           12
003:e6be 2702         add sp, 2                                4
003:e6c0 21F4FC       ld hl, 0xFCF4                            6
003:e6c3 E5           push hl                                  10
003:e6c4 CD8125       call exit                                12
003:e6c7 2702         add sp, 2                                4
[MALLOC.LIB(2296:1)]: CORRUPTION_ERROR_ACTION(m);
[MALLOC.LIB(2297:9)]: }
[MALLOC.LIB(2298:1)]: if ((c1 = x->child[1]) != 0) {
[MALLOC.LIB(2298:9)]: if ((c1 = x->child[1]) != 0) {
003:e6c9 FDEE27       ld jkhl, (sp + 0x27)                     15
003:e6cc A310         ld bcde, 16                              4
003:e6ce EDC6         add jkhl, bcde                           4
003:e6d0 A304         ld bcde, 4                               4
003:e6d2 EDC6         add jkhl, bcde                           4
003:e6d4 FD9D         ld px, jkhl                              4
003:e6d6 6D5800       ld px, (px + 0)                          15
003:e6d9 ED1500       ld (sp + 0x00), px                       19
003:e6dc DDDD         ld bcde, px                              4
003:e6de B4           ex jkhl, bcde                            2
003:e6df A300         ld bcde, 0                               4
003:e6e1 ED58         cp jkhl, bcde                            4
003:e6e3 EDC4         flag nz, hl                              4
003:e6e5 CC           bool hl                                  2
003:e6e6 CA45E7       jp z, 0xE745                             7
[MALLOC.LIB(2298:38)]: {
[MALLOC.LIB(2299:11)]: if (RTCHECK(ok_address(m, c1))) {
003:e6e9 DDEE00       ld bcde, (sp + 0x00)                     15
003:e6ec DDF5         push bcde                                18
003:e6ee ED1427       ld px, (sp + 0x27)                       15
003:e6f1 6D5C10       ld px, px + 16                           6
003:e6f4 6D5800       ld px, (px + 0)                          15
003:e6f7 DDDD         ld bcde, px                              4
003:e6f9 FDF1         pop jkhl                                 13
003:e6fb ED58         cp jkhl, bcde                            4
003:e6fd EDD4         flag nc, hl                              4
003:e6ff CC           bool hl                                  2
003:e700 CA33E7       jp z, 0xE733                             7
[MALLOC.LIB(2299:43)]: {
[MALLOC.LIB(2300:13)]: r->child[1] = c1;
003:e703 FDEE18       ld jkhl, (sp + 0x18)                     15
003:e706 A310         ld bcde, 16                              4
003:e708 EDC6         add jkhl, bcde                           4
003:e70a A304         ld bcde, 4                               4
003:e70c EDC6         add jkhl, bcde                           4
003:e70e FD9D         ld px, jkhl                              4
003:e710 DDEE00       ld bcde, (sp + 0x00)                     15
003:e713 DDAD         ld py, bcde                              4
003:e715 6D9900       ld (px + 0), py                          19
003:e718 6D67         ld px, py                                4
[MALLOC.LIB(2301:13)]: c1->parent = r;
003:e71a FDEE00       ld jkhl, (sp + 0x00)                     15
003:e71d A318         ld bcde, 24                              4
003:e71f EDC6         add jkhl, bcde                           4
003:e721 FD9D         ld px, jkhl                              4
003:e723 211800       ld hl, 0x0018                            6
003:e726 39           add hl, sp                               2
003:e727 DD1A         ld bcde, (hl)                            14
003:e729 DDAD         ld py, bcde                              4
003:e72b 6D9900       ld (px + 0), py                          19
003:e72e 6D67         ld px, py                                4
[MALLOC.LIB(2302:11)]: }
003:e730 C345E7       jp 0xE745                                7
[MALLOC.LIB(2303:1)]: else
[MALLOC.LIB(2304:13)]: CORRUPTION_ERROR_ACTION(m);
003:e733 21F4FC       ld hl, 0xFCF4                            6
003:e736 E5           push hl                                  10
003:e737 CD7321       call exception                           12
003:e73a 2702         add sp, 2                                4
003:e73c 21F4FC       ld hl, 0xFCF4                            6
003:e73f E5           push hl                                  10
003:e740 CD8125       call exit                                12
003:e743 2702         add sp, 2                                4
[MALLOC.LIB(2304:1)]: CORRUPTION_ERROR_ACTION(m);
[MALLOC.LIB(2305:9)]: }
[MALLOC.LIB(2306:1)]: }
[MALLOC.LIB(2306:7)]: }
003:e745 C35AE7       jp 0xE75A                                7
[MALLOC.LIB(2307:1)]: else
[MALLOC.LIB(2308:9)]: CORRUPTION_ERROR_ACTION(m);
003:e748 21F4FC       ld hl, 0xFCF4                            6
003:e74b E5           push hl                                  10
003:e74c CD7321       call exception                           12
003:e74f 2702         add sp, 2                                4
003:e751 21F4FC       ld hl, 0xFCF4                            6
003:e754 E5           push hl                                  10
003:e755 CD8125       call exit                                12
003:e758 2702         add sp, 2                                4
[MALLOC.LIB(2308:1)]: CORRUPTION_ERROR_ACTION(m);
[MALLOC.LIB(2309:5)]: }
[MALLOC.LIB(2310:1)]: }
[MALLOC.LIB(2310:3)]: }
[MALLOC.LIB(2311:1)]: }
[MALLOC.LIB(2311:1)]: }
[MALLOC.LIB(2311:1)]: }
003:e75a 2720         add sp, 32                               4
003:e75c ED45         lret                                     13
[MALLOC.LIB(2094:1)]: __static void unlink_small_chunk(mstate m, mchunkptr p, m_size_t s) {
003:e75e 27F4         add sp, -12                              4
[MALLOC.LIB(2100:3)]: f = p->fd;
003:e760 ED1413       ld px, (sp + 0x13)                       15
003:e763 6D5C08       ld px, px + 8                            6
003:e766 6D5800       ld px, (px + 0)                          15
003:e769 ED1508       ld (sp + 0x08), px                       19
[MALLOC.LIB(2101:3)]: b = p->bk;
003:e76c ED1413       ld px, (sp + 0x13)                       15
003:e76f 6D5C0C       ld px, px + 12                           6
003:e772 6D5800       ld px, (px + 0)                          15
003:e775 ED1504       ld (sp + 0x04), px                       19
[MALLOC.LIB(2102:3)]: i = small_index(s);
003:e778 DDEE17       ld bcde, (sp + 0x17)                     15
003:e77b DDB9         srl 2, bcde                              4
003:e77d DDB8         srl 1, bcde                              4
003:e77f DDEF00       ld (sp + 0x00), bcde                     19
[MALLOC.LIB(2103:27)]: ;
003:e782 DDEE08       ld bcde, (sp + 0x08)                     15
003:e785 DDF5         push bcde                                18
003:e787 DDEE08       ld bcde, (sp + 0x08)                     15
003:e78a DD9D         ld px, bcde                              4
003:e78c FDF1         pop jkhl                                 13
003:e78e ED58         cp jkhl, bcde                            4
003:e790 EDCC         flag z, hl                               4
003:e792 CC           bool hl                                  2
003:e793 CAC5E7       jp z, 0xE7C5                             7
[MALLOC.LIB(2107:5)]: clear_smallmap(m, i);
003:e796 ED140F       ld px, (sp + 0x0F)                       15
003:e799 EDD5         push px                                  18
003:e79b DD1E00       ld bcde, (px + 0)                        15
003:e79e DDF5         push bcde                                18
003:e7a0 210800       ld hl, 0x0008                            6
003:e7a3 39           add hl, sp                               2
003:e7a4 DD1A         ld bcde, (hl)                            14
003:e7a6 DDF5         push bcde                                18
003:e7a8 A301         ld bcde, 1                               4
003:e7aa CD4C27       call swap4_                              12
003:e7ad CD9016       call L_asl                               12
003:e7b0 A4FF         ld jkhl, -1                              4
003:e7b2 EDD6         sub jkhl, bcde                           4
003:e7b4 B4           ex jkhl, bcde                            2
003:e7b5 FDF1         pop jkhl                                 13
003:e7b7 EDE6         and jkhl, bcde                           4
003:e7b9 B1           ld de, hl                                2
003:e7ba B9           ex jk, hl                                2
003:e7bb 91           ld bc, hl                                2
003:e7bc B9           ex jk, hl                                2
003:e7bd EDD1         pop px                                   13
003:e7bf DD1F00       ld (px + 0), bcde                        19
003:e7c2 C377E8       jp 0xE877                                7
[MALLOC.LIB(2108:1)]: (b == smallbin_at(m,i) || ok_address(m, b)))) {
[MALLOC.LIB(2108:8)]: (b == smallbin_at(m,i) || ok_address(m, b)))) {
003:e7c5 ED1408       ld px, (sp + 0x08)                       15
003:e7c8 EDD5         push px                                  18
003:e7ca FDEE13       ld jkhl, (sp + 0x13)                     15
003:e7cd A320         ld bcde, 32                              4
003:e7cf EDC6         add jkhl, bcde                           4
003:e7d1 DDEE04       ld bcde, (sp + 0x04)                     15
003:e7d4 DDA8         sll 1, bcde                              4
003:e7d6 DDA9         sll 2, bcde                              4
003:e7d8 EDC6         add jkhl, bcde                           4
003:e7da B4           ex jkhl, bcde                            2
003:e7db FDF1         pop jkhl                                 13
003:e7dd ED58         cp jkhl, bcde                            4
003:e7df EDCC         flag z, hl                               4
003:e7e1 CC           bool hl                                  2
003:e7e2 C2FCE7       jp nz, 0xE7FC                            7
003:e7e5 DDEE08       ld bcde, (sp + 0x08)                     15
003:e7e8 DDF5         push bcde                                18
003:e7ea ED1413       ld px, (sp + 0x13)                       15
003:e7ed 6D5C10       ld px, px + 16                           6
003:e7f0 6D5800       ld px, (px + 0)                          15
003:e7f3 DDDD         ld bcde, px                              4
003:e7f5 FDF1         pop jkhl                                 13
003:e7f7 ED58         cp jkhl, bcde                            4
003:e7f9 EDD4         flag nc, hl                              4
003:e7fb CC           bool hl                                  2
[MALLOC.LIB(2108:1)]: (b == smallbin_at(m,i) || ok_address(m, b)))) {
003:e7fc CC           bool hl                                  2
003:e7fd CA38E8       jp z, 0xE838                             7
003:e800 ED1404       ld px, (sp + 0x04)                       15
003:e803 EDD5         push px                                  18
003:e805 FDEE13       ld jkhl, (sp + 0x13)                     15
003:e808 A320         ld bcde, 32                              4
003:e80a EDC6         add jkhl, bcde                           4
003:e80c DDEE04       ld bcde, (sp + 0x04)                     15
003:e80f DDA8         sll 1, bcde                              4
003:e811 DDA9         sll 2, bcde                              4
003:e813 EDC6         add jkhl, bcde                           4
003:e815 B4           ex jkhl, bcde                            2
003:e816 FDF1         pop jkhl                                 13
003:e818 ED58         cp jkhl, bcde                            4
003:e81a EDCC         flag z, hl                               4
003:e81c CC           bool hl                                  2
003:e81d C237E8       jp nz, 0xE837                            7
003:e820 DDEE04       ld bcde, (sp + 0x04)                     15
003:e823 DDF5         push bcde                                18
003:e825 ED1413       ld px, (sp + 0x13)                       15
003:e828 6D5C10       ld px, px + 16                           6
003:e82b 6D5800       ld px, (px + 0)                          15
003:e82e DDDD         ld bcde, px                              4
003:e830 FDF1         pop jkhl                                 13
003:e832 ED58         cp jkhl, bcde                            4
003:e834 EDD4         flag nc, hl                              4
003:e836 CC           bool hl                                  2
[MALLOC.LIB(2108:1)]: (b == smallbin_at(m,i) || ok_address(m, b)))) {
003:e837 CC           bool hl                                  2
[MALLOC.LIB(2108:1)]: (b == smallbin_at(m,i) || ok_address(m, b)))) {
003:e838 CC           bool hl                                  2
003:e839 CA65E8       jp z, 0xE865                             7
[MALLOC.LIB(2109:66)]: {
[MALLOC.LIB(2110:5)]: f->bk = b;
003:e83c ED1408       ld px, (sp + 0x08)                       15
003:e83f 6D5C0C       ld px, px + 12                           6
003:e842 DDEE04       ld bcde, (sp + 0x04)                     15
003:e845 DDAD         ld py, bcde                              4
003:e847 6D9900       ld (px + 0), py                          19
003:e84a 6D67         ld px, py                                4
[MALLOC.LIB(2111:5)]: b->fd = f;
003:e84c FDEE04       ld jkhl, (sp + 0x04)                     15
003:e84f A308         ld bcde, 8                               4
003:e851 EDC6         add jkhl, bcde                           4
003:e853 FD9D         ld px, jkhl                              4
003:e855 210800       ld hl, 0x0008                            6
003:e858 39           add hl, sp                               2
003:e859 DD1A         ld bcde, (hl)                            14
003:e85b DDAD         ld py, bcde                              4
003:e85d 6D9900       ld (px + 0), py                          19
003:e860 6D67         ld px, py                                4
[MALLOC.LIB(2112:3)]: }
003:e862 C377E8       jp 0xE877                                7
[MALLOC.LIB(2113:1)]: else {
[MALLOC.LIB(2113:8)]: {
[MALLOC.LIB(2114:5)]: CORRUPTION_ERROR_ACTION(m);
003:e865 21F4FC       ld hl, 0xFCF4                            6
003:e868 E5           push hl                                  10
003:e869 CD7321       call exception                           12
003:e86c 2702         add sp, 2                                4
003:e86e 21F4FC       ld hl, 0xFCF4                            6
003:e871 E5           push hl                                  10
003:e872 CD8125       call exit                                12
003:e875 2702         add sp, 2                                4
[MALLOC.LIB(2115:3)]: }
[MALLOC.LIB(2115:1)]: }
[MALLOC.LIB(2115:1)]: }
[MALLOC.LIB(2116:1)]: }
[MALLOC.LIB(2116:1)]: }
003:e877 270C         add sp, 12                               4
003:e879 ED45         lret                                     13
[VDRIVER.LIB(321:1)]: #asm __xmem
[VDRIVER.LIB(323:1)]: vwdog::
003:e87b 3AF3B4       ld a, (0xB4F3)                           9
003:e87e E608         and 0x08                                 4
003:e880 2807         jr z, 0xE889                             5
003:e882 3AB0B3       ld a, (0xB3B0)                           9
003:e885 CB57         bit 2, a                                 4
003:e887 281A         jr z, 0xE8A3                             5
[VDRIVER.LIB(335:1)]: .wvdog0:
003:e889 3A76B0       ld a, (0xB076)                           9
003:e88c B7           or a                                     2
003:e88d 2814         jr z, 0xE8A3                             5
003:e88f 57           ld d, a                                  2
003:e890 2162B0       ld hl, 0xB062                            6
003:e893 3E00         ld a, 0x00                               4
[VDRIVER.LIB(343:1)]: .vwdog1:
003:e895 7FBE         cp (hl)                                  7
003:e897 2805         jr z, 0xE89E                             5
003:e899 23           inc hl                                   2
003:e89a 35           dec (hl)                                 8
003:e89b 280C         jr z, 0xE8A9                             5
003:e89d 2B           dec hl                                   2
[VDRIVER.LIB(352:1)]: .vwdog1a:
003:e89e 23           inc hl                                   2
003:e89f 23           inc hl                                   2
003:e8a0 15           dec d                                    2
003:e8a1 20F2         jr nz, 0xE895                            5
[VDRIVER.LIB(358:1)]: .vwdogz:
003:e8a3 CD6627       call hitwd                               12
003:e8a6 00           nop                                      2
003:e8a7 ED45         lret                                     13
[VDRIVER.LIB(362:1)]: .vwdog5:									;     crash location
[VDRIVER.LIB(363:3)]: exception(-ERR_VIRTWDOGTIMEOUT);
[VDRIVER.LIB(363:3)]: exception(-ERR_VIRTWDOGTIMEOUT);
003:e8a9 2131FD       ld hl, 0xFD31                            6
003:e8ac E5           push hl                                  10
003:e8ad CD7321       call exception                           12
003:e8b0 2702         add sp, 2                                4
[VDRIVER.LIB(363:35)]: 
[VDRIVER.LIB(364:3)]: exit(-ERR_VIRTWDOGTIMEOUT);
[VDRIVER.LIB(364:3)]: exit(-ERR_VIRTWDOGTIMEOUT);
003:e8b2 2131FD       ld hl, 0xFD31                            6
003:e8b5 E5           push hl                                  10
003:e8b6 CD8125       call exit                                12
003:e8b9 2702         add sp, 2                                4
[VDRIVER.LIB(364:30)]: 
[VDRIVER.LIB(365:1)]: #endasm
[VDRIVER.LIB(112:1)]: __xmem void vwdogInit()
003:e8bb 3E00         ld a, 0x00                               4
003:e8bd 3276B0       ld (0xB076), a                           10
[VDRIVER.LIB(115:4)]: memset(vd_wdogarray,0,sizeof(vd_wdogarray));
003:e8c0 EDA51400     push 0x0014                              15
003:e8c4 EDA50000     push 0x0000                              15
003:e8c8 2162B0       ld hl, 0xB062                            6
003:e8cb E5           push hl                                  10
003:e8cc CDE824       call _n_memset                           12
003:e8cf 2706         add sp, 6                                4
[VDRIVER.LIB(116:1)]: } //vwdogInit()
[VDRIVER.LIB(116:1)]: } //vwdogInit()
003:e8d1 ED45         lret                                     13
[STACK.LIB(271:1)]: long xalloc(long sz)
[STACK.LIB(273:2)]: return _xalloc(&sz, 1, XALLOC_MAYBBB);
003:e8d3 EDA50300     push 0x0003                              15
003:e8d7 EDA50100     push 0x0001                              15
003:e8db 210700       ld hl, 0x0007                            6
003:e8de 39           add hl, sp                               2
003:e8df E5           push hl                                  10
003:e8e0 CF2EEC01     lcall 01:ec2e                            19
003:e8e4 2706         add sp, 6                                4
[STACK.LIB(273:1)]: return _xalloc(&sz, 1, XALLOC_MAYBBB);
003:e8e6 ED45         lret                                     13
[MEM.LIB(81:1)]: void xalloc_init(_sys_mem_origin_t *orgtbl, uint16 orgtblsize) {
003:e8e8 27E0         add sp, -32                              4
[MEM.LIB(94:4)]: xubreak = prev_xsbreak = 0L;
003:e8ea A300         ld bcde, 0                               4
003:e8ec DDEF14       ld (sp + 0x14), bcde                     19
003:e8ef 83AAB0       ld (0xB0AA), bcde                        19
[MEM.LIB(95:4)]: prior_tmp = 0;
003:e8f2 A300         ld bcde, 0                               4
003:e8f4 DDEF18       ld (sp + 0x18), bcde                     19
[MEM.LIB(96:4)]: i = orgtblsize-1;
003:e8f7 C425         ld hl, (sp + 0x25)                       9
003:e8f9 2B           dec hl                                   2
003:e8fa D412         ld (sp + 0x12), hl                       11
[MEM.LIB(98:1)]: do {
[MEM.LIB(98:5)]: {
[MEM.LIB(98:2)]: do {
003:e8fc C423         ld hl, (sp + 0x23)                       9
003:e8fe E5           push hl                                  10
003:e8ff C414         ld hl, (sp + 0x14)                       9
003:e901 29           add hl, hl                               2
003:e902 29           add hl, hl                               2
003:e903 29           add hl, hl                               2
003:e904 29           add hl, hl                               2
003:e905 B1           ld de, hl                                2
003:e906 E1           pop hl                                   7
003:e907 19           add hl, de                               2
003:e908 7E           ld a, (hl)                               5
003:e909 BF           clr hl                                   2
003:e90a 6F           ld l, a                                  2
003:e90b 4804         cp hl, 4                                 4
003:e90d EDCC         flag z, hl                               4
003:e90f CC           bool hl                                  2
003:e910 CA17E9       jp z, 0xE917                             7
[MEM.LIB(101:38)]: {
[MEM.LIB(102:8)]: continue;
003:e913 C34AEA       jp 0xEA4A                                7
003:e916 00           nop                                      2
[MEM.LIB(103:7)]: }
[MEM.LIB(104:1)]: available = orgtbl[i].totalbytes - orgtbl[i].usedbytes - 2;
[MEM.LIB(104:7)]: available = orgtbl[i].totalbytes - orgtbl[i].usedbytes - 2;
003:e917 C423         ld hl, (sp + 0x23)                       9
003:e919 E5           push hl                                  10
003:e91a C414         ld hl, (sp + 0x14)                       9
003:e91c 29           add hl, hl                               2
003:e91d 29           add hl, hl                               2
003:e91e 29           add hl, hl                               2
003:e91f 29           add hl, hl                               2
003:e920 B1           ld de, hl                                2
003:e921 E1           pop hl                                   7
003:e922 19           add hl, de                               2
003:e923 A30C         ld bcde, 12                              4
003:e925 19           add hl, de                               2
003:e926 DD1A         ld bcde, (hl)                            14
003:e928 DDF5         push bcde                                18
003:e92a C427         ld hl, (sp + 0x27)                       9
003:e92c E5           push hl                                  10
003:e92d C418         ld hl, (sp + 0x18)                       9
003:e92f FDAB         sll 4, jkhl                              4
003:e931 B1           ld de, hl                                2
003:e932 E1           pop hl                                   7
003:e933 19           add hl, de                               2
003:e934 A308         ld bcde, 8                               4
003:e936 19           add hl, de                               2
003:e937 DD1A         ld bcde, (hl)                            14
003:e939 FDF1         pop jkhl                                 13
003:e93b EDD6         sub jkhl, bcde                           4
003:e93d A302         ld bcde, 2                               4
003:e93f EDD6         sub jkhl, bcde                           4
003:e941 B4           ex jkhl, bcde                            2
003:e942 DDEF00       ld (sp + 0x00), bcde                     19
[MEM.LIB(105:7)]: if (XBREAK_T_ADJ >= available) {
003:e945 A40E         ld jkhl, 14                              4
003:e947 ED58         cp jkhl, bcde                            4
003:e949 EDB4         flag lt, hl                              4
003:e94b 2B           dec hl                                   2
003:e94c CC           bool hl                                  2
003:e94d CA54E9       jp z, 0xE954                             7
[MEM.LIB(105:38)]: {
[MEM.LIB(106:8)]: continue;
003:e950 C34AEA       jp 0xEA4A                                7
003:e953 00           nop                                      2
[MEM.LIB(107:7)]: }
[MEM.LIB(108:1)]: if (orgtbl[i].type == XVARORG) {
[MEM.LIB(108:7)]: if (orgtbl[i].type == XVARORG) {
003:e954 C423         ld hl, (sp + 0x23)                       9
003:e956 E5           push hl                                  10
003:e957 C414         ld hl, (sp + 0x14)                       9
003:e959 29           add hl, hl                               2
003:e95a 29           add hl, hl                               2
003:e95b 29           add hl, hl                               2
003:e95c 29           add hl, hl                               2
003:e95d B1           ld de, hl                                2
003:e95e E1           pop hl                                   7
003:e95f 19           add hl, de                               2
003:e960 7E           ld a, (hl)                               5
003:e961 BF           clr hl                                   2
003:e962 6F           ld l, a                                  2
003:e963 4805         cp hl, 5                                 4
003:e965 EDCC         flag z, hl                               4
003:e967 CC           bool hl                                  2
003:e968 CA8BE9       jp z, 0xE98B                             7
[MEM.LIB(108:38)]: {
[MEM.LIB(109:10)]: tmp = orgtbl[i].paddr - available;
003:e96b C423         ld hl, (sp + 0x23)                       9
003:e96d E5           push hl                                  10
003:e96e C414         ld hl, (sp + 0x14)                       9
003:e970 FDAB         sll 4, jkhl                              4
003:e972 B1           ld de, hl                                2
003:e973 E1           pop hl                                   7
003:e974 19           add hl, de                               2
003:e975 23           inc hl                                   2
003:e976 23           inc hl                                   2
003:e977 FD1A         ld jkhl, (hl)                            14
003:e979 DDEE00       ld bcde, (sp + 0x00)                     15
003:e97c EDD6         sub jkhl, bcde                           4
003:e97e B1           ld de, hl                                2
003:e97f B9           ex jk, hl                                2
003:e980 91           ld bc, hl                                2
003:e981 B9           ex jk, hl                                2
003:e982 211C00       ld hl, 0x001C                            6
003:e985 39           add hl, sp                               2
003:e986 DD1B         ld (hl), bcde                            18
[MEM.LIB(110:7)]: }
003:e988 C3BAE9       jp 0xE9BA                                7
[MEM.LIB(111:1)]: else {
[MEM.LIB(111:12)]: {
[MEM.LIB(112:6)]: tmp = orgtbl[i].paddr + orgtbl[i].usedbytes;
003:e98b C423         ld hl, (sp + 0x23)                       9
003:e98d E5           push hl                                  10
003:e98e C414         ld hl, (sp + 0x14)                       9
003:e990 29           add hl, hl                               2
003:e991 29           add hl, hl                               2
003:e992 29           add hl, hl                               2
003:e993 29           add hl, hl                               2
003:e994 B1           ld de, hl                                2
003:e995 E1           pop hl                                   7
003:e996 19           add hl, de                               2
003:e997 23           inc hl                                   2
003:e998 23           inc hl                                   2
003:e999 DD1A         ld bcde, (hl)                            14
003:e99b DDF5         push bcde                                18
003:e99d C427         ld hl, (sp + 0x27)                       9
003:e99f E5           push hl                                  10
003:e9a0 C418         ld hl, (sp + 0x18)                       9
003:e9a2 FDAB         sll 4, jkhl                              4
003:e9a4 B1           ld de, hl                                2
003:e9a5 E1           pop hl                                   7
003:e9a6 19           add hl, de                               2
003:e9a7 A308         ld bcde, 8                               4
003:e9a9 19           add hl, de                               2
003:e9aa DD1A         ld bcde, (hl)                            14
003:e9ac FDF1         pop jkhl                                 13
003:e9ae EDC6         add jkhl, bcde                           4
003:e9b0 B1           ld de, hl                                2
003:e9b1 B9           ex jk, hl                                2
003:e9b2 91           ld bc, hl                                2
003:e9b3 B9           ex jk, hl                                2
003:e9b4 211C00       ld hl, 0x001C                            6
003:e9b7 39           add hl, sp                               2
003:e9b8 DD1B         ld (hl), bcde                            18
[MEM.LIB(113:7)]: }
[MEM.LIB(113:1)]: }
[MEM.LIB(114:7)]: if(tmp <= USER_XALLOC_START) {
003:e9ba FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e9bd A300         ld bcde, 0                               4
003:e9bf ED58         cp jkhl, bcde                            4
003:e9c1 EDA4         flag gt, hl                              4
003:e9c3 2B           dec hl                                   2
003:e9c4 CC           bool hl                                  2
003:e9c5 CACCE9       jp z, 0xE9CC                             7
[MEM.LIB(114:36)]: {
[MEM.LIB(115:10)]: break;
003:e9c8 C353EA       jp 0xEA53                                7
003:e9cb 00           nop                                      2
[MEM.LIB(116:7)]: }
[MEM.LIB(117:1)]: xsbreak.limit = tmp + XBREAK_T_ADJ;
[MEM.LIB(117:3)]: xsbreak.limit = tmp + XBREAK_T_ADJ;
003:e9cc FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e9cf A30E         ld bcde, 14                              4
003:e9d1 EDC6         add jkhl, bcde                           4
003:e9d3 FDEF08       ld (sp + 0x08), jkhl                     19
[MEM.LIB(118:7)]: xsbreak.sbreak = tmp + available;
003:e9d6 FDEE1C       ld jkhl, (sp + 0x1C)                     15
003:e9d9 DDEE00       ld bcde, (sp + 0x00)                     15
003:e9dc EDC6         add jkhl, bcde                           4
003:e9de B1           ld de, hl                                2
003:e9df B9           ex jk, hl                                2
003:e9e0 91           ld bc, hl                                2
003:e9e1 B9           ex jk, hl                                2
003:e9e2 DDEF04       ld (sp + 0x04), bcde                     19
[MEM.LIB(119:7)]: xsbreak.next = prev_xsbreak;
003:e9e5 DDEE14       ld bcde, (sp + 0x14)                     15
003:e9e8 DDEF0C       ld (sp + 0x0C), bcde                     19
[MEM.LIB(120:7)]: prev_xsbreak = tmp;
003:e9eb DDEE1C       ld bcde, (sp + 0x1C)                     15
003:e9ee DDEF14       ld (sp + 0x14), bcde                     19
[MEM.LIB(121:7)]: xsbreak.flags = orgtbl[i].flags;
003:e9f1 211000       ld hl, 0x0010                            6
003:e9f4 39           add hl, sp                               2
003:e9f5 E5           push hl                                  10
003:e9f6 C425         ld hl, (sp + 0x25)                       9
003:e9f8 E5           push hl                                  10
003:e9f9 C416         ld hl, (sp + 0x16)                       9
003:e9fb 29           add hl, hl                               2
003:e9fc 29           add hl, hl                               2
003:e9fd 29           add hl, hl                               2
003:e9fe 29           add hl, hl                               2
003:e9ff B1           ld de, hl                                2
003:ea00 E1           pop hl                                   7
003:ea01 19           add hl, de                               2
003:ea02 23           inc hl                                   2
003:ea03 7E           ld a, (hl)                               5
003:ea04 E1           pop hl                                   7
003:ea05 77           ld (hl), a                               6
[MEM.LIB(122:7)]: xsbreak.chksum = alloc_calc_chksum(&xsbreak, sizeof(xbreak_t));
003:ea06 211100       ld hl, 0x0011                            6
003:ea09 39           add hl, sp                               2
003:ea0a E5           push hl                                  10
003:ea0b EDA50E00     push 0x000E                              15
003:ea0f 210800       ld hl, 0x0008                            6
003:ea12 39           add hl, sp                               2
003:ea13 FD9F         ldl px, hl                               4
003:ea15 DDDD         ld bcde, px                              4
003:ea17 EDD5         push px                                  18
003:ea19 CFA7ED01     lcall alloc_calc_chksum                  19
003:ea1d 2706         add sp, 6                                4
003:ea1f 7D           ld a, l                                  2
003:ea20 E1           pop hl                                   7
003:ea21 77           ld (hl), a                               6
[MEM.LIB(123:7)]: root2xmem(tmp, &xsbreak, sizeof(xbreak_t));
003:ea22 EDA50E00     push 0x000E                              15
003:ea26 210600       ld hl, 0x0006                            6
003:ea29 39           add hl, sp                               2
003:ea2a E5           push hl                                  10
003:ea2b CFD8E203     lcall paddr                              19
003:ea2f 2702         add sp, 2                                4
003:ea31 DDF5         push bcde                                18
003:ea33 212200       ld hl, 0x0022                            6
003:ea36 39           add hl, sp                               2
003:ea37 DD1A         ld bcde, (hl)                            14
003:ea39 DDF5         push bcde                                18
003:ea3b CF5FEA03     lcall xmem2xmem                          19
003:ea3f 270A         add sp, 10                               4
[MEM.LIB(124:7)]: prior_tmp = tmp;
003:ea41 DDEE1C       ld bcde, (sp + 0x1C)                     15
003:ea44 211800       ld hl, 0x0018                            6
003:ea47 39           add hl, sp                               2
003:ea48 DD1B         ld (hl), bcde                            18
[MEM.LIB(125:5)]: while(--i);
[MEM.LIB(125:1)]: } while(--i);
[MEM.LIB(125:12)]: --i);
003:ea4a C412         ld hl, (sp + 0x12)                       9
003:ea4c 2B           dec hl                                   2
003:ea4d D412         ld (sp + 0x12), hl                       11
003:ea4f CC           bool hl                                  2
003:ea50 C2FCE8       jp nz, 0xE8FC                            7
[MEM.LIB(125:1)]: } while(--i);
[MEM.LIB(127:4)]: xubreak = prior_tmp;
003:ea53 DDEE18       ld bcde, (sp + 0x18)                     15
003:ea56 21AAB0       ld hl, 0xB0AA                            6
003:ea59 DD1B         ld (hl), bcde                            18
[MEM.LIB(129:1)]: }
[MEM.LIB(129:1)]: }
003:ea5b 2720         add sp, 32                               4
003:ea5d ED45         lret                                     13
[XMEM.LIB(160:1)]: int xmem2xmem(unsigned long dest, unsigned long src, unsigned int len)
[XMEM.LIB(185:2)]: _f_memcpy((void __far *) dest, (void __far *) src, len);
003:ea5f C40B         ld hl, (sp + 0x0B)                       9
003:ea61 A300         ld bcde, 0                               4
003:ea63 B1           ld de, hl                                2
003:ea64 DDF5         push bcde                                18
003:ea66 DDEE0B       ld bcde, (sp + 0x0B)                     15
003:ea69 DDF5         push bcde                                18
003:ea6b 210B00       ld hl, 0x000B                            6
003:ea6e 39           add hl, sp                               2
003:ea6f DD1A         ld bcde, (hl)                            14
003:ea71 DD9D         ld px, bcde                              4
003:ea73 EDD5         push px                                  18
003:ea75 CD9326       call _f_memmove                          12
003:ea78 270C         add sp, 12                               4
[XMEM.LIB(187:4)]: return 0;
003:ea7a BF           clr hl                                   2
[XMEM.LIB(187:1)]: return 0;
003:ea7b ED45         lret                                     13
